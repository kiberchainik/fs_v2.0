generator client {
  provider        = "prisma-client-js"
  output          = "./__generated__"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  role               UserRole      @default(CANDIDATE)
  isVerified         Boolean       @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean       @default(false) @map("is_two_factor_enabled")
  method             AuthMethod
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  agencydata         AgencyData?
  social             UserSocial[]
  authAccounts       AuthAccount[]
  candidatdata       CandidatData?

  ratings Rating[] @relation("UserRatings")

  reviews Rating[] @relation("ReviewerRatings")

  @@map("users")
}

model CandidatData {
  id                String             @id @default(uuid())
  firstname         String
  surname           String
  birthday          String
  phone             String?
  resident          String?
  about_my          String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  userId            String             @unique @map("user_id")
  avatar            String[]
  courses           Courses[]
  education         Education[]
  experience        Experience[]
  hobbies           Hobbies[]
  languages         Languages[]
  skills            Skills[]
  savedJobs         SavedJobs[]
  sendCandidature   SendCandidature[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidatLifeState CandidatLifeState?

  @@map("candidat_data")
}

model CandidatLifeState {
  id                    String        @id @default(uuid())
  availabilityTransport Boolean       @default(false) @map("availability_transport")
  maritalStatus         MaritalStatus @default(NONE) @map("marital_status")
  cdId                  String        @unique @map("candidate_id")
  driverCategory        Json?         @map("driver_license_category")
  candidate             CandidatData  @relation(fields: [cdId], references: [id], onDelete: Cascade)

  @@map("candidat_life_state")
}

model UserSocial {
  id         String @id @default(uuid())
  usId       String @map("user_id")
  socialLink String @map("social_link")
  user       User   @relation(fields: [usId], references: [id], onDelete: Cascade)

  @@map("user_social_links")
}

model Education {
  id             String          @id @default(uuid())
  school         String
  grade          String?
  startdate      DateTime        @db.Date
  enddate        DateTime        @db.Date
  description    String?
  levelId        String?         @map("level_education_id")
  levelEducation LevelEducation? @relation(fields: [levelId], references: [id])
  cdId           String          @map("candidate_id")
  candidate      CandidatData    @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Skills {
  id        String       @id @default(uuid())
  skill     String
  level     SkillsLevel  @default(NONE)
  cdId      String       @map("candidate_id")
  candidate CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Experience {
  id              String           @id @default(uuid())
  company         String
  location        String?
  currently       Boolean          @default(false)
  startDate       DateTime
  endDate         DateTime
  description     String?
  contractTypeId  String?          @map("contract_type_id")
  contractTypeJob ContractTypeJob? @relation(fields: [contractTypeId], references: [id])
  cdId            String           @map("candidate_id")
  candidate       CandidatData     @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Languages {
  id        String        @id @default(uuid())
  language  String
  level     LanguageLevel @default(BASIC)
  cdId      String        @map("candidate_id")
  candidate CandidatData  @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Courses {
  id          String       @id @default(uuid())
  course      String
  institution String
  grade       String?
  startdate   DateTime
  enddate     DateTime
  cdId        String       @map("candidate_id")
  candidate   CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Hobbies {
  id        String       @id @default(uuid())
  hobbie    String
  cdId      String       @map("candidate_id")
  candidate CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Rating {
  id         String   @id @default(cuid())
  userId     String
  reviewerId String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User @relation("UserRatings", fields: [userId], references: [id])
  reviewer User @relation("ReviewerRatings", fields: [reviewerId], references: [id])

  @@unique([userId, reviewerId]) // Уникальность пары
}

model AgencyData {
  id          String      @id @default(uuid())
  agency_name String
  slug        String      @unique
  address     String
  phone       String
  p_iva_c_f   String
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  userId      String      @unique @map("user_id")
  about       String
  logo        String[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch      Branch[]
  jobOffers   jobOffers[]

  @@map("agency_data")
}

model Branch {
  id           String      @id @default(uuid())
  name         String
  email        String
  phone        String
  fax          String?
  address      String
  location     String
  region       String
  logo         String?
  about_branch String?
  adId         String      @map("agency_id")
  agency       AgencyData  @relation(fields: [adId], references: [id])
  jobOffers    jobOffers[]

  @@map("branches")
}

model jobOffers {
  id                   String                @id @default(uuid())
  title                String
  slug                 String                @unique
  description          String
  region               String
  province             String
  location             String
  reallyUpTo           DateTime?             @map("really_up_to")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  isValidate           Boolean               @default(false)
  views                Int                   @default(0)
  categoryId           String                @map("category_id")
  contratId            String?               @map("contract_id")
  experienceId         String?               @map("experience_id")
  modeId               String?               @map("mode_job_id")
  workingTimeId        String?               @map("working_time_id")
  levelId              String?               @map("level_education_id")
  agencyId             String                @map("agency_id")
  branchId             String?               @map("branch_id")
  agency               AgencyData            @relation(fields: [agencyId], references: [id])
  branch               Branch?               @relation(fields: [branchId], references: [id])
  categories           Category              @relation(fields: [categoryId], references: [id])
  contractType         ContractTypeJob?      @relation(fields: [contratId], references: [id])
  experienceMinimalJob ExperienceMinimalJob? @relation(fields: [experienceId], references: [id])
  levelEducation       LevelEducation?       @relation(fields: [levelId], references: [id])
  modeJob              ModeJob?              @relation(fields: [modeId], references: [id])
  workingTimeJob       WorkingTimeJob?       @relation(fields: [workingTimeId], references: [id])
  sectors              Sectors[]             @relation("SectorsTojobOffers")
  tags                 jobTags[]             @relation("jobOffersTojobTags")
  savedBy              SavedJobs[]
  sendCandidature      SendCandidature[]

  @@map("job_offers")
}

model SavedJobs {
  id          String       @id @default(uuid())
  candidateId String       @map("candidate_id")
  jobOfferId  String       @map("job_offer_id")
  savedAt     DateTime     @default(now()) @map("saved_at")
  candidate   CandidatData @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobOffer    jobOffers    @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobOfferId])
  @@map("saved_jobs")
}

model SendCandidature {
  id          String       @id @default(uuid())
  candidateId String       @map("candidate_id")
  jobOfferId  String       @map("job_offer_id")
  savedAt     DateTime     @default(now()) @map("saved_at")
  candidate   CandidatData @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobOffer    jobOffers    @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobOfferId])
  @@map("send_candidature")
}

model ContractTypeJob {
  id         String       @id @default(uuid())
  name       String
  experience Experience[]
  jobOffers  jobOffers[]

  @@map("contract_type")
}

model ExperienceMinimalJob {
  id        String      @id @default(uuid())
  name      String
  jobOffers jobOffers[]

  @@map("experience_minimal")
}

model ModeJob {
  id        String      @id @default(uuid())
  name      String
  jobOffers jobOffers[]

  @@map("mode_job")
}

model WorkingTimeJob {
  id        String      @id @default(uuid())
  name      String
  jobOffers jobOffers[]

  @@map("working_time_job")
}

model LevelEducation {
  id        String      @id @default(uuid())
  name      String
  education Education[]
  jobOffers jobOffers[]

  @@map("level_education")
}

model jobTags {
  id        String      @id @default(uuid())
  name      String
  slug      String
  jobOffers jobOffers[] @relation("jobOffersTojobTags")

  @@map("job_tags")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  slug        String      @unique
  description String
  level       Int?
  parentId    String?
  sectors     Sectors[]
  parent      Category?   @relation("SubCategory", fields: [parentId], references: [id])
  children    Category[]  @relation("SubCategory")
  jobOffers   jobOffers[]

  @@map("categories")
}

model Sectors {
  id         String      @id @default(uuid())
  name       String      @unique
  slug       String      @unique
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  jobOffer   jobOffers[] @relation("SectorsTojobOffers")
}

model AuthAccount {
  id           String   @id @default(uuid())
  type         String
  provide      String
  refreshToken String?  @map("refresh_token")
  accessToken  String?  @map("access_token")
  expiresAt    Int      @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String?  @map("user_id")
  user         User?    @relation(fields: [userId], references: [id])

  @@map("auth_account")
}

model Tokens {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("tokens")
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum MaritalStatus {
  NONE
  NOT_MARRIED
  MARRIEDNOCHILDREN
  MARRIEDHAVECHILDREN
  DIVORCET
}

enum DriverCategory {
  AM
  A1
  A2
  A
  B1
  B1CODE96
  BE
  C1
  C1E
  C
  CE
  CQC
  D1
  D1E
  DE
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  FACEBOOK
  TWITTER
  TELEGRAMM
  INSTAGRAM
  DISCORD
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  CANDIDATE
  AGENCY
}

enum SkillsLevel {
  NONE
  BEGINNER
  EXPERIENCED
  EXPERT
}

enum ContractType {
  PARTTIME
  SELFEMPLOYED
  FREELANCE
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
}

enum LanguageLevel {
  NATIVESPEAKER
  FLUENT
  VERYGOOD
  BASIC
}
