
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CandidatData
 * 
 */
export type CandidatData = $Result.DefaultSelection<Prisma.$CandidatDataPayload>
/**
 * Model CandidatLifeState
 * 
 */
export type CandidatLifeState = $Result.DefaultSelection<Prisma.$CandidatLifeStatePayload>
/**
 * Model UserSocial
 * 
 */
export type UserSocial = $Result.DefaultSelection<Prisma.$UserSocialPayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Skills
 * 
 */
export type Skills = $Result.DefaultSelection<Prisma.$SkillsPayload>
/**
 * Model Experience
 * 
 */
export type Experience = $Result.DefaultSelection<Prisma.$ExperiencePayload>
/**
 * Model Languages
 * 
 */
export type Languages = $Result.DefaultSelection<Prisma.$LanguagesPayload>
/**
 * Model Courses
 * 
 */
export type Courses = $Result.DefaultSelection<Prisma.$CoursesPayload>
/**
 * Model Hobbies
 * 
 */
export type Hobbies = $Result.DefaultSelection<Prisma.$HobbiesPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model AgencyData
 * 
 */
export type AgencyData = $Result.DefaultSelection<Prisma.$AgencyDataPayload>
/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model jobOffers
 * 
 */
export type jobOffers = $Result.DefaultSelection<Prisma.$jobOffersPayload>
/**
 * Model SavedJobs
 * 
 */
export type SavedJobs = $Result.DefaultSelection<Prisma.$SavedJobsPayload>
/**
 * Model SendCandidature
 * 
 */
export type SendCandidature = $Result.DefaultSelection<Prisma.$SendCandidaturePayload>
/**
 * Model ContractTypeJob
 * 
 */
export type ContractTypeJob = $Result.DefaultSelection<Prisma.$ContractTypeJobPayload>
/**
 * Model ExperienceMinimalJob
 * 
 */
export type ExperienceMinimalJob = $Result.DefaultSelection<Prisma.$ExperienceMinimalJobPayload>
/**
 * Model ModeJob
 * 
 */
export type ModeJob = $Result.DefaultSelection<Prisma.$ModeJobPayload>
/**
 * Model WorkingTimeJob
 * 
 */
export type WorkingTimeJob = $Result.DefaultSelection<Prisma.$WorkingTimeJobPayload>
/**
 * Model LevelEducation
 * 
 */
export type LevelEducation = $Result.DefaultSelection<Prisma.$LevelEducationPayload>
/**
 * Model jobTags
 * 
 */
export type jobTags = $Result.DefaultSelection<Prisma.$jobTagsPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Sectors
 * 
 */
export type Sectors = $Result.DefaultSelection<Prisma.$SectorsPayload>
/**
 * Model AuthAccount
 * 
 */
export type AuthAccount = $Result.DefaultSelection<Prisma.$AuthAccountPayload>
/**
 * Model Tokens
 * 
 */
export type Tokens = $Result.DefaultSelection<Prisma.$TokensPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TokenType: {
  VERIFICATION: 'VERIFICATION',
  TWO_FACTOR: 'TWO_FACTOR',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]


export const MaritalStatus: {
  NONE: 'NONE',
  NOT_MARRIED: 'NOT_MARRIED',
  MARRIEDNOCHILDREN: 'MARRIEDNOCHILDREN',
  MARRIEDHAVECHILDREN: 'MARRIEDHAVECHILDREN',
  DIVORCET: 'DIVORCET'
};

export type MaritalStatus = (typeof MaritalStatus)[keyof typeof MaritalStatus]


export const DriverCategory: {
  AM: 'AM',
  A1: 'A1',
  A2: 'A2',
  A: 'A',
  B1: 'B1',
  B1CODE96: 'B1CODE96',
  BE: 'BE',
  C1: 'C1',
  C1E: 'C1E',
  C: 'C',
  CE: 'CE',
  CQC: 'CQC',
  D1: 'D1',
  D1E: 'D1E',
  DE: 'DE'
};

export type DriverCategory = (typeof DriverCategory)[keyof typeof DriverCategory]


export const AuthMethod: {
  CREDENTIALS: 'CREDENTIALS',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER',
  TELEGRAMM: 'TELEGRAMM',
  INSTAGRAM: 'INSTAGRAM',
  DISCORD: 'DISCORD'
};

export type AuthMethod = (typeof AuthMethod)[keyof typeof AuthMethod]


export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  CANDIDATE: 'CANDIDATE',
  AGENCY: 'AGENCY'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const SkillsLevel: {
  NONE: 'NONE',
  BEGINNER: 'BEGINNER',
  EXPERIENCED: 'EXPERIENCED',
  EXPERT: 'EXPERT'
};

export type SkillsLevel = (typeof SkillsLevel)[keyof typeof SkillsLevel]


export const ContractType: {
  PARTTIME: 'PARTTIME',
  SELFEMPLOYED: 'SELFEMPLOYED',
  FREELANCE: 'FREELANCE',
  CONTRACT: 'CONTRACT',
  INTERNSHIP: 'INTERNSHIP',
  APPRENTICESHIP: 'APPRENTICESHIP'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const LanguageLevel: {
  NATIVESPEAKER: 'NATIVESPEAKER',
  FLUENT: 'FLUENT',
  VERYGOOD: 'VERYGOOD',
  BASIC: 'BASIC'
};

export type LanguageLevel = (typeof LanguageLevel)[keyof typeof LanguageLevel]

}

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

export type MaritalStatus = $Enums.MaritalStatus

export const MaritalStatus: typeof $Enums.MaritalStatus

export type DriverCategory = $Enums.DriverCategory

export const DriverCategory: typeof $Enums.DriverCategory

export type AuthMethod = $Enums.AuthMethod

export const AuthMethod: typeof $Enums.AuthMethod

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type SkillsLevel = $Enums.SkillsLevel

export const SkillsLevel: typeof $Enums.SkillsLevel

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type LanguageLevel = $Enums.LanguageLevel

export const LanguageLevel: typeof $Enums.LanguageLevel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.candidatData`: Exposes CRUD operations for the **CandidatData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidatData
    * const candidatData = await prisma.candidatData.findMany()
    * ```
    */
  get candidatData(): Prisma.CandidatDataDelegate<ExtArgs>;

  /**
   * `prisma.candidatLifeState`: Exposes CRUD operations for the **CandidatLifeState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidatLifeStates
    * const candidatLifeStates = await prisma.candidatLifeState.findMany()
    * ```
    */
  get candidatLifeState(): Prisma.CandidatLifeStateDelegate<ExtArgs>;

  /**
   * `prisma.userSocial`: Exposes CRUD operations for the **UserSocial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSocials
    * const userSocials = await prisma.userSocial.findMany()
    * ```
    */
  get userSocial(): Prisma.UserSocialDelegate<ExtArgs>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs>;

  /**
   * `prisma.skills`: Exposes CRUD operations for the **Skills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skills.findMany()
    * ```
    */
  get skills(): Prisma.SkillsDelegate<ExtArgs>;

  /**
   * `prisma.experience`: Exposes CRUD operations for the **Experience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiences
    * const experiences = await prisma.experience.findMany()
    * ```
    */
  get experience(): Prisma.ExperienceDelegate<ExtArgs>;

  /**
   * `prisma.languages`: Exposes CRUD operations for the **Languages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.languages.findMany()
    * ```
    */
  get languages(): Prisma.LanguagesDelegate<ExtArgs>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **Courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.CoursesDelegate<ExtArgs>;

  /**
   * `prisma.hobbies`: Exposes CRUD operations for the **Hobbies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hobbies
    * const hobbies = await prisma.hobbies.findMany()
    * ```
    */
  get hobbies(): Prisma.HobbiesDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.agencyData`: Exposes CRUD operations for the **AgencyData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgencyData
    * const agencyData = await prisma.agencyData.findMany()
    * ```
    */
  get agencyData(): Prisma.AgencyDataDelegate<ExtArgs>;

  /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs>;

  /**
   * `prisma.jobOffers`: Exposes CRUD operations for the **jobOffers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobOffers
    * const jobOffers = await prisma.jobOffers.findMany()
    * ```
    */
  get jobOffers(): Prisma.jobOffersDelegate<ExtArgs>;

  /**
   * `prisma.savedJobs`: Exposes CRUD operations for the **SavedJobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedJobs
    * const savedJobs = await prisma.savedJobs.findMany()
    * ```
    */
  get savedJobs(): Prisma.SavedJobsDelegate<ExtArgs>;

  /**
   * `prisma.sendCandidature`: Exposes CRUD operations for the **SendCandidature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SendCandidatures
    * const sendCandidatures = await prisma.sendCandidature.findMany()
    * ```
    */
  get sendCandidature(): Prisma.SendCandidatureDelegate<ExtArgs>;

  /**
   * `prisma.contractTypeJob`: Exposes CRUD operations for the **ContractTypeJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractTypeJobs
    * const contractTypeJobs = await prisma.contractTypeJob.findMany()
    * ```
    */
  get contractTypeJob(): Prisma.ContractTypeJobDelegate<ExtArgs>;

  /**
   * `prisma.experienceMinimalJob`: Exposes CRUD operations for the **ExperienceMinimalJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExperienceMinimalJobs
    * const experienceMinimalJobs = await prisma.experienceMinimalJob.findMany()
    * ```
    */
  get experienceMinimalJob(): Prisma.ExperienceMinimalJobDelegate<ExtArgs>;

  /**
   * `prisma.modeJob`: Exposes CRUD operations for the **ModeJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ModeJobs
    * const modeJobs = await prisma.modeJob.findMany()
    * ```
    */
  get modeJob(): Prisma.ModeJobDelegate<ExtArgs>;

  /**
   * `prisma.workingTimeJob`: Exposes CRUD operations for the **WorkingTimeJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkingTimeJobs
    * const workingTimeJobs = await prisma.workingTimeJob.findMany()
    * ```
    */
  get workingTimeJob(): Prisma.WorkingTimeJobDelegate<ExtArgs>;

  /**
   * `prisma.levelEducation`: Exposes CRUD operations for the **LevelEducation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LevelEducations
    * const levelEducations = await prisma.levelEducation.findMany()
    * ```
    */
  get levelEducation(): Prisma.LevelEducationDelegate<ExtArgs>;

  /**
   * `prisma.jobTags`: Exposes CRUD operations for the **jobTags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobTags
    * const jobTags = await prisma.jobTags.findMany()
    * ```
    */
  get jobTags(): Prisma.jobTagsDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.sectors`: Exposes CRUD operations for the **Sectors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sectors
    * const sectors = await prisma.sectors.findMany()
    * ```
    */
  get sectors(): Prisma.SectorsDelegate<ExtArgs>;

  /**
   * `prisma.authAccount`: Exposes CRUD operations for the **AuthAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthAccounts
    * const authAccounts = await prisma.authAccount.findMany()
    * ```
    */
  get authAccount(): Prisma.AuthAccountDelegate<ExtArgs>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **Tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.TokensDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CandidatData: 'CandidatData',
    CandidatLifeState: 'CandidatLifeState',
    UserSocial: 'UserSocial',
    Education: 'Education',
    Skills: 'Skills',
    Experience: 'Experience',
    Languages: 'Languages',
    Courses: 'Courses',
    Hobbies: 'Hobbies',
    Rating: 'Rating',
    AgencyData: 'AgencyData',
    Branch: 'Branch',
    jobOffers: 'jobOffers',
    SavedJobs: 'SavedJobs',
    SendCandidature: 'SendCandidature',
    ContractTypeJob: 'ContractTypeJob',
    ExperienceMinimalJob: 'ExperienceMinimalJob',
    ModeJob: 'ModeJob',
    WorkingTimeJob: 'WorkingTimeJob',
    LevelEducation: 'LevelEducation',
    jobTags: 'jobTags',
    Category: 'Category',
    Sectors: 'Sectors',
    AuthAccount: 'AuthAccount',
    Tokens: 'Tokens'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "candidatData" | "candidatLifeState" | "userSocial" | "education" | "skills" | "experience" | "languages" | "courses" | "hobbies" | "rating" | "agencyData" | "branch" | "jobOffers" | "savedJobs" | "sendCandidature" | "contractTypeJob" | "experienceMinimalJob" | "modeJob" | "workingTimeJob" | "levelEducation" | "jobTags" | "category" | "sectors" | "authAccount" | "tokens"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CandidatData: {
        payload: Prisma.$CandidatDataPayload<ExtArgs>
        fields: Prisma.CandidatDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          findFirst: {
            args: Prisma.CandidatDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          findMany: {
            args: Prisma.CandidatDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>[]
          }
          create: {
            args: Prisma.CandidatDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          createMany: {
            args: Prisma.CandidatDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidatDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>[]
          }
          delete: {
            args: Prisma.CandidatDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          update: {
            args: Prisma.CandidatDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          deleteMany: {
            args: Prisma.CandidatDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CandidatDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatDataPayload>
          }
          aggregate: {
            args: Prisma.CandidatDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidatData>
          }
          groupBy: {
            args: Prisma.CandidatDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidatDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatDataCountArgs<ExtArgs>
            result: $Utils.Optional<CandidatDataCountAggregateOutputType> | number
          }
        }
      }
      CandidatLifeState: {
        payload: Prisma.$CandidatLifeStatePayload<ExtArgs>
        fields: Prisma.CandidatLifeStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatLifeStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatLifeStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          findFirst: {
            args: Prisma.CandidatLifeStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatLifeStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          findMany: {
            args: Prisma.CandidatLifeStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>[]
          }
          create: {
            args: Prisma.CandidatLifeStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          createMany: {
            args: Prisma.CandidatLifeStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidatLifeStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>[]
          }
          delete: {
            args: Prisma.CandidatLifeStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          update: {
            args: Prisma.CandidatLifeStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          deleteMany: {
            args: Prisma.CandidatLifeStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatLifeStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CandidatLifeStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatLifeStatePayload>
          }
          aggregate: {
            args: Prisma.CandidatLifeStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidatLifeState>
          }
          groupBy: {
            args: Prisma.CandidatLifeStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidatLifeStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatLifeStateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidatLifeStateCountAggregateOutputType> | number
          }
        }
      }
      UserSocial: {
        payload: Prisma.$UserSocialPayload<ExtArgs>
        fields: Prisma.UserSocialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSocialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSocialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          findFirst: {
            args: Prisma.UserSocialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSocialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          findMany: {
            args: Prisma.UserSocialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>[]
          }
          create: {
            args: Prisma.UserSocialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          createMany: {
            args: Prisma.UserSocialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSocialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>[]
          }
          delete: {
            args: Prisma.UserSocialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          update: {
            args: Prisma.UserSocialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          deleteMany: {
            args: Prisma.UserSocialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSocialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSocialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialPayload>
          }
          aggregate: {
            args: Prisma.UserSocialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSocial>
          }
          groupBy: {
            args: Prisma.UserSocialGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSocialGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSocialCountArgs<ExtArgs>
            result: $Utils.Optional<UserSocialCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EducationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Skills: {
        payload: Prisma.$SkillsPayload<ExtArgs>
        fields: Prisma.SkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          findFirst: {
            args: Prisma.SkillsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          findMany: {
            args: Prisma.SkillsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>[]
          }
          create: {
            args: Prisma.SkillsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          createMany: {
            args: Prisma.SkillsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>[]
          }
          delete: {
            args: Prisma.SkillsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          update: {
            args: Prisma.SkillsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          deleteMany: {
            args: Prisma.SkillsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillsPayload>
          }
          aggregate: {
            args: Prisma.SkillsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkills>
          }
          groupBy: {
            args: Prisma.SkillsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillsCountArgs<ExtArgs>
            result: $Utils.Optional<SkillsCountAggregateOutputType> | number
          }
        }
      }
      Experience: {
        payload: Prisma.$ExperiencePayload<ExtArgs>
        fields: Prisma.ExperienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperienceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperienceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findFirst: {
            args: Prisma.ExperienceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperienceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findMany: {
            args: Prisma.ExperienceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          create: {
            args: Prisma.ExperienceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          createMany: {
            args: Prisma.ExperienceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperienceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          delete: {
            args: Prisma.ExperienceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          update: {
            args: Prisma.ExperienceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          deleteMany: {
            args: Prisma.ExperienceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperienceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExperienceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          aggregate: {
            args: Prisma.ExperienceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperience>
          }
          groupBy: {
            args: Prisma.ExperienceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperienceCountArgs<ExtArgs>
            result: $Utils.Optional<ExperienceCountAggregateOutputType> | number
          }
        }
      }
      Languages: {
        payload: Prisma.$LanguagesPayload<ExtArgs>
        fields: Prisma.LanguagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findFirst: {
            args: Prisma.LanguagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findMany: {
            args: Prisma.LanguagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>[]
          }
          create: {
            args: Prisma.LanguagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          createMany: {
            args: Prisma.LanguagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguagesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>[]
          }
          delete: {
            args: Prisma.LanguagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          update: {
            args: Prisma.LanguagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          deleteMany: {
            args: Prisma.LanguagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LanguagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          aggregate: {
            args: Prisma.LanguagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguages>
          }
          groupBy: {
            args: Prisma.LanguagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguagesCountArgs<ExtArgs>
            result: $Utils.Optional<LanguagesCountAggregateOutputType> | number
          }
        }
      }
      Courses: {
        payload: Prisma.$CoursesPayload<ExtArgs>
        fields: Prisma.CoursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findFirst: {
            args: Prisma.CoursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findMany: {
            args: Prisma.CoursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          create: {
            args: Prisma.CoursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          createMany: {
            args: Prisma.CoursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          delete: {
            args: Prisma.CoursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          update: {
            args: Prisma.CoursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          deleteMany: {
            args: Prisma.CoursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CoursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.CoursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      Hobbies: {
        payload: Prisma.$HobbiesPayload<ExtArgs>
        fields: Prisma.HobbiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HobbiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HobbiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          findFirst: {
            args: Prisma.HobbiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HobbiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          findMany: {
            args: Prisma.HobbiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>[]
          }
          create: {
            args: Prisma.HobbiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          createMany: {
            args: Prisma.HobbiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HobbiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>[]
          }
          delete: {
            args: Prisma.HobbiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          update: {
            args: Prisma.HobbiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          deleteMany: {
            args: Prisma.HobbiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HobbiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HobbiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HobbiesPayload>
          }
          aggregate: {
            args: Prisma.HobbiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHobbies>
          }
          groupBy: {
            args: Prisma.HobbiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<HobbiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.HobbiesCountArgs<ExtArgs>
            result: $Utils.Optional<HobbiesCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      AgencyData: {
        payload: Prisma.$AgencyDataPayload<ExtArgs>
        fields: Prisma.AgencyDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgencyDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencyDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          findFirst: {
            args: Prisma.AgencyDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencyDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          findMany: {
            args: Prisma.AgencyDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>[]
          }
          create: {
            args: Prisma.AgencyDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          createMany: {
            args: Prisma.AgencyDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgencyDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>[]
          }
          delete: {
            args: Prisma.AgencyDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          update: {
            args: Prisma.AgencyDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          deleteMany: {
            args: Prisma.AgencyDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgencyDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgencyDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyDataPayload>
          }
          aggregate: {
            args: Prisma.AgencyDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgencyData>
          }
          groupBy: {
            args: Prisma.AgencyDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgencyDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencyDataCountArgs<ExtArgs>
            result: $Utils.Optional<AgencyDataCountAggregateOutputType> | number
          }
        }
      }
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BranchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      jobOffers: {
        payload: Prisma.$jobOffersPayload<ExtArgs>
        fields: Prisma.jobOffersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jobOffersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jobOffersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          findFirst: {
            args: Prisma.jobOffersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jobOffersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          findMany: {
            args: Prisma.jobOffersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>[]
          }
          create: {
            args: Prisma.jobOffersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          createMany: {
            args: Prisma.jobOffersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jobOffersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>[]
          }
          delete: {
            args: Prisma.jobOffersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          update: {
            args: Prisma.jobOffersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          deleteMany: {
            args: Prisma.jobOffersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jobOffersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.jobOffersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobOffersPayload>
          }
          aggregate: {
            args: Prisma.JobOffersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobOffers>
          }
          groupBy: {
            args: Prisma.jobOffersGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobOffersGroupByOutputType>[]
          }
          count: {
            args: Prisma.jobOffersCountArgs<ExtArgs>
            result: $Utils.Optional<JobOffersCountAggregateOutputType> | number
          }
        }
      }
      SavedJobs: {
        payload: Prisma.$SavedJobsPayload<ExtArgs>
        fields: Prisma.SavedJobsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedJobsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedJobsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          findFirst: {
            args: Prisma.SavedJobsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedJobsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          findMany: {
            args: Prisma.SavedJobsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>[]
          }
          create: {
            args: Prisma.SavedJobsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          createMany: {
            args: Prisma.SavedJobsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedJobsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>[]
          }
          delete: {
            args: Prisma.SavedJobsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          update: {
            args: Prisma.SavedJobsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          deleteMany: {
            args: Prisma.SavedJobsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedJobsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SavedJobsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobsPayload>
          }
          aggregate: {
            args: Prisma.SavedJobsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedJobs>
          }
          groupBy: {
            args: Prisma.SavedJobsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedJobsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedJobsCountArgs<ExtArgs>
            result: $Utils.Optional<SavedJobsCountAggregateOutputType> | number
          }
        }
      }
      SendCandidature: {
        payload: Prisma.$SendCandidaturePayload<ExtArgs>
        fields: Prisma.SendCandidatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SendCandidatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SendCandidatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          findFirst: {
            args: Prisma.SendCandidatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SendCandidatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          findMany: {
            args: Prisma.SendCandidatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>[]
          }
          create: {
            args: Prisma.SendCandidatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          createMany: {
            args: Prisma.SendCandidatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SendCandidatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>[]
          }
          delete: {
            args: Prisma.SendCandidatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          update: {
            args: Prisma.SendCandidatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          deleteMany: {
            args: Prisma.SendCandidatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SendCandidatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SendCandidatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SendCandidaturePayload>
          }
          aggregate: {
            args: Prisma.SendCandidatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSendCandidature>
          }
          groupBy: {
            args: Prisma.SendCandidatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<SendCandidatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.SendCandidatureCountArgs<ExtArgs>
            result: $Utils.Optional<SendCandidatureCountAggregateOutputType> | number
          }
        }
      }
      ContractTypeJob: {
        payload: Prisma.$ContractTypeJobPayload<ExtArgs>
        fields: Prisma.ContractTypeJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractTypeJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractTypeJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          findFirst: {
            args: Prisma.ContractTypeJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractTypeJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          findMany: {
            args: Prisma.ContractTypeJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>[]
          }
          create: {
            args: Prisma.ContractTypeJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          createMany: {
            args: Prisma.ContractTypeJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractTypeJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>[]
          }
          delete: {
            args: Prisma.ContractTypeJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          update: {
            args: Prisma.ContractTypeJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          deleteMany: {
            args: Prisma.ContractTypeJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractTypeJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractTypeJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypeJobPayload>
          }
          aggregate: {
            args: Prisma.ContractTypeJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractTypeJob>
          }
          groupBy: {
            args: Prisma.ContractTypeJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractTypeJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractTypeJobCountArgs<ExtArgs>
            result: $Utils.Optional<ContractTypeJobCountAggregateOutputType> | number
          }
        }
      }
      ExperienceMinimalJob: {
        payload: Prisma.$ExperienceMinimalJobPayload<ExtArgs>
        fields: Prisma.ExperienceMinimalJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperienceMinimalJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperienceMinimalJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          findFirst: {
            args: Prisma.ExperienceMinimalJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperienceMinimalJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          findMany: {
            args: Prisma.ExperienceMinimalJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>[]
          }
          create: {
            args: Prisma.ExperienceMinimalJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          createMany: {
            args: Prisma.ExperienceMinimalJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperienceMinimalJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>[]
          }
          delete: {
            args: Prisma.ExperienceMinimalJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          update: {
            args: Prisma.ExperienceMinimalJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          deleteMany: {
            args: Prisma.ExperienceMinimalJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperienceMinimalJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExperienceMinimalJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperienceMinimalJobPayload>
          }
          aggregate: {
            args: Prisma.ExperienceMinimalJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperienceMinimalJob>
          }
          groupBy: {
            args: Prisma.ExperienceMinimalJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperienceMinimalJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperienceMinimalJobCountArgs<ExtArgs>
            result: $Utils.Optional<ExperienceMinimalJobCountAggregateOutputType> | number
          }
        }
      }
      ModeJob: {
        payload: Prisma.$ModeJobPayload<ExtArgs>
        fields: Prisma.ModeJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModeJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          findFirst: {
            args: Prisma.ModeJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          findMany: {
            args: Prisma.ModeJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>[]
          }
          create: {
            args: Prisma.ModeJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          createMany: {
            args: Prisma.ModeJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModeJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>[]
          }
          delete: {
            args: Prisma.ModeJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          update: {
            args: Prisma.ModeJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          deleteMany: {
            args: Prisma.ModeJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModeJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModeJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeJobPayload>
          }
          aggregate: {
            args: Prisma.ModeJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModeJob>
          }
          groupBy: {
            args: Prisma.ModeJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModeJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeJobCountArgs<ExtArgs>
            result: $Utils.Optional<ModeJobCountAggregateOutputType> | number
          }
        }
      }
      WorkingTimeJob: {
        payload: Prisma.$WorkingTimeJobPayload<ExtArgs>
        fields: Prisma.WorkingTimeJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkingTimeJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkingTimeJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          findFirst: {
            args: Prisma.WorkingTimeJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkingTimeJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          findMany: {
            args: Prisma.WorkingTimeJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>[]
          }
          create: {
            args: Prisma.WorkingTimeJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          createMany: {
            args: Prisma.WorkingTimeJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkingTimeJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>[]
          }
          delete: {
            args: Prisma.WorkingTimeJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          update: {
            args: Prisma.WorkingTimeJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          deleteMany: {
            args: Prisma.WorkingTimeJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkingTimeJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkingTimeJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkingTimeJobPayload>
          }
          aggregate: {
            args: Prisma.WorkingTimeJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkingTimeJob>
          }
          groupBy: {
            args: Prisma.WorkingTimeJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkingTimeJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkingTimeJobCountArgs<ExtArgs>
            result: $Utils.Optional<WorkingTimeJobCountAggregateOutputType> | number
          }
        }
      }
      LevelEducation: {
        payload: Prisma.$LevelEducationPayload<ExtArgs>
        fields: Prisma.LevelEducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelEducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelEducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          findFirst: {
            args: Prisma.LevelEducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelEducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          findMany: {
            args: Prisma.LevelEducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>[]
          }
          create: {
            args: Prisma.LevelEducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          createMany: {
            args: Prisma.LevelEducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelEducationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>[]
          }
          delete: {
            args: Prisma.LevelEducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          update: {
            args: Prisma.LevelEducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          deleteMany: {
            args: Prisma.LevelEducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelEducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LevelEducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelEducationPayload>
          }
          aggregate: {
            args: Prisma.LevelEducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevelEducation>
          }
          groupBy: {
            args: Prisma.LevelEducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelEducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelEducationCountArgs<ExtArgs>
            result: $Utils.Optional<LevelEducationCountAggregateOutputType> | number
          }
        }
      }
      jobTags: {
        payload: Prisma.$jobTagsPayload<ExtArgs>
        fields: Prisma.jobTagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jobTagsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jobTagsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          findFirst: {
            args: Prisma.jobTagsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jobTagsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          findMany: {
            args: Prisma.jobTagsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>[]
          }
          create: {
            args: Prisma.jobTagsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          createMany: {
            args: Prisma.jobTagsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jobTagsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>[]
          }
          delete: {
            args: Prisma.jobTagsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          update: {
            args: Prisma.jobTagsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          deleteMany: {
            args: Prisma.jobTagsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jobTagsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.jobTagsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobTagsPayload>
          }
          aggregate: {
            args: Prisma.JobTagsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobTags>
          }
          groupBy: {
            args: Prisma.jobTagsGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobTagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.jobTagsCountArgs<ExtArgs>
            result: $Utils.Optional<JobTagsCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Sectors: {
        payload: Prisma.$SectorsPayload<ExtArgs>
        fields: Prisma.SectorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectorsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectorsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          findFirst: {
            args: Prisma.SectorsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectorsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          findMany: {
            args: Prisma.SectorsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>[]
          }
          create: {
            args: Prisma.SectorsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          createMany: {
            args: Prisma.SectorsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectorsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>[]
          }
          delete: {
            args: Prisma.SectorsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          update: {
            args: Prisma.SectorsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          deleteMany: {
            args: Prisma.SectorsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectorsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectorsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectorsPayload>
          }
          aggregate: {
            args: Prisma.SectorsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSectors>
          }
          groupBy: {
            args: Prisma.SectorsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectorsCountArgs<ExtArgs>
            result: $Utils.Optional<SectorsCountAggregateOutputType> | number
          }
        }
      }
      AuthAccount: {
        payload: Prisma.$AuthAccountPayload<ExtArgs>
        fields: Prisma.AuthAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          findFirst: {
            args: Prisma.AuthAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          findMany: {
            args: Prisma.AuthAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>[]
          }
          create: {
            args: Prisma.AuthAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          createMany: {
            args: Prisma.AuthAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>[]
          }
          delete: {
            args: Prisma.AuthAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          update: {
            args: Prisma.AuthAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          deleteMany: {
            args: Prisma.AuthAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAccountPayload>
          }
          aggregate: {
            args: Prisma.AuthAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthAccount>
          }
          groupBy: {
            args: Prisma.AuthAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthAccountCountArgs<ExtArgs>
            result: $Utils.Optional<AuthAccountCountAggregateOutputType> | number
          }
        }
      }
      Tokens: {
        payload: Prisma.$TokensPayload<ExtArgs>
        fields: Prisma.TokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findFirst: {
            args: Prisma.TokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findMany: {
            args: Prisma.TokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>[]
          }
          create: {
            args: Prisma.TokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          createMany: {
            args: Prisma.TokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>[]
          }
          delete: {
            args: Prisma.TokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          update: {
            args: Prisma.TokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          deleteMany: {
            args: Prisma.TokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokens>
          }
          groupBy: {
            args: Prisma.TokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokensCountArgs<ExtArgs>
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    social: number
    authAccounts: number
    ratings: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    social?: boolean | UserCountOutputTypeCountSocialArgs
    authAccounts?: boolean | UserCountOutputTypeCountAuthAccountsArgs
    ratings?: boolean | UserCountOutputTypeCountRatingsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSocialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSocialWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * Count Type CandidatDataCountOutputType
   */

  export type CandidatDataCountOutputType = {
    courses: number
    education: number
    experience: number
    hobbies: number
    languages: number
    skills: number
    savedJobs: number
    sendCandidature: number
  }

  export type CandidatDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CandidatDataCountOutputTypeCountCoursesArgs
    education?: boolean | CandidatDataCountOutputTypeCountEducationArgs
    experience?: boolean | CandidatDataCountOutputTypeCountExperienceArgs
    hobbies?: boolean | CandidatDataCountOutputTypeCountHobbiesArgs
    languages?: boolean | CandidatDataCountOutputTypeCountLanguagesArgs
    skills?: boolean | CandidatDataCountOutputTypeCountSkillsArgs
    savedJobs?: boolean | CandidatDataCountOutputTypeCountSavedJobsArgs
    sendCandidature?: boolean | CandidatDataCountOutputTypeCountSendCandidatureArgs
  }

  // Custom InputTypes
  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatDataCountOutputType
     */
    select?: CandidatDataCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountExperienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountHobbiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HobbiesWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillsWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountSavedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobsWhereInput
  }

  /**
   * CandidatDataCountOutputType without action
   */
  export type CandidatDataCountOutputTypeCountSendCandidatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SendCandidatureWhereInput
  }


  /**
   * Count Type AgencyDataCountOutputType
   */

  export type AgencyDataCountOutputType = {
    branch: number
    jobOffers: number
  }

  export type AgencyDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | AgencyDataCountOutputTypeCountBranchArgs
    jobOffers?: boolean | AgencyDataCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * AgencyDataCountOutputType without action
   */
  export type AgencyDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyDataCountOutputType
     */
    select?: AgencyDataCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgencyDataCountOutputType without action
   */
  export type AgencyDataCountOutputTypeCountBranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
  }

  /**
   * AgencyDataCountOutputType without action
   */
  export type AgencyDataCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    jobOffers: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | BranchCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type JobOffersCountOutputType
   */

  export type JobOffersCountOutputType = {
    sectors: number
    tags: number
    savedBy: number
    sendCandidature: number
  }

  export type JobOffersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectors?: boolean | JobOffersCountOutputTypeCountSectorsArgs
    tags?: boolean | JobOffersCountOutputTypeCountTagsArgs
    savedBy?: boolean | JobOffersCountOutputTypeCountSavedByArgs
    sendCandidature?: boolean | JobOffersCountOutputTypeCountSendCandidatureArgs
  }

  // Custom InputTypes
  /**
   * JobOffersCountOutputType without action
   */
  export type JobOffersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobOffersCountOutputType
     */
    select?: JobOffersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobOffersCountOutputType without action
   */
  export type JobOffersCountOutputTypeCountSectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectorsWhereInput
  }

  /**
   * JobOffersCountOutputType without action
   */
  export type JobOffersCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobTagsWhereInput
  }

  /**
   * JobOffersCountOutputType without action
   */
  export type JobOffersCountOutputTypeCountSavedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobsWhereInput
  }

  /**
   * JobOffersCountOutputType without action
   */
  export type JobOffersCountOutputTypeCountSendCandidatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SendCandidatureWhereInput
  }


  /**
   * Count Type ContractTypeJobCountOutputType
   */

  export type ContractTypeJobCountOutputType = {
    experience: number
    jobOffers: number
  }

  export type ContractTypeJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experience?: boolean | ContractTypeJobCountOutputTypeCountExperienceArgs
    jobOffers?: boolean | ContractTypeJobCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * ContractTypeJobCountOutputType without action
   */
  export type ContractTypeJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJobCountOutputType
     */
    select?: ContractTypeJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractTypeJobCountOutputType without action
   */
  export type ContractTypeJobCountOutputTypeCountExperienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }

  /**
   * ContractTypeJobCountOutputType without action
   */
  export type ContractTypeJobCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type ExperienceMinimalJobCountOutputType
   */

  export type ExperienceMinimalJobCountOutputType = {
    jobOffers: number
  }

  export type ExperienceMinimalJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | ExperienceMinimalJobCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * ExperienceMinimalJobCountOutputType without action
   */
  export type ExperienceMinimalJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJobCountOutputType
     */
    select?: ExperienceMinimalJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExperienceMinimalJobCountOutputType without action
   */
  export type ExperienceMinimalJobCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type ModeJobCountOutputType
   */

  export type ModeJobCountOutputType = {
    jobOffers: number
  }

  export type ModeJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | ModeJobCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * ModeJobCountOutputType without action
   */
  export type ModeJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJobCountOutputType
     */
    select?: ModeJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModeJobCountOutputType without action
   */
  export type ModeJobCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type WorkingTimeJobCountOutputType
   */

  export type WorkingTimeJobCountOutputType = {
    jobOffers: number
  }

  export type WorkingTimeJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | WorkingTimeJobCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * WorkingTimeJobCountOutputType without action
   */
  export type WorkingTimeJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJobCountOutputType
     */
    select?: WorkingTimeJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkingTimeJobCountOutputType without action
   */
  export type WorkingTimeJobCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type LevelEducationCountOutputType
   */

  export type LevelEducationCountOutputType = {
    education: number
    jobOffers: number
  }

  export type LevelEducationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    education?: boolean | LevelEducationCountOutputTypeCountEducationArgs
    jobOffers?: boolean | LevelEducationCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * LevelEducationCountOutputType without action
   */
  export type LevelEducationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducationCountOutputType
     */
    select?: LevelEducationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelEducationCountOutputType without action
   */
  export type LevelEducationCountOutputTypeCountEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }

  /**
   * LevelEducationCountOutputType without action
   */
  export type LevelEducationCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type JobTagsCountOutputType
   */

  export type JobTagsCountOutputType = {
    jobOffers: number
  }

  export type JobTagsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | JobTagsCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * JobTagsCountOutputType without action
   */
  export type JobTagsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobTagsCountOutputType
     */
    select?: JobTagsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobTagsCountOutputType without action
   */
  export type JobTagsCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    sectors: number
    children: number
    jobOffers: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectors?: boolean | CategoryCountOutputTypeCountSectorsArgs
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    jobOffers?: boolean | CategoryCountOutputTypeCountJobOffersArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectorsWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountJobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Count Type SectorsCountOutputType
   */

  export type SectorsCountOutputType = {
    jobOffer: number
  }

  export type SectorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffer?: boolean | SectorsCountOutputTypeCountJobOfferArgs
  }

  // Custom InputTypes
  /**
   * SectorsCountOutputType without action
   */
  export type SectorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectorsCountOutputType
     */
    select?: SectorsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectorsCountOutputType without action
   */
  export type SectorsCountOutputTypeCountJobOfferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    method: $Enums.AuthMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    method: $Enums.AuthMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    isVerified: number
    isTwoFactorEnabled: number
    method: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    method?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    method?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    method?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.UserRole
    isVerified: boolean
    isTwoFactorEnabled: boolean
    method: $Enums.AuthMethod
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agencydata?: boolean | User$agencydataArgs<ExtArgs>
    social?: boolean | User$socialArgs<ExtArgs>
    authAccounts?: boolean | User$authAccountsArgs<ExtArgs>
    candidatdata?: boolean | User$candidatdataArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agencydata?: boolean | User$agencydataArgs<ExtArgs>
    social?: boolean | User$socialArgs<ExtArgs>
    authAccounts?: boolean | User$authAccountsArgs<ExtArgs>
    candidatdata?: boolean | User$candidatdataArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      agencydata: Prisma.$AgencyDataPayload<ExtArgs> | null
      social: Prisma.$UserSocialPayload<ExtArgs>[]
      authAccounts: Prisma.$AuthAccountPayload<ExtArgs>[]
      candidatdata: Prisma.$CandidatDataPayload<ExtArgs> | null
      ratings: Prisma.$RatingPayload<ExtArgs>[]
      reviews: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.UserRole
      isVerified: boolean
      isTwoFactorEnabled: boolean
      method: $Enums.AuthMethod
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agencydata<T extends User$agencydataArgs<ExtArgs> = {}>(args?: Subset<T, User$agencydataArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    social<T extends User$socialArgs<ExtArgs> = {}>(args?: Subset<T, User$socialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findMany"> | Null>
    authAccounts<T extends User$authAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$authAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findMany"> | Null>
    candidatdata<T extends User$candidatdataArgs<ExtArgs> = {}>(args?: Subset<T, User$candidatdataArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ratings<T extends User$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly isTwoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly method: FieldRef<"User", 'AuthMethod'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.agencydata
   */
  export type User$agencydataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    where?: AgencyDataWhereInput
  }

  /**
   * User.social
   */
  export type User$socialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    where?: UserSocialWhereInput
    orderBy?: UserSocialOrderByWithRelationInput | UserSocialOrderByWithRelationInput[]
    cursor?: UserSocialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSocialScalarFieldEnum | UserSocialScalarFieldEnum[]
  }

  /**
   * User.authAccounts
   */
  export type User$authAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    where?: AuthAccountWhereInput
    orderBy?: AuthAccountOrderByWithRelationInput | AuthAccountOrderByWithRelationInput[]
    cursor?: AuthAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthAccountScalarFieldEnum | AuthAccountScalarFieldEnum[]
  }

  /**
   * User.candidatdata
   */
  export type User$candidatdataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    where?: CandidatDataWhereInput
  }

  /**
   * User.ratings
   */
  export type User$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CandidatData
   */

  export type AggregateCandidatData = {
    _count: CandidatDataCountAggregateOutputType | null
    _min: CandidatDataMinAggregateOutputType | null
    _max: CandidatDataMaxAggregateOutputType | null
  }

  export type CandidatDataMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    surname: string | null
    birthday: string | null
    phone: string | null
    resident: string | null
    about_my: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CandidatDataMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    surname: string | null
    birthday: string | null
    phone: string | null
    resident: string | null
    about_my: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CandidatDataCountAggregateOutputType = {
    id: number
    firstname: number
    surname: number
    birthday: number
    phone: number
    resident: number
    about_my: number
    createdAt: number
    updatedAt: number
    userId: number
    avatar: number
    _all: number
  }


  export type CandidatDataMinAggregateInputType = {
    id?: true
    firstname?: true
    surname?: true
    birthday?: true
    phone?: true
    resident?: true
    about_my?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CandidatDataMaxAggregateInputType = {
    id?: true
    firstname?: true
    surname?: true
    birthday?: true
    phone?: true
    resident?: true
    about_my?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CandidatDataCountAggregateInputType = {
    id?: true
    firstname?: true
    surname?: true
    birthday?: true
    phone?: true
    resident?: true
    about_my?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    avatar?: true
    _all?: true
  }

  export type CandidatDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatData to aggregate.
     */
    where?: CandidatDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatData to fetch.
     */
    orderBy?: CandidatDataOrderByWithRelationInput | CandidatDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidatData
    **/
    _count?: true | CandidatDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatDataMaxAggregateInputType
  }

  export type GetCandidatDataAggregateType<T extends CandidatDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidatData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidatData[P]>
      : GetScalarType<T[P], AggregateCandidatData[P]>
  }




  export type CandidatDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatDataWhereInput
    orderBy?: CandidatDataOrderByWithAggregationInput | CandidatDataOrderByWithAggregationInput[]
    by: CandidatDataScalarFieldEnum[] | CandidatDataScalarFieldEnum
    having?: CandidatDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatDataCountAggregateInputType | true
    _min?: CandidatDataMinAggregateInputType
    _max?: CandidatDataMaxAggregateInputType
  }

  export type CandidatDataGroupByOutputType = {
    id: string
    firstname: string
    surname: string
    birthday: string
    phone: string | null
    resident: string | null
    about_my: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    avatar: string[]
    _count: CandidatDataCountAggregateOutputType | null
    _min: CandidatDataMinAggregateOutputType | null
    _max: CandidatDataMaxAggregateOutputType | null
  }

  type GetCandidatDataGroupByPayload<T extends CandidatDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatDataGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatDataGroupByOutputType[P]>
        }
      >
    >


  export type CandidatDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    surname?: boolean
    birthday?: boolean
    phone?: boolean
    resident?: boolean
    about_my?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    avatar?: boolean
    courses?: boolean | CandidatData$coursesArgs<ExtArgs>
    education?: boolean | CandidatData$educationArgs<ExtArgs>
    experience?: boolean | CandidatData$experienceArgs<ExtArgs>
    hobbies?: boolean | CandidatData$hobbiesArgs<ExtArgs>
    languages?: boolean | CandidatData$languagesArgs<ExtArgs>
    skills?: boolean | CandidatData$skillsArgs<ExtArgs>
    savedJobs?: boolean | CandidatData$savedJobsArgs<ExtArgs>
    sendCandidature?: boolean | CandidatData$sendCandidatureArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    candidatLifeState?: boolean | CandidatData$candidatLifeStateArgs<ExtArgs>
    _count?: boolean | CandidatDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatData"]>

  export type CandidatDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    surname?: boolean
    birthday?: boolean
    phone?: boolean
    resident?: boolean
    about_my?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    avatar?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatData"]>

  export type CandidatDataSelectScalar = {
    id?: boolean
    firstname?: boolean
    surname?: boolean
    birthday?: boolean
    phone?: boolean
    resident?: boolean
    about_my?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    avatar?: boolean
  }

  export type CandidatDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CandidatData$coursesArgs<ExtArgs>
    education?: boolean | CandidatData$educationArgs<ExtArgs>
    experience?: boolean | CandidatData$experienceArgs<ExtArgs>
    hobbies?: boolean | CandidatData$hobbiesArgs<ExtArgs>
    languages?: boolean | CandidatData$languagesArgs<ExtArgs>
    skills?: boolean | CandidatData$skillsArgs<ExtArgs>
    savedJobs?: boolean | CandidatData$savedJobsArgs<ExtArgs>
    sendCandidature?: boolean | CandidatData$sendCandidatureArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    candidatLifeState?: boolean | CandidatData$candidatLifeStateArgs<ExtArgs>
    _count?: boolean | CandidatDataCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidatDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CandidatDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidatData"
    objects: {
      courses: Prisma.$CoursesPayload<ExtArgs>[]
      education: Prisma.$EducationPayload<ExtArgs>[]
      experience: Prisma.$ExperiencePayload<ExtArgs>[]
      hobbies: Prisma.$HobbiesPayload<ExtArgs>[]
      languages: Prisma.$LanguagesPayload<ExtArgs>[]
      skills: Prisma.$SkillsPayload<ExtArgs>[]
      savedJobs: Prisma.$SavedJobsPayload<ExtArgs>[]
      sendCandidature: Prisma.$SendCandidaturePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      candidatLifeState: Prisma.$CandidatLifeStatePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstname: string
      surname: string
      birthday: string
      phone: string | null
      resident: string | null
      about_my: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      avatar: string[]
    }, ExtArgs["result"]["candidatData"]>
    composites: {}
  }

  type CandidatDataGetPayload<S extends boolean | null | undefined | CandidatDataDefaultArgs> = $Result.GetResult<Prisma.$CandidatDataPayload, S>

  type CandidatDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidatDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CandidatDataCountAggregateInputType | true
    }

  export interface CandidatDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidatData'], meta: { name: 'CandidatData' } }
    /**
     * Find zero or one CandidatData that matches the filter.
     * @param {CandidatDataFindUniqueArgs} args - Arguments to find a CandidatData
     * @example
     * // Get one CandidatData
     * const candidatData = await prisma.candidatData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidatDataFindUniqueArgs>(args: SelectSubset<T, CandidatDataFindUniqueArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CandidatData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CandidatDataFindUniqueOrThrowArgs} args - Arguments to find a CandidatData
     * @example
     * // Get one CandidatData
     * const candidatData = await prisma.candidatData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidatDataFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidatDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CandidatData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataFindFirstArgs} args - Arguments to find a CandidatData
     * @example
     * // Get one CandidatData
     * const candidatData = await prisma.candidatData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidatDataFindFirstArgs>(args?: SelectSubset<T, CandidatDataFindFirstArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CandidatData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataFindFirstOrThrowArgs} args - Arguments to find a CandidatData
     * @example
     * // Get one CandidatData
     * const candidatData = await prisma.candidatData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidatDataFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidatDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CandidatData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidatData
     * const candidatData = await prisma.candidatData.findMany()
     * 
     * // Get first 10 CandidatData
     * const candidatData = await prisma.candidatData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidatDataWithIdOnly = await prisma.candidatData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidatDataFindManyArgs>(args?: SelectSubset<T, CandidatDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CandidatData.
     * @param {CandidatDataCreateArgs} args - Arguments to create a CandidatData.
     * @example
     * // Create one CandidatData
     * const CandidatData = await prisma.candidatData.create({
     *   data: {
     *     // ... data to create a CandidatData
     *   }
     * })
     * 
     */
    create<T extends CandidatDataCreateArgs>(args: SelectSubset<T, CandidatDataCreateArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CandidatData.
     * @param {CandidatDataCreateManyArgs} args - Arguments to create many CandidatData.
     * @example
     * // Create many CandidatData
     * const candidatData = await prisma.candidatData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidatDataCreateManyArgs>(args?: SelectSubset<T, CandidatDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidatData and returns the data saved in the database.
     * @param {CandidatDataCreateManyAndReturnArgs} args - Arguments to create many CandidatData.
     * @example
     * // Create many CandidatData
     * const candidatData = await prisma.candidatData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidatData and only return the `id`
     * const candidatDataWithIdOnly = await prisma.candidatData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidatDataCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidatDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CandidatData.
     * @param {CandidatDataDeleteArgs} args - Arguments to delete one CandidatData.
     * @example
     * // Delete one CandidatData
     * const CandidatData = await prisma.candidatData.delete({
     *   where: {
     *     // ... filter to delete one CandidatData
     *   }
     * })
     * 
     */
    delete<T extends CandidatDataDeleteArgs>(args: SelectSubset<T, CandidatDataDeleteArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CandidatData.
     * @param {CandidatDataUpdateArgs} args - Arguments to update one CandidatData.
     * @example
     * // Update one CandidatData
     * const candidatData = await prisma.candidatData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidatDataUpdateArgs>(args: SelectSubset<T, CandidatDataUpdateArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CandidatData.
     * @param {CandidatDataDeleteManyArgs} args - Arguments to filter CandidatData to delete.
     * @example
     * // Delete a few CandidatData
     * const { count } = await prisma.candidatData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidatDataDeleteManyArgs>(args?: SelectSubset<T, CandidatDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidatData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidatData
     * const candidatData = await prisma.candidatData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidatDataUpdateManyArgs>(args: SelectSubset<T, CandidatDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidatData.
     * @param {CandidatDataUpsertArgs} args - Arguments to update or create a CandidatData.
     * @example
     * // Update or create a CandidatData
     * const candidatData = await prisma.candidatData.upsert({
     *   create: {
     *     // ... data to create a CandidatData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidatData we want to update
     *   }
     * })
     */
    upsert<T extends CandidatDataUpsertArgs>(args: SelectSubset<T, CandidatDataUpsertArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CandidatData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataCountArgs} args - Arguments to filter CandidatData to count.
     * @example
     * // Count the number of CandidatData
     * const count = await prisma.candidatData.count({
     *   where: {
     *     // ... the filter for the CandidatData we want to count
     *   }
     * })
    **/
    count<T extends CandidatDataCountArgs>(
      args?: Subset<T, CandidatDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidatData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatDataAggregateArgs>(args: Subset<T, CandidatDataAggregateArgs>): Prisma.PrismaPromise<GetCandidatDataAggregateType<T>>

    /**
     * Group by CandidatData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatDataGroupByArgs['orderBy'] }
        : { orderBy?: CandidatDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidatData model
   */
  readonly fields: CandidatDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidatData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends CandidatData$coursesArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany"> | Null>
    education<T extends CandidatData$educationArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$educationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany"> | Null>
    experience<T extends CandidatData$experienceArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$experienceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany"> | Null>
    hobbies<T extends CandidatData$hobbiesArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$hobbiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findMany"> | Null>
    languages<T extends CandidatData$languagesArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$languagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findMany"> | Null>
    skills<T extends CandidatData$skillsArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findMany"> | Null>
    savedJobs<T extends CandidatData$savedJobsArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$savedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findMany"> | Null>
    sendCandidature<T extends CandidatData$sendCandidatureArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$sendCandidatureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    candidatLifeState<T extends CandidatData$candidatLifeStateArgs<ExtArgs> = {}>(args?: Subset<T, CandidatData$candidatLifeStateArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidatData model
   */ 
  interface CandidatDataFieldRefs {
    readonly id: FieldRef<"CandidatData", 'String'>
    readonly firstname: FieldRef<"CandidatData", 'String'>
    readonly surname: FieldRef<"CandidatData", 'String'>
    readonly birthday: FieldRef<"CandidatData", 'String'>
    readonly phone: FieldRef<"CandidatData", 'String'>
    readonly resident: FieldRef<"CandidatData", 'String'>
    readonly about_my: FieldRef<"CandidatData", 'String'>
    readonly createdAt: FieldRef<"CandidatData", 'DateTime'>
    readonly updatedAt: FieldRef<"CandidatData", 'DateTime'>
    readonly userId: FieldRef<"CandidatData", 'String'>
    readonly avatar: FieldRef<"CandidatData", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * CandidatData findUnique
   */
  export type CandidatDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter, which CandidatData to fetch.
     */
    where: CandidatDataWhereUniqueInput
  }

  /**
   * CandidatData findUniqueOrThrow
   */
  export type CandidatDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter, which CandidatData to fetch.
     */
    where: CandidatDataWhereUniqueInput
  }

  /**
   * CandidatData findFirst
   */
  export type CandidatDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter, which CandidatData to fetch.
     */
    where?: CandidatDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatData to fetch.
     */
    orderBy?: CandidatDataOrderByWithRelationInput | CandidatDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatData.
     */
    cursor?: CandidatDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatData.
     */
    distinct?: CandidatDataScalarFieldEnum | CandidatDataScalarFieldEnum[]
  }

  /**
   * CandidatData findFirstOrThrow
   */
  export type CandidatDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter, which CandidatData to fetch.
     */
    where?: CandidatDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatData to fetch.
     */
    orderBy?: CandidatDataOrderByWithRelationInput | CandidatDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatData.
     */
    cursor?: CandidatDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatData.
     */
    distinct?: CandidatDataScalarFieldEnum | CandidatDataScalarFieldEnum[]
  }

  /**
   * CandidatData findMany
   */
  export type CandidatDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter, which CandidatData to fetch.
     */
    where?: CandidatDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatData to fetch.
     */
    orderBy?: CandidatDataOrderByWithRelationInput | CandidatDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidatData.
     */
    cursor?: CandidatDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatData.
     */
    skip?: number
    distinct?: CandidatDataScalarFieldEnum | CandidatDataScalarFieldEnum[]
  }

  /**
   * CandidatData create
   */
  export type CandidatDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidatData.
     */
    data: XOR<CandidatDataCreateInput, CandidatDataUncheckedCreateInput>
  }

  /**
   * CandidatData createMany
   */
  export type CandidatDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidatData.
     */
    data: CandidatDataCreateManyInput | CandidatDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidatData createManyAndReturn
   */
  export type CandidatDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CandidatData.
     */
    data: CandidatDataCreateManyInput | CandidatDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidatData update
   */
  export type CandidatDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidatData.
     */
    data: XOR<CandidatDataUpdateInput, CandidatDataUncheckedUpdateInput>
    /**
     * Choose, which CandidatData to update.
     */
    where: CandidatDataWhereUniqueInput
  }

  /**
   * CandidatData updateMany
   */
  export type CandidatDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidatData.
     */
    data: XOR<CandidatDataUpdateManyMutationInput, CandidatDataUncheckedUpdateManyInput>
    /**
     * Filter which CandidatData to update
     */
    where?: CandidatDataWhereInput
  }

  /**
   * CandidatData upsert
   */
  export type CandidatDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidatData to update in case it exists.
     */
    where: CandidatDataWhereUniqueInput
    /**
     * In case the CandidatData found by the `where` argument doesn't exist, create a new CandidatData with this data.
     */
    create: XOR<CandidatDataCreateInput, CandidatDataUncheckedCreateInput>
    /**
     * In case the CandidatData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatDataUpdateInput, CandidatDataUncheckedUpdateInput>
  }

  /**
   * CandidatData delete
   */
  export type CandidatDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
    /**
     * Filter which CandidatData to delete.
     */
    where: CandidatDataWhereUniqueInput
  }

  /**
   * CandidatData deleteMany
   */
  export type CandidatDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatData to delete
     */
    where?: CandidatDataWhereInput
  }

  /**
   * CandidatData.courses
   */
  export type CandidatData$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    cursor?: CoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * CandidatData.education
   */
  export type CandidatData$educationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * CandidatData.experience
   */
  export type CandidatData$experienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * CandidatData.hobbies
   */
  export type CandidatData$hobbiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    where?: HobbiesWhereInput
    orderBy?: HobbiesOrderByWithRelationInput | HobbiesOrderByWithRelationInput[]
    cursor?: HobbiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HobbiesScalarFieldEnum | HobbiesScalarFieldEnum[]
  }

  /**
   * CandidatData.languages
   */
  export type CandidatData$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    where?: LanguagesWhereInput
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    cursor?: LanguagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }

  /**
   * CandidatData.skills
   */
  export type CandidatData$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    where?: SkillsWhereInput
    orderBy?: SkillsOrderByWithRelationInput | SkillsOrderByWithRelationInput[]
    cursor?: SkillsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillsScalarFieldEnum | SkillsScalarFieldEnum[]
  }

  /**
   * CandidatData.savedJobs
   */
  export type CandidatData$savedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    where?: SavedJobsWhereInput
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    cursor?: SavedJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedJobsScalarFieldEnum | SavedJobsScalarFieldEnum[]
  }

  /**
   * CandidatData.sendCandidature
   */
  export type CandidatData$sendCandidatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    where?: SendCandidatureWhereInput
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    cursor?: SendCandidatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SendCandidatureScalarFieldEnum | SendCandidatureScalarFieldEnum[]
  }

  /**
   * CandidatData.candidatLifeState
   */
  export type CandidatData$candidatLifeStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    where?: CandidatLifeStateWhereInput
  }

  /**
   * CandidatData without action
   */
  export type CandidatDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatData
     */
    select?: CandidatDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatDataInclude<ExtArgs> | null
  }


  /**
   * Model CandidatLifeState
   */

  export type AggregateCandidatLifeState = {
    _count: CandidatLifeStateCountAggregateOutputType | null
    _min: CandidatLifeStateMinAggregateOutputType | null
    _max: CandidatLifeStateMaxAggregateOutputType | null
  }

  export type CandidatLifeStateMinAggregateOutputType = {
    id: string | null
    availabilityTransport: boolean | null
    maritalStatus: $Enums.MaritalStatus | null
    cdId: string | null
  }

  export type CandidatLifeStateMaxAggregateOutputType = {
    id: string | null
    availabilityTransport: boolean | null
    maritalStatus: $Enums.MaritalStatus | null
    cdId: string | null
  }

  export type CandidatLifeStateCountAggregateOutputType = {
    id: number
    availabilityTransport: number
    maritalStatus: number
    cdId: number
    driverCategory: number
    _all: number
  }


  export type CandidatLifeStateMinAggregateInputType = {
    id?: true
    availabilityTransport?: true
    maritalStatus?: true
    cdId?: true
  }

  export type CandidatLifeStateMaxAggregateInputType = {
    id?: true
    availabilityTransport?: true
    maritalStatus?: true
    cdId?: true
  }

  export type CandidatLifeStateCountAggregateInputType = {
    id?: true
    availabilityTransport?: true
    maritalStatus?: true
    cdId?: true
    driverCategory?: true
    _all?: true
  }

  export type CandidatLifeStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatLifeState to aggregate.
     */
    where?: CandidatLifeStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatLifeStates to fetch.
     */
    orderBy?: CandidatLifeStateOrderByWithRelationInput | CandidatLifeStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatLifeStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatLifeStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatLifeStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidatLifeStates
    **/
    _count?: true | CandidatLifeStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatLifeStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatLifeStateMaxAggregateInputType
  }

  export type GetCandidatLifeStateAggregateType<T extends CandidatLifeStateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidatLifeState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidatLifeState[P]>
      : GetScalarType<T[P], AggregateCandidatLifeState[P]>
  }




  export type CandidatLifeStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatLifeStateWhereInput
    orderBy?: CandidatLifeStateOrderByWithAggregationInput | CandidatLifeStateOrderByWithAggregationInput[]
    by: CandidatLifeStateScalarFieldEnum[] | CandidatLifeStateScalarFieldEnum
    having?: CandidatLifeStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatLifeStateCountAggregateInputType | true
    _min?: CandidatLifeStateMinAggregateInputType
    _max?: CandidatLifeStateMaxAggregateInputType
  }

  export type CandidatLifeStateGroupByOutputType = {
    id: string
    availabilityTransport: boolean
    maritalStatus: $Enums.MaritalStatus
    cdId: string
    driverCategory: JsonValue | null
    _count: CandidatLifeStateCountAggregateOutputType | null
    _min: CandidatLifeStateMinAggregateOutputType | null
    _max: CandidatLifeStateMaxAggregateOutputType | null
  }

  type GetCandidatLifeStateGroupByPayload<T extends CandidatLifeStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatLifeStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatLifeStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatLifeStateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatLifeStateGroupByOutputType[P]>
        }
      >
    >


  export type CandidatLifeStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    availabilityTransport?: boolean
    maritalStatus?: boolean
    cdId?: boolean
    driverCategory?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatLifeState"]>

  export type CandidatLifeStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    availabilityTransport?: boolean
    maritalStatus?: boolean
    cdId?: boolean
    driverCategory?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatLifeState"]>

  export type CandidatLifeStateSelectScalar = {
    id?: boolean
    availabilityTransport?: boolean
    maritalStatus?: boolean
    cdId?: boolean
    driverCategory?: boolean
  }

  export type CandidatLifeStateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type CandidatLifeStateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $CandidatLifeStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidatLifeState"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      availabilityTransport: boolean
      maritalStatus: $Enums.MaritalStatus
      cdId: string
      driverCategory: Prisma.JsonValue | null
    }, ExtArgs["result"]["candidatLifeState"]>
    composites: {}
  }

  type CandidatLifeStateGetPayload<S extends boolean | null | undefined | CandidatLifeStateDefaultArgs> = $Result.GetResult<Prisma.$CandidatLifeStatePayload, S>

  type CandidatLifeStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidatLifeStateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CandidatLifeStateCountAggregateInputType | true
    }

  export interface CandidatLifeStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidatLifeState'], meta: { name: 'CandidatLifeState' } }
    /**
     * Find zero or one CandidatLifeState that matches the filter.
     * @param {CandidatLifeStateFindUniqueArgs} args - Arguments to find a CandidatLifeState
     * @example
     * // Get one CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidatLifeStateFindUniqueArgs>(args: SelectSubset<T, CandidatLifeStateFindUniqueArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CandidatLifeState that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CandidatLifeStateFindUniqueOrThrowArgs} args - Arguments to find a CandidatLifeState
     * @example
     * // Get one CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidatLifeStateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidatLifeStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CandidatLifeState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateFindFirstArgs} args - Arguments to find a CandidatLifeState
     * @example
     * // Get one CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidatLifeStateFindFirstArgs>(args?: SelectSubset<T, CandidatLifeStateFindFirstArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CandidatLifeState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateFindFirstOrThrowArgs} args - Arguments to find a CandidatLifeState
     * @example
     * // Get one CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidatLifeStateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidatLifeStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CandidatLifeStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidatLifeStates
     * const candidatLifeStates = await prisma.candidatLifeState.findMany()
     * 
     * // Get first 10 CandidatLifeStates
     * const candidatLifeStates = await prisma.candidatLifeState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidatLifeStateWithIdOnly = await prisma.candidatLifeState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidatLifeStateFindManyArgs>(args?: SelectSubset<T, CandidatLifeStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CandidatLifeState.
     * @param {CandidatLifeStateCreateArgs} args - Arguments to create a CandidatLifeState.
     * @example
     * // Create one CandidatLifeState
     * const CandidatLifeState = await prisma.candidatLifeState.create({
     *   data: {
     *     // ... data to create a CandidatLifeState
     *   }
     * })
     * 
     */
    create<T extends CandidatLifeStateCreateArgs>(args: SelectSubset<T, CandidatLifeStateCreateArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CandidatLifeStates.
     * @param {CandidatLifeStateCreateManyArgs} args - Arguments to create many CandidatLifeStates.
     * @example
     * // Create many CandidatLifeStates
     * const candidatLifeState = await prisma.candidatLifeState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidatLifeStateCreateManyArgs>(args?: SelectSubset<T, CandidatLifeStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidatLifeStates and returns the data saved in the database.
     * @param {CandidatLifeStateCreateManyAndReturnArgs} args - Arguments to create many CandidatLifeStates.
     * @example
     * // Create many CandidatLifeStates
     * const candidatLifeState = await prisma.candidatLifeState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidatLifeStates and only return the `id`
     * const candidatLifeStateWithIdOnly = await prisma.candidatLifeState.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidatLifeStateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidatLifeStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CandidatLifeState.
     * @param {CandidatLifeStateDeleteArgs} args - Arguments to delete one CandidatLifeState.
     * @example
     * // Delete one CandidatLifeState
     * const CandidatLifeState = await prisma.candidatLifeState.delete({
     *   where: {
     *     // ... filter to delete one CandidatLifeState
     *   }
     * })
     * 
     */
    delete<T extends CandidatLifeStateDeleteArgs>(args: SelectSubset<T, CandidatLifeStateDeleteArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CandidatLifeState.
     * @param {CandidatLifeStateUpdateArgs} args - Arguments to update one CandidatLifeState.
     * @example
     * // Update one CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidatLifeStateUpdateArgs>(args: SelectSubset<T, CandidatLifeStateUpdateArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CandidatLifeStates.
     * @param {CandidatLifeStateDeleteManyArgs} args - Arguments to filter CandidatLifeStates to delete.
     * @example
     * // Delete a few CandidatLifeStates
     * const { count } = await prisma.candidatLifeState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidatLifeStateDeleteManyArgs>(args?: SelectSubset<T, CandidatLifeStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidatLifeStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidatLifeStates
     * const candidatLifeState = await prisma.candidatLifeState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidatLifeStateUpdateManyArgs>(args: SelectSubset<T, CandidatLifeStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidatLifeState.
     * @param {CandidatLifeStateUpsertArgs} args - Arguments to update or create a CandidatLifeState.
     * @example
     * // Update or create a CandidatLifeState
     * const candidatLifeState = await prisma.candidatLifeState.upsert({
     *   create: {
     *     // ... data to create a CandidatLifeState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidatLifeState we want to update
     *   }
     * })
     */
    upsert<T extends CandidatLifeStateUpsertArgs>(args: SelectSubset<T, CandidatLifeStateUpsertArgs<ExtArgs>>): Prisma__CandidatLifeStateClient<$Result.GetResult<Prisma.$CandidatLifeStatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CandidatLifeStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateCountArgs} args - Arguments to filter CandidatLifeStates to count.
     * @example
     * // Count the number of CandidatLifeStates
     * const count = await prisma.candidatLifeState.count({
     *   where: {
     *     // ... the filter for the CandidatLifeStates we want to count
     *   }
     * })
    **/
    count<T extends CandidatLifeStateCountArgs>(
      args?: Subset<T, CandidatLifeStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatLifeStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidatLifeState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatLifeStateAggregateArgs>(args: Subset<T, CandidatLifeStateAggregateArgs>): Prisma.PrismaPromise<GetCandidatLifeStateAggregateType<T>>

    /**
     * Group by CandidatLifeState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatLifeStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatLifeStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatLifeStateGroupByArgs['orderBy'] }
        : { orderBy?: CandidatLifeStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatLifeStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatLifeStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidatLifeState model
   */
  readonly fields: CandidatLifeStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidatLifeState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatLifeStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidatLifeState model
   */ 
  interface CandidatLifeStateFieldRefs {
    readonly id: FieldRef<"CandidatLifeState", 'String'>
    readonly availabilityTransport: FieldRef<"CandidatLifeState", 'Boolean'>
    readonly maritalStatus: FieldRef<"CandidatLifeState", 'MaritalStatus'>
    readonly cdId: FieldRef<"CandidatLifeState", 'String'>
    readonly driverCategory: FieldRef<"CandidatLifeState", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * CandidatLifeState findUnique
   */
  export type CandidatLifeStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter, which CandidatLifeState to fetch.
     */
    where: CandidatLifeStateWhereUniqueInput
  }

  /**
   * CandidatLifeState findUniqueOrThrow
   */
  export type CandidatLifeStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter, which CandidatLifeState to fetch.
     */
    where: CandidatLifeStateWhereUniqueInput
  }

  /**
   * CandidatLifeState findFirst
   */
  export type CandidatLifeStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter, which CandidatLifeState to fetch.
     */
    where?: CandidatLifeStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatLifeStates to fetch.
     */
    orderBy?: CandidatLifeStateOrderByWithRelationInput | CandidatLifeStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatLifeStates.
     */
    cursor?: CandidatLifeStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatLifeStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatLifeStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatLifeStates.
     */
    distinct?: CandidatLifeStateScalarFieldEnum | CandidatLifeStateScalarFieldEnum[]
  }

  /**
   * CandidatLifeState findFirstOrThrow
   */
  export type CandidatLifeStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter, which CandidatLifeState to fetch.
     */
    where?: CandidatLifeStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatLifeStates to fetch.
     */
    orderBy?: CandidatLifeStateOrderByWithRelationInput | CandidatLifeStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatLifeStates.
     */
    cursor?: CandidatLifeStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatLifeStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatLifeStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatLifeStates.
     */
    distinct?: CandidatLifeStateScalarFieldEnum | CandidatLifeStateScalarFieldEnum[]
  }

  /**
   * CandidatLifeState findMany
   */
  export type CandidatLifeStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter, which CandidatLifeStates to fetch.
     */
    where?: CandidatLifeStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatLifeStates to fetch.
     */
    orderBy?: CandidatLifeStateOrderByWithRelationInput | CandidatLifeStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidatLifeStates.
     */
    cursor?: CandidatLifeStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatLifeStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatLifeStates.
     */
    skip?: number
    distinct?: CandidatLifeStateScalarFieldEnum | CandidatLifeStateScalarFieldEnum[]
  }

  /**
   * CandidatLifeState create
   */
  export type CandidatLifeStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidatLifeState.
     */
    data: XOR<CandidatLifeStateCreateInput, CandidatLifeStateUncheckedCreateInput>
  }

  /**
   * CandidatLifeState createMany
   */
  export type CandidatLifeStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidatLifeStates.
     */
    data: CandidatLifeStateCreateManyInput | CandidatLifeStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidatLifeState createManyAndReturn
   */
  export type CandidatLifeStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CandidatLifeStates.
     */
    data: CandidatLifeStateCreateManyInput | CandidatLifeStateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidatLifeState update
   */
  export type CandidatLifeStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidatLifeState.
     */
    data: XOR<CandidatLifeStateUpdateInput, CandidatLifeStateUncheckedUpdateInput>
    /**
     * Choose, which CandidatLifeState to update.
     */
    where: CandidatLifeStateWhereUniqueInput
  }

  /**
   * CandidatLifeState updateMany
   */
  export type CandidatLifeStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidatLifeStates.
     */
    data: XOR<CandidatLifeStateUpdateManyMutationInput, CandidatLifeStateUncheckedUpdateManyInput>
    /**
     * Filter which CandidatLifeStates to update
     */
    where?: CandidatLifeStateWhereInput
  }

  /**
   * CandidatLifeState upsert
   */
  export type CandidatLifeStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidatLifeState to update in case it exists.
     */
    where: CandidatLifeStateWhereUniqueInput
    /**
     * In case the CandidatLifeState found by the `where` argument doesn't exist, create a new CandidatLifeState with this data.
     */
    create: XOR<CandidatLifeStateCreateInput, CandidatLifeStateUncheckedCreateInput>
    /**
     * In case the CandidatLifeState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatLifeStateUpdateInput, CandidatLifeStateUncheckedUpdateInput>
  }

  /**
   * CandidatLifeState delete
   */
  export type CandidatLifeStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
    /**
     * Filter which CandidatLifeState to delete.
     */
    where: CandidatLifeStateWhereUniqueInput
  }

  /**
   * CandidatLifeState deleteMany
   */
  export type CandidatLifeStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatLifeStates to delete
     */
    where?: CandidatLifeStateWhereInput
  }

  /**
   * CandidatLifeState without action
   */
  export type CandidatLifeStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatLifeState
     */
    select?: CandidatLifeStateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatLifeStateInclude<ExtArgs> | null
  }


  /**
   * Model UserSocial
   */

  export type AggregateUserSocial = {
    _count: UserSocialCountAggregateOutputType | null
    _min: UserSocialMinAggregateOutputType | null
    _max: UserSocialMaxAggregateOutputType | null
  }

  export type UserSocialMinAggregateOutputType = {
    id: string | null
    usId: string | null
    socialLink: string | null
  }

  export type UserSocialMaxAggregateOutputType = {
    id: string | null
    usId: string | null
    socialLink: string | null
  }

  export type UserSocialCountAggregateOutputType = {
    id: number
    usId: number
    socialLink: number
    _all: number
  }


  export type UserSocialMinAggregateInputType = {
    id?: true
    usId?: true
    socialLink?: true
  }

  export type UserSocialMaxAggregateInputType = {
    id?: true
    usId?: true
    socialLink?: true
  }

  export type UserSocialCountAggregateInputType = {
    id?: true
    usId?: true
    socialLink?: true
    _all?: true
  }

  export type UserSocialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocial to aggregate.
     */
    where?: UserSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocials to fetch.
     */
    orderBy?: UserSocialOrderByWithRelationInput | UserSocialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSocials
    **/
    _count?: true | UserSocialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSocialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSocialMaxAggregateInputType
  }

  export type GetUserSocialAggregateType<T extends UserSocialAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSocial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSocial[P]>
      : GetScalarType<T[P], AggregateUserSocial[P]>
  }




  export type UserSocialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSocialWhereInput
    orderBy?: UserSocialOrderByWithAggregationInput | UserSocialOrderByWithAggregationInput[]
    by: UserSocialScalarFieldEnum[] | UserSocialScalarFieldEnum
    having?: UserSocialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSocialCountAggregateInputType | true
    _min?: UserSocialMinAggregateInputType
    _max?: UserSocialMaxAggregateInputType
  }

  export type UserSocialGroupByOutputType = {
    id: string
    usId: string
    socialLink: string
    _count: UserSocialCountAggregateOutputType | null
    _min: UserSocialMinAggregateOutputType | null
    _max: UserSocialMaxAggregateOutputType | null
  }

  type GetUserSocialGroupByPayload<T extends UserSocialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSocialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSocialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSocialGroupByOutputType[P]>
            : GetScalarType<T[P], UserSocialGroupByOutputType[P]>
        }
      >
    >


  export type UserSocialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usId?: boolean
    socialLink?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocial"]>

  export type UserSocialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usId?: boolean
    socialLink?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocial"]>

  export type UserSocialSelectScalar = {
    id?: boolean
    usId?: boolean
    socialLink?: boolean
  }

  export type UserSocialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSocialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSocialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSocial"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usId: string
      socialLink: string
    }, ExtArgs["result"]["userSocial"]>
    composites: {}
  }

  type UserSocialGetPayload<S extends boolean | null | undefined | UserSocialDefaultArgs> = $Result.GetResult<Prisma.$UserSocialPayload, S>

  type UserSocialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSocialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSocialCountAggregateInputType | true
    }

  export interface UserSocialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSocial'], meta: { name: 'UserSocial' } }
    /**
     * Find zero or one UserSocial that matches the filter.
     * @param {UserSocialFindUniqueArgs} args - Arguments to find a UserSocial
     * @example
     * // Get one UserSocial
     * const userSocial = await prisma.userSocial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSocialFindUniqueArgs>(args: SelectSubset<T, UserSocialFindUniqueArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSocial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSocialFindUniqueOrThrowArgs} args - Arguments to find a UserSocial
     * @example
     * // Get one UserSocial
     * const userSocial = await prisma.userSocial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSocialFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSocialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSocial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialFindFirstArgs} args - Arguments to find a UserSocial
     * @example
     * // Get one UserSocial
     * const userSocial = await prisma.userSocial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSocialFindFirstArgs>(args?: SelectSubset<T, UserSocialFindFirstArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSocial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialFindFirstOrThrowArgs} args - Arguments to find a UserSocial
     * @example
     * // Get one UserSocial
     * const userSocial = await prisma.userSocial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSocialFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSocialFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSocials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSocials
     * const userSocials = await prisma.userSocial.findMany()
     * 
     * // Get first 10 UserSocials
     * const userSocials = await prisma.userSocial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSocialWithIdOnly = await prisma.userSocial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSocialFindManyArgs>(args?: SelectSubset<T, UserSocialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSocial.
     * @param {UserSocialCreateArgs} args - Arguments to create a UserSocial.
     * @example
     * // Create one UserSocial
     * const UserSocial = await prisma.userSocial.create({
     *   data: {
     *     // ... data to create a UserSocial
     *   }
     * })
     * 
     */
    create<T extends UserSocialCreateArgs>(args: SelectSubset<T, UserSocialCreateArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSocials.
     * @param {UserSocialCreateManyArgs} args - Arguments to create many UserSocials.
     * @example
     * // Create many UserSocials
     * const userSocial = await prisma.userSocial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSocialCreateManyArgs>(args?: SelectSubset<T, UserSocialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSocials and returns the data saved in the database.
     * @param {UserSocialCreateManyAndReturnArgs} args - Arguments to create many UserSocials.
     * @example
     * // Create many UserSocials
     * const userSocial = await prisma.userSocial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSocials and only return the `id`
     * const userSocialWithIdOnly = await prisma.userSocial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSocialCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSocialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSocial.
     * @param {UserSocialDeleteArgs} args - Arguments to delete one UserSocial.
     * @example
     * // Delete one UserSocial
     * const UserSocial = await prisma.userSocial.delete({
     *   where: {
     *     // ... filter to delete one UserSocial
     *   }
     * })
     * 
     */
    delete<T extends UserSocialDeleteArgs>(args: SelectSubset<T, UserSocialDeleteArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSocial.
     * @param {UserSocialUpdateArgs} args - Arguments to update one UserSocial.
     * @example
     * // Update one UserSocial
     * const userSocial = await prisma.userSocial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSocialUpdateArgs>(args: SelectSubset<T, UserSocialUpdateArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSocials.
     * @param {UserSocialDeleteManyArgs} args - Arguments to filter UserSocials to delete.
     * @example
     * // Delete a few UserSocials
     * const { count } = await prisma.userSocial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSocialDeleteManyArgs>(args?: SelectSubset<T, UserSocialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSocials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSocials
     * const userSocial = await prisma.userSocial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSocialUpdateManyArgs>(args: SelectSubset<T, UserSocialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSocial.
     * @param {UserSocialUpsertArgs} args - Arguments to update or create a UserSocial.
     * @example
     * // Update or create a UserSocial
     * const userSocial = await prisma.userSocial.upsert({
     *   create: {
     *     // ... data to create a UserSocial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSocial we want to update
     *   }
     * })
     */
    upsert<T extends UserSocialUpsertArgs>(args: SelectSubset<T, UserSocialUpsertArgs<ExtArgs>>): Prisma__UserSocialClient<$Result.GetResult<Prisma.$UserSocialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSocials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialCountArgs} args - Arguments to filter UserSocials to count.
     * @example
     * // Count the number of UserSocials
     * const count = await prisma.userSocial.count({
     *   where: {
     *     // ... the filter for the UserSocials we want to count
     *   }
     * })
    **/
    count<T extends UserSocialCountArgs>(
      args?: Subset<T, UserSocialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSocialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSocial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSocialAggregateArgs>(args: Subset<T, UserSocialAggregateArgs>): Prisma.PrismaPromise<GetUserSocialAggregateType<T>>

    /**
     * Group by UserSocial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSocialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSocialGroupByArgs['orderBy'] }
        : { orderBy?: UserSocialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSocialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSocialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSocial model
   */
  readonly fields: UserSocialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSocial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSocialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSocial model
   */ 
  interface UserSocialFieldRefs {
    readonly id: FieldRef<"UserSocial", 'String'>
    readonly usId: FieldRef<"UserSocial", 'String'>
    readonly socialLink: FieldRef<"UserSocial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSocial findUnique
   */
  export type UserSocialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter, which UserSocial to fetch.
     */
    where: UserSocialWhereUniqueInput
  }

  /**
   * UserSocial findUniqueOrThrow
   */
  export type UserSocialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter, which UserSocial to fetch.
     */
    where: UserSocialWhereUniqueInput
  }

  /**
   * UserSocial findFirst
   */
  export type UserSocialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter, which UserSocial to fetch.
     */
    where?: UserSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocials to fetch.
     */
    orderBy?: UserSocialOrderByWithRelationInput | UserSocialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocials.
     */
    cursor?: UserSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocials.
     */
    distinct?: UserSocialScalarFieldEnum | UserSocialScalarFieldEnum[]
  }

  /**
   * UserSocial findFirstOrThrow
   */
  export type UserSocialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter, which UserSocial to fetch.
     */
    where?: UserSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocials to fetch.
     */
    orderBy?: UserSocialOrderByWithRelationInput | UserSocialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocials.
     */
    cursor?: UserSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocials.
     */
    distinct?: UserSocialScalarFieldEnum | UserSocialScalarFieldEnum[]
  }

  /**
   * UserSocial findMany
   */
  export type UserSocialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter, which UserSocials to fetch.
     */
    where?: UserSocialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocials to fetch.
     */
    orderBy?: UserSocialOrderByWithRelationInput | UserSocialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSocials.
     */
    cursor?: UserSocialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocials.
     */
    skip?: number
    distinct?: UserSocialScalarFieldEnum | UserSocialScalarFieldEnum[]
  }

  /**
   * UserSocial create
   */
  export type UserSocialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSocial.
     */
    data: XOR<UserSocialCreateInput, UserSocialUncheckedCreateInput>
  }

  /**
   * UserSocial createMany
   */
  export type UserSocialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSocials.
     */
    data: UserSocialCreateManyInput | UserSocialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSocial createManyAndReturn
   */
  export type UserSocialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSocials.
     */
    data: UserSocialCreateManyInput | UserSocialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSocial update
   */
  export type UserSocialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSocial.
     */
    data: XOR<UserSocialUpdateInput, UserSocialUncheckedUpdateInput>
    /**
     * Choose, which UserSocial to update.
     */
    where: UserSocialWhereUniqueInput
  }

  /**
   * UserSocial updateMany
   */
  export type UserSocialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSocials.
     */
    data: XOR<UserSocialUpdateManyMutationInput, UserSocialUncheckedUpdateManyInput>
    /**
     * Filter which UserSocials to update
     */
    where?: UserSocialWhereInput
  }

  /**
   * UserSocial upsert
   */
  export type UserSocialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSocial to update in case it exists.
     */
    where: UserSocialWhereUniqueInput
    /**
     * In case the UserSocial found by the `where` argument doesn't exist, create a new UserSocial with this data.
     */
    create: XOR<UserSocialCreateInput, UserSocialUncheckedCreateInput>
    /**
     * In case the UserSocial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSocialUpdateInput, UserSocialUncheckedUpdateInput>
  }

  /**
   * UserSocial delete
   */
  export type UserSocialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
    /**
     * Filter which UserSocial to delete.
     */
    where: UserSocialWhereUniqueInput
  }

  /**
   * UserSocial deleteMany
   */
  export type UserSocialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocials to delete
     */
    where?: UserSocialWhereInput
  }

  /**
   * UserSocial without action
   */
  export type UserSocialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocial
     */
    select?: UserSocialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialInclude<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationMinAggregateOutputType = {
    id: string | null
    school: string | null
    grade: string | null
    startdate: Date | null
    enddate: Date | null
    description: string | null
    levelId: string | null
    cdId: string | null
  }

  export type EducationMaxAggregateOutputType = {
    id: string | null
    school: string | null
    grade: string | null
    startdate: Date | null
    enddate: Date | null
    description: string | null
    levelId: string | null
    cdId: string | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    school: number
    grade: number
    startdate: number
    enddate: number
    description: number
    levelId: number
    cdId: number
    _all: number
  }


  export type EducationMinAggregateInputType = {
    id?: true
    school?: true
    grade?: true
    startdate?: true
    enddate?: true
    description?: true
    levelId?: true
    cdId?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    school?: true
    grade?: true
    startdate?: true
    enddate?: true
    description?: true
    levelId?: true
    cdId?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    school?: true
    grade?: true
    startdate?: true
    enddate?: true
    description?: true
    levelId?: true
    cdId?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: string
    school: string
    grade: string | null
    startdate: Date
    enddate: Date
    description: string | null
    levelId: string | null
    cdId: string
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    description?: boolean
    levelId?: boolean
    cdId?: boolean
    levelEducation?: boolean | Education$levelEducationArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    description?: boolean
    levelId?: boolean
    cdId?: boolean
    levelEducation?: boolean | Education$levelEducationArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectScalar = {
    id?: boolean
    school?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    description?: boolean
    levelId?: boolean
    cdId?: boolean
  }

  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levelEducation?: boolean | Education$levelEducationArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type EducationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levelEducation?: boolean | Education$levelEducationArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      levelEducation: Prisma.$LevelEducationPayload<ExtArgs> | null
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      school: string
      grade: string | null
      startdate: Date
      enddate: Date
      description: string | null
      levelId: string | null
      cdId: string
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Educations and returns the data saved in the database.
     * @param {EducationCreateManyAndReturnArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Educations and only return the `id`
     * const educationWithIdOnly = await prisma.education.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EducationCreateManyAndReturnArgs>(args?: SelectSubset<T, EducationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    levelEducation<T extends Education$levelEducationArgs<ExtArgs> = {}>(args?: Subset<T, Education$levelEducationArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */ 
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'String'>
    readonly school: FieldRef<"Education", 'String'>
    readonly grade: FieldRef<"Education", 'String'>
    readonly startdate: FieldRef<"Education", 'DateTime'>
    readonly enddate: FieldRef<"Education", 'DateTime'>
    readonly description: FieldRef<"Education", 'String'>
    readonly levelId: FieldRef<"Education", 'String'>
    readonly cdId: FieldRef<"Education", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Education createManyAndReturn
   */
  export type EducationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
  }

  /**
   * Education.levelEducation
   */
  export type Education$levelEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    where?: LevelEducationWhereInput
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
  }


  /**
   * Model Skills
   */

  export type AggregateSkills = {
    _count: SkillsCountAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  export type SkillsMinAggregateOutputType = {
    id: string | null
    skill: string | null
    level: $Enums.SkillsLevel | null
    cdId: string | null
  }

  export type SkillsMaxAggregateOutputType = {
    id: string | null
    skill: string | null
    level: $Enums.SkillsLevel | null
    cdId: string | null
  }

  export type SkillsCountAggregateOutputType = {
    id: number
    skill: number
    level: number
    cdId: number
    _all: number
  }


  export type SkillsMinAggregateInputType = {
    id?: true
    skill?: true
    level?: true
    cdId?: true
  }

  export type SkillsMaxAggregateInputType = {
    id?: true
    skill?: true
    level?: true
    cdId?: true
  }

  export type SkillsCountAggregateInputType = {
    id?: true
    skill?: true
    level?: true
    cdId?: true
    _all?: true
  }

  export type SkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to aggregate.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillsOrderByWithRelationInput | SkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillsMaxAggregateInputType
  }

  export type GetSkillsAggregateType<T extends SkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkills[P]>
      : GetScalarType<T[P], AggregateSkills[P]>
  }




  export type SkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillsWhereInput
    orderBy?: SkillsOrderByWithAggregationInput | SkillsOrderByWithAggregationInput[]
    by: SkillsScalarFieldEnum[] | SkillsScalarFieldEnum
    having?: SkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillsCountAggregateInputType | true
    _min?: SkillsMinAggregateInputType
    _max?: SkillsMaxAggregateInputType
  }

  export type SkillsGroupByOutputType = {
    id: string
    skill: string
    level: $Enums.SkillsLevel
    cdId: string
    _count: SkillsCountAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  type GetSkillsGroupByPayload<T extends SkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillsGroupByOutputType[P]>
            : GetScalarType<T[P], SkillsGroupByOutputType[P]>
        }
      >
    >


  export type SkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skill?: boolean
    level?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skills"]>

  export type SkillsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skill?: boolean
    level?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skills"]>

  export type SkillsSelectScalar = {
    id?: boolean
    skill?: boolean
    level?: boolean
    cdId?: boolean
  }

  export type SkillsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type SkillsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $SkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skills"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skill: string
      level: $Enums.SkillsLevel
      cdId: string
    }, ExtArgs["result"]["skills"]>
    composites: {}
  }

  type SkillsGetPayload<S extends boolean | null | undefined | SkillsDefaultArgs> = $Result.GetResult<Prisma.$SkillsPayload, S>

  type SkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillsCountAggregateInputType | true
    }

  export interface SkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skills'], meta: { name: 'Skills' } }
    /**
     * Find zero or one Skills that matches the filter.
     * @param {SkillsFindUniqueArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillsFindUniqueArgs>(args: SelectSubset<T, SkillsFindUniqueArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Skills that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillsFindUniqueOrThrowArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillsFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillsFindFirstArgs>(args?: SelectSubset<T, SkillsFindFirstArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Skills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstOrThrowArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillsFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skills.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillsWithIdOnly = await prisma.skills.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillsFindManyArgs>(args?: SelectSubset<T, SkillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Skills.
     * @param {SkillsCreateArgs} args - Arguments to create a Skills.
     * @example
     * // Create one Skills
     * const Skills = await prisma.skills.create({
     *   data: {
     *     // ... data to create a Skills
     *   }
     * })
     * 
     */
    create<T extends SkillsCreateArgs>(args: SelectSubset<T, SkillsCreateArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Skills.
     * @param {SkillsCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skills = await prisma.skills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillsCreateManyArgs>(args?: SelectSubset<T, SkillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillsCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skills = await prisma.skills.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillsWithIdOnly = await prisma.skills.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillsCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Skills.
     * @param {SkillsDeleteArgs} args - Arguments to delete one Skills.
     * @example
     * // Delete one Skills
     * const Skills = await prisma.skills.delete({
     *   where: {
     *     // ... filter to delete one Skills
     *   }
     * })
     * 
     */
    delete<T extends SkillsDeleteArgs>(args: SelectSubset<T, SkillsDeleteArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Skills.
     * @param {SkillsUpdateArgs} args - Arguments to update one Skills.
     * @example
     * // Update one Skills
     * const skills = await prisma.skills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillsUpdateArgs>(args: SelectSubset<T, SkillsUpdateArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Skills.
     * @param {SkillsDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillsDeleteManyArgs>(args?: SelectSubset<T, SkillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skills = await prisma.skills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillsUpdateManyArgs>(args: SelectSubset<T, SkillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skills.
     * @param {SkillsUpsertArgs} args - Arguments to update or create a Skills.
     * @example
     * // Update or create a Skills
     * const skills = await prisma.skills.upsert({
     *   create: {
     *     // ... data to create a Skills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skills we want to update
     *   }
     * })
     */
    upsert<T extends SkillsUpsertArgs>(args: SelectSubset<T, SkillsUpsertArgs<ExtArgs>>): Prisma__SkillsClient<$Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skills.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillsCountArgs>(
      args?: Subset<T, SkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillsAggregateArgs>(args: Subset<T, SkillsAggregateArgs>): Prisma.PrismaPromise<GetSkillsAggregateType<T>>

    /**
     * Group by Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillsGroupByArgs['orderBy'] }
        : { orderBy?: SkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skills model
   */
  readonly fields: SkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skills model
   */ 
  interface SkillsFieldRefs {
    readonly id: FieldRef<"Skills", 'String'>
    readonly skill: FieldRef<"Skills", 'String'>
    readonly level: FieldRef<"Skills", 'SkillsLevel'>
    readonly cdId: FieldRef<"Skills", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skills findUnique
   */
  export type SkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where: SkillsWhereUniqueInput
  }

  /**
   * Skills findUniqueOrThrow
   */
  export type SkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where: SkillsWhereUniqueInput
  }

  /**
   * Skills findFirst
   */
  export type SkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillsOrderByWithRelationInput | SkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillsScalarFieldEnum | SkillsScalarFieldEnum[]
  }

  /**
   * Skills findFirstOrThrow
   */
  export type SkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillsOrderByWithRelationInput | SkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillsScalarFieldEnum | SkillsScalarFieldEnum[]
  }

  /**
   * Skills findMany
   */
  export type SkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillsOrderByWithRelationInput | SkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillsScalarFieldEnum | SkillsScalarFieldEnum[]
  }

  /**
   * Skills create
   */
  export type SkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * The data needed to create a Skills.
     */
    data: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
  }

  /**
   * Skills createMany
   */
  export type SkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillsCreateManyInput | SkillsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skills createManyAndReturn
   */
  export type SkillsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillsCreateManyInput | SkillsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Skills update
   */
  export type SkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * The data needed to update a Skills.
     */
    data: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
    /**
     * Choose, which Skills to update.
     */
    where: SkillsWhereUniqueInput
  }

  /**
   * Skills updateMany
   */
  export type SkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillsWhereInput
  }

  /**
   * Skills upsert
   */
  export type SkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * The filter to search for the Skills to update in case it exists.
     */
    where: SkillsWhereUniqueInput
    /**
     * In case the Skills found by the `where` argument doesn't exist, create a new Skills with this data.
     */
    create: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
    /**
     * In case the Skills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
  }

  /**
   * Skills delete
   */
  export type SkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
    /**
     * Filter which Skills to delete.
     */
    where: SkillsWhereUniqueInput
  }

  /**
   * Skills deleteMany
   */
  export type SkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillsWhereInput
  }

  /**
   * Skills without action
   */
  export type SkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skills
     */
    select?: SkillsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillsInclude<ExtArgs> | null
  }


  /**
   * Model Experience
   */

  export type AggregateExperience = {
    _count: ExperienceCountAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  export type ExperienceMinAggregateOutputType = {
    id: string | null
    company: string | null
    location: string | null
    currently: boolean | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
    contractTypeId: string | null
    cdId: string | null
  }

  export type ExperienceMaxAggregateOutputType = {
    id: string | null
    company: string | null
    location: string | null
    currently: boolean | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
    contractTypeId: string | null
    cdId: string | null
  }

  export type ExperienceCountAggregateOutputType = {
    id: number
    company: number
    location: number
    currently: number
    startDate: number
    endDate: number
    description: number
    contractTypeId: number
    cdId: number
    _all: number
  }


  export type ExperienceMinAggregateInputType = {
    id?: true
    company?: true
    location?: true
    currently?: true
    startDate?: true
    endDate?: true
    description?: true
    contractTypeId?: true
    cdId?: true
  }

  export type ExperienceMaxAggregateInputType = {
    id?: true
    company?: true
    location?: true
    currently?: true
    startDate?: true
    endDate?: true
    description?: true
    contractTypeId?: true
    cdId?: true
  }

  export type ExperienceCountAggregateInputType = {
    id?: true
    company?: true
    location?: true
    currently?: true
    startDate?: true
    endDate?: true
    description?: true
    contractTypeId?: true
    cdId?: true
    _all?: true
  }

  export type ExperienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experience to aggregate.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiences
    **/
    _count?: true | ExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperienceMaxAggregateInputType
  }

  export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperience[P]>
      : GetScalarType<T[P], AggregateExperience[P]>
  }




  export type ExperienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithAggregationInput | ExperienceOrderByWithAggregationInput[]
    by: ExperienceScalarFieldEnum[] | ExperienceScalarFieldEnum
    having?: ExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperienceCountAggregateInputType | true
    _min?: ExperienceMinAggregateInputType
    _max?: ExperienceMaxAggregateInputType
  }

  export type ExperienceGroupByOutputType = {
    id: string
    company: string
    location: string | null
    currently: boolean
    startDate: Date
    endDate: Date
    description: string | null
    contractTypeId: string | null
    cdId: string
    _count: ExperienceCountAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  type GetExperienceGroupByPayload<T extends ExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
        }
      >
    >


  export type ExperienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company?: boolean
    location?: boolean
    currently?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    contractTypeId?: boolean
    cdId?: boolean
    contractTypeJob?: boolean | Experience$contractTypeJobArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company?: boolean
    location?: boolean
    currently?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    contractTypeId?: boolean
    cdId?: boolean
    contractTypeJob?: boolean | Experience$contractTypeJobArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectScalar = {
    id?: boolean
    company?: boolean
    location?: boolean
    currently?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    contractTypeId?: boolean
    cdId?: boolean
  }

  export type ExperienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractTypeJob?: boolean | Experience$contractTypeJobArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type ExperienceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractTypeJob?: boolean | Experience$contractTypeJobArgs<ExtArgs>
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $ExperiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Experience"
    objects: {
      contractTypeJob: Prisma.$ContractTypeJobPayload<ExtArgs> | null
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company: string
      location: string | null
      currently: boolean
      startDate: Date
      endDate: Date
      description: string | null
      contractTypeId: string | null
      cdId: string
    }, ExtArgs["result"]["experience"]>
    composites: {}
  }

  type ExperienceGetPayload<S extends boolean | null | undefined | ExperienceDefaultArgs> = $Result.GetResult<Prisma.$ExperiencePayload, S>

  type ExperienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperienceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperienceCountAggregateInputType | true
    }

  export interface ExperienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experience'], meta: { name: 'Experience' } }
    /**
     * Find zero or one Experience that matches the filter.
     * @param {ExperienceFindUniqueArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperienceFindUniqueArgs>(args: SelectSubset<T, ExperienceFindUniqueArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Experience that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperienceFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Experience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperienceFindFirstArgs>(args?: SelectSubset<T, ExperienceFindFirstArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Experience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperienceFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperienceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Experiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiences
     * const experiences = await prisma.experience.findMany()
     * 
     * // Get first 10 Experiences
     * const experiences = await prisma.experience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperienceFindManyArgs>(args?: SelectSubset<T, ExperienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Experience.
     * @param {ExperienceCreateArgs} args - Arguments to create a Experience.
     * @example
     * // Create one Experience
     * const Experience = await prisma.experience.create({
     *   data: {
     *     // ... data to create a Experience
     *   }
     * })
     * 
     */
    create<T extends ExperienceCreateArgs>(args: SelectSubset<T, ExperienceCreateArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Experiences.
     * @param {ExperienceCreateManyArgs} args - Arguments to create many Experiences.
     * @example
     * // Create many Experiences
     * const experience = await prisma.experience.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperienceCreateManyArgs>(args?: SelectSubset<T, ExperienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Experiences and returns the data saved in the database.
     * @param {ExperienceCreateManyAndReturnArgs} args - Arguments to create many Experiences.
     * @example
     * // Create many Experiences
     * const experience = await prisma.experience.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Experiences and only return the `id`
     * const experienceWithIdOnly = await prisma.experience.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperienceCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperienceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Experience.
     * @param {ExperienceDeleteArgs} args - Arguments to delete one Experience.
     * @example
     * // Delete one Experience
     * const Experience = await prisma.experience.delete({
     *   where: {
     *     // ... filter to delete one Experience
     *   }
     * })
     * 
     */
    delete<T extends ExperienceDeleteArgs>(args: SelectSubset<T, ExperienceDeleteArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Experience.
     * @param {ExperienceUpdateArgs} args - Arguments to update one Experience.
     * @example
     * // Update one Experience
     * const experience = await prisma.experience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperienceUpdateArgs>(args: SelectSubset<T, ExperienceUpdateArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Experiences.
     * @param {ExperienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
     * @example
     * // Delete a few Experiences
     * const { count } = await prisma.experience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperienceDeleteManyArgs>(args?: SelectSubset<T, ExperienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiences
     * const experience = await prisma.experience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperienceUpdateManyArgs>(args: SelectSubset<T, ExperienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Experience.
     * @param {ExperienceUpsertArgs} args - Arguments to update or create a Experience.
     * @example
     * // Update or create a Experience
     * const experience = await prisma.experience.upsert({
     *   create: {
     *     // ... data to create a Experience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experience we want to update
     *   }
     * })
     */
    upsert<T extends ExperienceUpsertArgs>(args: SelectSubset<T, ExperienceUpsertArgs<ExtArgs>>): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceCountArgs} args - Arguments to filter Experiences to count.
     * @example
     * // Count the number of Experiences
     * const count = await prisma.experience.count({
     *   where: {
     *     // ... the filter for the Experiences we want to count
     *   }
     * })
    **/
    count<T extends ExperienceCountArgs>(
      args?: Subset<T, ExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperienceAggregateArgs>(args: Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

    /**
     * Group by Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperienceGroupByArgs['orderBy'] }
        : { orderBy?: ExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Experience model
   */
  readonly fields: ExperienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contractTypeJob<T extends Experience$contractTypeJobArgs<ExtArgs> = {}>(args?: Subset<T, Experience$contractTypeJobArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Experience model
   */ 
  interface ExperienceFieldRefs {
    readonly id: FieldRef<"Experience", 'String'>
    readonly company: FieldRef<"Experience", 'String'>
    readonly location: FieldRef<"Experience", 'String'>
    readonly currently: FieldRef<"Experience", 'Boolean'>
    readonly startDate: FieldRef<"Experience", 'DateTime'>
    readonly endDate: FieldRef<"Experience", 'DateTime'>
    readonly description: FieldRef<"Experience", 'String'>
    readonly contractTypeId: FieldRef<"Experience", 'String'>
    readonly cdId: FieldRef<"Experience", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Experience findUnique
   */
  export type ExperienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience findUniqueOrThrow
   */
  export type ExperienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience findFirst
   */
  export type ExperienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience findFirstOrThrow
   */
  export type ExperienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience findMany
   */
  export type ExperienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experiences to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * Experience create
   */
  export type ExperienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to create a Experience.
     */
    data: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
  }

  /**
   * Experience createMany
   */
  export type ExperienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Experiences.
     */
    data: ExperienceCreateManyInput | ExperienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Experience createManyAndReturn
   */
  export type ExperienceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Experiences.
     */
    data: ExperienceCreateManyInput | ExperienceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Experience update
   */
  export type ExperienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to update a Experience.
     */
    data: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
    /**
     * Choose, which Experience to update.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience updateMany
   */
  export type ExperienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Experiences.
     */
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Experiences to update
     */
    where?: ExperienceWhereInput
  }

  /**
   * Experience upsert
   */
  export type ExperienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The filter to search for the Experience to update in case it exists.
     */
    where: ExperienceWhereUniqueInput
    /**
     * In case the Experience found by the `where` argument doesn't exist, create a new Experience with this data.
     */
    create: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
    /**
     * In case the Experience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
  }

  /**
   * Experience delete
   */
  export type ExperienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter which Experience to delete.
     */
    where: ExperienceWhereUniqueInput
  }

  /**
   * Experience deleteMany
   */
  export type ExperienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiences to delete
     */
    where?: ExperienceWhereInput
  }

  /**
   * Experience.contractTypeJob
   */
  export type Experience$contractTypeJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    where?: ContractTypeJobWhereInput
  }

  /**
   * Experience without action
   */
  export type ExperienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
  }


  /**
   * Model Languages
   */

  export type AggregateLanguages = {
    _count: LanguagesCountAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  export type LanguagesMinAggregateOutputType = {
    id: string | null
    language: string | null
    level: $Enums.LanguageLevel | null
    cdId: string | null
  }

  export type LanguagesMaxAggregateOutputType = {
    id: string | null
    language: string | null
    level: $Enums.LanguageLevel | null
    cdId: string | null
  }

  export type LanguagesCountAggregateOutputType = {
    id: number
    language: number
    level: number
    cdId: number
    _all: number
  }


  export type LanguagesMinAggregateInputType = {
    id?: true
    language?: true
    level?: true
    cdId?: true
  }

  export type LanguagesMaxAggregateInputType = {
    id?: true
    language?: true
    level?: true
    cdId?: true
  }

  export type LanguagesCountAggregateInputType = {
    id?: true
    language?: true
    level?: true
    cdId?: true
    _all?: true
  }

  export type LanguagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to aggregate.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguagesMaxAggregateInputType
  }

  export type GetLanguagesAggregateType<T extends LanguagesAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguages[P]>
      : GetScalarType<T[P], AggregateLanguages[P]>
  }




  export type LanguagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesWhereInput
    orderBy?: LanguagesOrderByWithAggregationInput | LanguagesOrderByWithAggregationInput[]
    by: LanguagesScalarFieldEnum[] | LanguagesScalarFieldEnum
    having?: LanguagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguagesCountAggregateInputType | true
    _min?: LanguagesMinAggregateInputType
    _max?: LanguagesMaxAggregateInputType
  }

  export type LanguagesGroupByOutputType = {
    id: string
    language: string
    level: $Enums.LanguageLevel
    cdId: string
    _count: LanguagesCountAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  type GetLanguagesGroupByPayload<T extends LanguagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
            : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
        }
      >
    >


  export type LanguagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    language?: boolean
    level?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languages"]>

  export type LanguagesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    language?: boolean
    level?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languages"]>

  export type LanguagesSelectScalar = {
    id?: boolean
    language?: boolean
    level?: boolean
    cdId?: boolean
  }

  export type LanguagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type LanguagesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $LanguagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Languages"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      language: string
      level: $Enums.LanguageLevel
      cdId: string
    }, ExtArgs["result"]["languages"]>
    composites: {}
  }

  type LanguagesGetPayload<S extends boolean | null | undefined | LanguagesDefaultArgs> = $Result.GetResult<Prisma.$LanguagesPayload, S>

  type LanguagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LanguagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LanguagesCountAggregateInputType | true
    }

  export interface LanguagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Languages'], meta: { name: 'Languages' } }
    /**
     * Find zero or one Languages that matches the filter.
     * @param {LanguagesFindUniqueArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguagesFindUniqueArgs>(args: SelectSubset<T, LanguagesFindUniqueArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Languages that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LanguagesFindUniqueOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguagesFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguagesFindFirstArgs>(args?: SelectSubset<T, LanguagesFindFirstArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Languages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguagesFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.languages.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.languages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languagesWithIdOnly = await prisma.languages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguagesFindManyArgs>(args?: SelectSubset<T, LanguagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Languages.
     * @param {LanguagesCreateArgs} args - Arguments to create a Languages.
     * @example
     * // Create one Languages
     * const Languages = await prisma.languages.create({
     *   data: {
     *     // ... data to create a Languages
     *   }
     * })
     * 
     */
    create<T extends LanguagesCreateArgs>(args: SelectSubset<T, LanguagesCreateArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Languages.
     * @param {LanguagesCreateManyArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const languages = await prisma.languages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguagesCreateManyArgs>(args?: SelectSubset<T, LanguagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Languages and returns the data saved in the database.
     * @param {LanguagesCreateManyAndReturnArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const languages = await prisma.languages.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Languages and only return the `id`
     * const languagesWithIdOnly = await prisma.languages.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguagesCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Languages.
     * @param {LanguagesDeleteArgs} args - Arguments to delete one Languages.
     * @example
     * // Delete one Languages
     * const Languages = await prisma.languages.delete({
     *   where: {
     *     // ... filter to delete one Languages
     *   }
     * })
     * 
     */
    delete<T extends LanguagesDeleteArgs>(args: SelectSubset<T, LanguagesDeleteArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Languages.
     * @param {LanguagesUpdateArgs} args - Arguments to update one Languages.
     * @example
     * // Update one Languages
     * const languages = await prisma.languages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguagesUpdateArgs>(args: SelectSubset<T, LanguagesUpdateArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Languages.
     * @param {LanguagesDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.languages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguagesDeleteManyArgs>(args?: SelectSubset<T, LanguagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const languages = await prisma.languages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguagesUpdateManyArgs>(args: SelectSubset<T, LanguagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Languages.
     * @param {LanguagesUpsertArgs} args - Arguments to update or create a Languages.
     * @example
     * // Update or create a Languages
     * const languages = await prisma.languages.upsert({
     *   create: {
     *     // ... data to create a Languages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Languages we want to update
     *   }
     * })
     */
    upsert<T extends LanguagesUpsertArgs>(args: SelectSubset<T, LanguagesUpsertArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.languages.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguagesCountArgs>(
      args?: Subset<T, LanguagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguagesAggregateArgs>(args: Subset<T, LanguagesAggregateArgs>): Prisma.PrismaPromise<GetLanguagesAggregateType<T>>

    /**
     * Group by Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguagesGroupByArgs['orderBy'] }
        : { orderBy?: LanguagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Languages model
   */
  readonly fields: LanguagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Languages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Languages model
   */ 
  interface LanguagesFieldRefs {
    readonly id: FieldRef<"Languages", 'String'>
    readonly language: FieldRef<"Languages", 'String'>
    readonly level: FieldRef<"Languages", 'LanguageLevel'>
    readonly cdId: FieldRef<"Languages", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Languages findUnique
   */
  export type LanguagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }

  /**
   * Languages findUniqueOrThrow
   */
  export type LanguagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }

  /**
   * Languages findFirst
   */
  export type LanguagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }

  /**
   * Languages findFirstOrThrow
   */
  export type LanguagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }

  /**
   * Languages findMany
   */
  export type LanguagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }

  /**
   * Languages create
   */
  export type LanguagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Languages.
     */
    data: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
  }

  /**
   * Languages createMany
   */
  export type LanguagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguagesCreateManyInput | LanguagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Languages createManyAndReturn
   */
  export type LanguagesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Languages.
     */
    data: LanguagesCreateManyInput | LanguagesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Languages update
   */
  export type LanguagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Languages.
     */
    data: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
    /**
     * Choose, which Languages to update.
     */
    where: LanguagesWhereUniqueInput
  }

  /**
   * Languages updateMany
   */
  export type LanguagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguagesUpdateManyMutationInput, LanguagesUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguagesWhereInput
  }

  /**
   * Languages upsert
   */
  export type LanguagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Languages to update in case it exists.
     */
    where: LanguagesWhereUniqueInput
    /**
     * In case the Languages found by the `where` argument doesn't exist, create a new Languages with this data.
     */
    create: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
    /**
     * In case the Languages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
  }

  /**
   * Languages delete
   */
  export type LanguagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter which Languages to delete.
     */
    where: LanguagesWhereUniqueInput
  }

  /**
   * Languages deleteMany
   */
  export type LanguagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguagesWhereInput
  }

  /**
   * Languages without action
   */
  export type LanguagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguagesInclude<ExtArgs> | null
  }


  /**
   * Model Courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesMinAggregateOutputType = {
    id: string | null
    course: string | null
    institution: string | null
    grade: string | null
    startdate: Date | null
    enddate: Date | null
    cdId: string | null
  }

  export type CoursesMaxAggregateOutputType = {
    id: string | null
    course: string | null
    institution: string | null
    grade: string | null
    startdate: Date | null
    enddate: Date | null
    cdId: string | null
  }

  export type CoursesCountAggregateOutputType = {
    id: number
    course: number
    institution: number
    grade: number
    startdate: number
    enddate: number
    cdId: number
    _all: number
  }


  export type CoursesMinAggregateInputType = {
    id?: true
    course?: true
    institution?: true
    grade?: true
    startdate?: true
    enddate?: true
    cdId?: true
  }

  export type CoursesMaxAggregateInputType = {
    id?: true
    course?: true
    institution?: true
    grade?: true
    startdate?: true
    enddate?: true
    cdId?: true
  }

  export type CoursesCountAggregateInputType = {
    id?: true
    course?: true
    institution?: true
    grade?: true
    startdate?: true
    enddate?: true
    cdId?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to aggregate.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type CoursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithAggregationInput | CoursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: CoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    id: string
    course: string
    institution: string
    grade: string | null
    startdate: Date
    enddate: Date
    cdId: string
    _count: CoursesCountAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends CoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type CoursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course?: boolean
    institution?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course?: boolean
    institution?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectScalar = {
    id?: boolean
    course?: boolean
    institution?: boolean
    grade?: boolean
    startdate?: boolean
    enddate?: boolean
    cdId?: boolean
  }

  export type CoursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type CoursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $CoursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Courses"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      course: string
      institution: string
      grade: string | null
      startdate: Date
      enddate: Date
      cdId: string
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type CoursesGetPayload<S extends boolean | null | undefined | CoursesDefaultArgs> = $Result.GetResult<Prisma.$CoursesPayload, S>

  type CoursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoursesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface CoursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Courses'], meta: { name: 'Courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {CoursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursesFindUniqueArgs>(args: SelectSubset<T, CoursesFindUniqueArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursesFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursesFindFirstArgs>(args?: SelectSubset<T, CoursesFindFirstArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursesFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesWithIdOnly = await prisma.courses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoursesFindManyArgs>(args?: SelectSubset<T, CoursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Courses.
     * @param {CoursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends CoursesCreateArgs>(args: SelectSubset<T, CoursesCreateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CoursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursesCreateManyArgs>(args?: SelectSubset<T, CoursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CoursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursesCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Courses.
     * @param {CoursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends CoursesDeleteArgs>(args: SelectSubset<T, CoursesDeleteArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Courses.
     * @param {CoursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursesUpdateArgs>(args: SelectSubset<T, CoursesUpdateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CoursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursesDeleteManyArgs>(args?: SelectSubset<T, CoursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursesUpdateManyArgs>(args: SelectSubset<T, CoursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courses.
     * @param {CoursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends CoursesUpsertArgs>(args: SelectSubset<T, CoursesUpsertArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CoursesCountArgs>(
      args?: Subset<T, CoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursesGroupByArgs['orderBy'] }
        : { orderBy?: CoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Courses model
   */
  readonly fields: CoursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Courses model
   */ 
  interface CoursesFieldRefs {
    readonly id: FieldRef<"Courses", 'String'>
    readonly course: FieldRef<"Courses", 'String'>
    readonly institution: FieldRef<"Courses", 'String'>
    readonly grade: FieldRef<"Courses", 'String'>
    readonly startdate: FieldRef<"Courses", 'DateTime'>
    readonly enddate: FieldRef<"Courses", 'DateTime'>
    readonly cdId: FieldRef<"Courses", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Courses findUnique
   */
  export type CoursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findUniqueOrThrow
   */
  export type CoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findFirst
   */
  export type CoursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findFirstOrThrow
   */
  export type CoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findMany
   */
  export type CoursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses create
   */
  export type CoursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a Courses.
     */
    data: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
  }

  /**
   * Courses createMany
   */
  export type CoursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses createManyAndReturn
   */
  export type CoursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Courses update
   */
  export type CoursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a Courses.
     */
    data: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
    /**
     * Choose, which Courses to update.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses updateMany
   */
  export type CoursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses upsert
   */
  export type CoursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the Courses to update in case it exists.
     */
    where: CoursesWhereUniqueInput
    /**
     * In case the Courses found by the `where` argument doesn't exist, create a new Courses with this data.
     */
    create: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
    /**
     * In case the Courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
  }

  /**
   * Courses delete
   */
  export type CoursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter which Courses to delete.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses deleteMany
   */
  export type CoursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses without action
   */
  export type CoursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
  }


  /**
   * Model Hobbies
   */

  export type AggregateHobbies = {
    _count: HobbiesCountAggregateOutputType | null
    _min: HobbiesMinAggregateOutputType | null
    _max: HobbiesMaxAggregateOutputType | null
  }

  export type HobbiesMinAggregateOutputType = {
    id: string | null
    hobbie: string | null
    cdId: string | null
  }

  export type HobbiesMaxAggregateOutputType = {
    id: string | null
    hobbie: string | null
    cdId: string | null
  }

  export type HobbiesCountAggregateOutputType = {
    id: number
    hobbie: number
    cdId: number
    _all: number
  }


  export type HobbiesMinAggregateInputType = {
    id?: true
    hobbie?: true
    cdId?: true
  }

  export type HobbiesMaxAggregateInputType = {
    id?: true
    hobbie?: true
    cdId?: true
  }

  export type HobbiesCountAggregateInputType = {
    id?: true
    hobbie?: true
    cdId?: true
    _all?: true
  }

  export type HobbiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hobbies to aggregate.
     */
    where?: HobbiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hobbies to fetch.
     */
    orderBy?: HobbiesOrderByWithRelationInput | HobbiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HobbiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hobbies
    **/
    _count?: true | HobbiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HobbiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HobbiesMaxAggregateInputType
  }

  export type GetHobbiesAggregateType<T extends HobbiesAggregateArgs> = {
        [P in keyof T & keyof AggregateHobbies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHobbies[P]>
      : GetScalarType<T[P], AggregateHobbies[P]>
  }




  export type HobbiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HobbiesWhereInput
    orderBy?: HobbiesOrderByWithAggregationInput | HobbiesOrderByWithAggregationInput[]
    by: HobbiesScalarFieldEnum[] | HobbiesScalarFieldEnum
    having?: HobbiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HobbiesCountAggregateInputType | true
    _min?: HobbiesMinAggregateInputType
    _max?: HobbiesMaxAggregateInputType
  }

  export type HobbiesGroupByOutputType = {
    id: string
    hobbie: string
    cdId: string
    _count: HobbiesCountAggregateOutputType | null
    _min: HobbiesMinAggregateOutputType | null
    _max: HobbiesMaxAggregateOutputType | null
  }

  type GetHobbiesGroupByPayload<T extends HobbiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HobbiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HobbiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HobbiesGroupByOutputType[P]>
            : GetScalarType<T[P], HobbiesGroupByOutputType[P]>
        }
      >
    >


  export type HobbiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hobbie?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hobbies"]>

  export type HobbiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hobbie?: boolean
    cdId?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hobbies"]>

  export type HobbiesSelectScalar = {
    id?: boolean
    hobbie?: boolean
    cdId?: boolean
  }

  export type HobbiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }
  export type HobbiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
  }

  export type $HobbiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hobbies"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hobbie: string
      cdId: string
    }, ExtArgs["result"]["hobbies"]>
    composites: {}
  }

  type HobbiesGetPayload<S extends boolean | null | undefined | HobbiesDefaultArgs> = $Result.GetResult<Prisma.$HobbiesPayload, S>

  type HobbiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HobbiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HobbiesCountAggregateInputType | true
    }

  export interface HobbiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hobbies'], meta: { name: 'Hobbies' } }
    /**
     * Find zero or one Hobbies that matches the filter.
     * @param {HobbiesFindUniqueArgs} args - Arguments to find a Hobbies
     * @example
     * // Get one Hobbies
     * const hobbies = await prisma.hobbies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HobbiesFindUniqueArgs>(args: SelectSubset<T, HobbiesFindUniqueArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Hobbies that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HobbiesFindUniqueOrThrowArgs} args - Arguments to find a Hobbies
     * @example
     * // Get one Hobbies
     * const hobbies = await prisma.hobbies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HobbiesFindUniqueOrThrowArgs>(args: SelectSubset<T, HobbiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Hobbies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesFindFirstArgs} args - Arguments to find a Hobbies
     * @example
     * // Get one Hobbies
     * const hobbies = await prisma.hobbies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HobbiesFindFirstArgs>(args?: SelectSubset<T, HobbiesFindFirstArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Hobbies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesFindFirstOrThrowArgs} args - Arguments to find a Hobbies
     * @example
     * // Get one Hobbies
     * const hobbies = await prisma.hobbies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HobbiesFindFirstOrThrowArgs>(args?: SelectSubset<T, HobbiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Hobbies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hobbies
     * const hobbies = await prisma.hobbies.findMany()
     * 
     * // Get first 10 Hobbies
     * const hobbies = await prisma.hobbies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hobbiesWithIdOnly = await prisma.hobbies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HobbiesFindManyArgs>(args?: SelectSubset<T, HobbiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Hobbies.
     * @param {HobbiesCreateArgs} args - Arguments to create a Hobbies.
     * @example
     * // Create one Hobbies
     * const Hobbies = await prisma.hobbies.create({
     *   data: {
     *     // ... data to create a Hobbies
     *   }
     * })
     * 
     */
    create<T extends HobbiesCreateArgs>(args: SelectSubset<T, HobbiesCreateArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Hobbies.
     * @param {HobbiesCreateManyArgs} args - Arguments to create many Hobbies.
     * @example
     * // Create many Hobbies
     * const hobbies = await prisma.hobbies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HobbiesCreateManyArgs>(args?: SelectSubset<T, HobbiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hobbies and returns the data saved in the database.
     * @param {HobbiesCreateManyAndReturnArgs} args - Arguments to create many Hobbies.
     * @example
     * // Create many Hobbies
     * const hobbies = await prisma.hobbies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hobbies and only return the `id`
     * const hobbiesWithIdOnly = await prisma.hobbies.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HobbiesCreateManyAndReturnArgs>(args?: SelectSubset<T, HobbiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Hobbies.
     * @param {HobbiesDeleteArgs} args - Arguments to delete one Hobbies.
     * @example
     * // Delete one Hobbies
     * const Hobbies = await prisma.hobbies.delete({
     *   where: {
     *     // ... filter to delete one Hobbies
     *   }
     * })
     * 
     */
    delete<T extends HobbiesDeleteArgs>(args: SelectSubset<T, HobbiesDeleteArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Hobbies.
     * @param {HobbiesUpdateArgs} args - Arguments to update one Hobbies.
     * @example
     * // Update one Hobbies
     * const hobbies = await prisma.hobbies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HobbiesUpdateArgs>(args: SelectSubset<T, HobbiesUpdateArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Hobbies.
     * @param {HobbiesDeleteManyArgs} args - Arguments to filter Hobbies to delete.
     * @example
     * // Delete a few Hobbies
     * const { count } = await prisma.hobbies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HobbiesDeleteManyArgs>(args?: SelectSubset<T, HobbiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hobbies
     * const hobbies = await prisma.hobbies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HobbiesUpdateManyArgs>(args: SelectSubset<T, HobbiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hobbies.
     * @param {HobbiesUpsertArgs} args - Arguments to update or create a Hobbies.
     * @example
     * // Update or create a Hobbies
     * const hobbies = await prisma.hobbies.upsert({
     *   create: {
     *     // ... data to create a Hobbies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hobbies we want to update
     *   }
     * })
     */
    upsert<T extends HobbiesUpsertArgs>(args: SelectSubset<T, HobbiesUpsertArgs<ExtArgs>>): Prisma__HobbiesClient<$Result.GetResult<Prisma.$HobbiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Hobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesCountArgs} args - Arguments to filter Hobbies to count.
     * @example
     * // Count the number of Hobbies
     * const count = await prisma.hobbies.count({
     *   where: {
     *     // ... the filter for the Hobbies we want to count
     *   }
     * })
    **/
    count<T extends HobbiesCountArgs>(
      args?: Subset<T, HobbiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HobbiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HobbiesAggregateArgs>(args: Subset<T, HobbiesAggregateArgs>): Prisma.PrismaPromise<GetHobbiesAggregateType<T>>

    /**
     * Group by Hobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HobbiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HobbiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HobbiesGroupByArgs['orderBy'] }
        : { orderBy?: HobbiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HobbiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHobbiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hobbies model
   */
  readonly fields: HobbiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hobbies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HobbiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hobbies model
   */ 
  interface HobbiesFieldRefs {
    readonly id: FieldRef<"Hobbies", 'String'>
    readonly hobbie: FieldRef<"Hobbies", 'String'>
    readonly cdId: FieldRef<"Hobbies", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Hobbies findUnique
   */
  export type HobbiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter, which Hobbies to fetch.
     */
    where: HobbiesWhereUniqueInput
  }

  /**
   * Hobbies findUniqueOrThrow
   */
  export type HobbiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter, which Hobbies to fetch.
     */
    where: HobbiesWhereUniqueInput
  }

  /**
   * Hobbies findFirst
   */
  export type HobbiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter, which Hobbies to fetch.
     */
    where?: HobbiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hobbies to fetch.
     */
    orderBy?: HobbiesOrderByWithRelationInput | HobbiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hobbies.
     */
    cursor?: HobbiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hobbies.
     */
    distinct?: HobbiesScalarFieldEnum | HobbiesScalarFieldEnum[]
  }

  /**
   * Hobbies findFirstOrThrow
   */
  export type HobbiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter, which Hobbies to fetch.
     */
    where?: HobbiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hobbies to fetch.
     */
    orderBy?: HobbiesOrderByWithRelationInput | HobbiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hobbies.
     */
    cursor?: HobbiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hobbies.
     */
    distinct?: HobbiesScalarFieldEnum | HobbiesScalarFieldEnum[]
  }

  /**
   * Hobbies findMany
   */
  export type HobbiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter, which Hobbies to fetch.
     */
    where?: HobbiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hobbies to fetch.
     */
    orderBy?: HobbiesOrderByWithRelationInput | HobbiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hobbies.
     */
    cursor?: HobbiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hobbies.
     */
    skip?: number
    distinct?: HobbiesScalarFieldEnum | HobbiesScalarFieldEnum[]
  }

  /**
   * Hobbies create
   */
  export type HobbiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Hobbies.
     */
    data: XOR<HobbiesCreateInput, HobbiesUncheckedCreateInput>
  }

  /**
   * Hobbies createMany
   */
  export type HobbiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hobbies.
     */
    data: HobbiesCreateManyInput | HobbiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hobbies createManyAndReturn
   */
  export type HobbiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Hobbies.
     */
    data: HobbiesCreateManyInput | HobbiesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Hobbies update
   */
  export type HobbiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Hobbies.
     */
    data: XOR<HobbiesUpdateInput, HobbiesUncheckedUpdateInput>
    /**
     * Choose, which Hobbies to update.
     */
    where: HobbiesWhereUniqueInput
  }

  /**
   * Hobbies updateMany
   */
  export type HobbiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hobbies.
     */
    data: XOR<HobbiesUpdateManyMutationInput, HobbiesUncheckedUpdateManyInput>
    /**
     * Filter which Hobbies to update
     */
    where?: HobbiesWhereInput
  }

  /**
   * Hobbies upsert
   */
  export type HobbiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Hobbies to update in case it exists.
     */
    where: HobbiesWhereUniqueInput
    /**
     * In case the Hobbies found by the `where` argument doesn't exist, create a new Hobbies with this data.
     */
    create: XOR<HobbiesCreateInput, HobbiesUncheckedCreateInput>
    /**
     * In case the Hobbies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HobbiesUpdateInput, HobbiesUncheckedUpdateInput>
  }

  /**
   * Hobbies delete
   */
  export type HobbiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
    /**
     * Filter which Hobbies to delete.
     */
    where: HobbiesWhereUniqueInput
  }

  /**
   * Hobbies deleteMany
   */
  export type HobbiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hobbies to delete
     */
    where?: HobbiesWhereInput
  }

  /**
   * Hobbies without action
   */
  export type HobbiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hobbies
     */
    select?: HobbiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HobbiesInclude<ExtArgs> | null
  }


  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    rating: number | null
  }

  export type RatingSumAggregateOutputType = {
    rating: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    reviewerId: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    reviewerId: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    userId: number
    reviewerId: number
    rating: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    userId?: true
    reviewerId?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    userId?: true
    reviewerId?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    userId?: true
    reviewerId?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    userId: string
    reviewerId: string
    rating: number
    createdAt: Date
    updatedAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reviewerId?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reviewerId?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    userId?: boolean
    reviewerId?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      reviewerId: string
      rating: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingFindUniqueArgs>(args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingFindFirstArgs>(args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingFindManyArgs>(args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends RatingCreateArgs>(args: SelectSubset<T, RatingCreateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCreateManyArgs>(args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {RatingCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends RatingDeleteArgs>(args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingUpdateArgs>(args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingDeleteManyArgs>(args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingUpdateManyArgs>(args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends RatingUpsertArgs>(args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'String'>
    readonly userId: FieldRef<"Rating", 'String'>
    readonly reviewerId: FieldRef<"Rating", 'String'>
    readonly rating: FieldRef<"Rating", 'Int'>
    readonly createdAt: FieldRef<"Rating", 'DateTime'>
    readonly updatedAt: FieldRef<"Rating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }

  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rating createManyAndReturn
   */
  export type RatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }

  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }

  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }

  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
  }


  /**
   * Model AgencyData
   */

  export type AggregateAgencyData = {
    _count: AgencyDataCountAggregateOutputType | null
    _min: AgencyDataMinAggregateOutputType | null
    _max: AgencyDataMaxAggregateOutputType | null
  }

  export type AgencyDataMinAggregateOutputType = {
    id: string | null
    agency_name: string | null
    slug: string | null
    address: string | null
    phone: string | null
    p_iva_c_f: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    about: string | null
  }

  export type AgencyDataMaxAggregateOutputType = {
    id: string | null
    agency_name: string | null
    slug: string | null
    address: string | null
    phone: string | null
    p_iva_c_f: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    about: string | null
  }

  export type AgencyDataCountAggregateOutputType = {
    id: number
    agency_name: number
    slug: number
    address: number
    phone: number
    p_iva_c_f: number
    createdAt: number
    updatedAt: number
    userId: number
    about: number
    logo: number
    _all: number
  }


  export type AgencyDataMinAggregateInputType = {
    id?: true
    agency_name?: true
    slug?: true
    address?: true
    phone?: true
    p_iva_c_f?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    about?: true
  }

  export type AgencyDataMaxAggregateInputType = {
    id?: true
    agency_name?: true
    slug?: true
    address?: true
    phone?: true
    p_iva_c_f?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    about?: true
  }

  export type AgencyDataCountAggregateInputType = {
    id?: true
    agency_name?: true
    slug?: true
    address?: true
    phone?: true
    p_iva_c_f?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    about?: true
    logo?: true
    _all?: true
  }

  export type AgencyDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencyData to aggregate.
     */
    where?: AgencyDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyData to fetch.
     */
    orderBy?: AgencyDataOrderByWithRelationInput | AgencyDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencyDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgencyData
    **/
    _count?: true | AgencyDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencyDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencyDataMaxAggregateInputType
  }

  export type GetAgencyDataAggregateType<T extends AgencyDataAggregateArgs> = {
        [P in keyof T & keyof AggregateAgencyData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgencyData[P]>
      : GetScalarType<T[P], AggregateAgencyData[P]>
  }




  export type AgencyDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgencyDataWhereInput
    orderBy?: AgencyDataOrderByWithAggregationInput | AgencyDataOrderByWithAggregationInput[]
    by: AgencyDataScalarFieldEnum[] | AgencyDataScalarFieldEnum
    having?: AgencyDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencyDataCountAggregateInputType | true
    _min?: AgencyDataMinAggregateInputType
    _max?: AgencyDataMaxAggregateInputType
  }

  export type AgencyDataGroupByOutputType = {
    id: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt: Date
    updatedAt: Date
    userId: string
    about: string
    logo: string[]
    _count: AgencyDataCountAggregateOutputType | null
    _min: AgencyDataMinAggregateOutputType | null
    _max: AgencyDataMaxAggregateOutputType | null
  }

  type GetAgencyDataGroupByPayload<T extends AgencyDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgencyDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencyDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencyDataGroupByOutputType[P]>
            : GetScalarType<T[P], AgencyDataGroupByOutputType[P]>
        }
      >
    >


  export type AgencyDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agency_name?: boolean
    slug?: boolean
    address?: boolean
    phone?: boolean
    p_iva_c_f?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    about?: boolean
    logo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | AgencyData$branchArgs<ExtArgs>
    jobOffers?: boolean | AgencyData$jobOffersArgs<ExtArgs>
    _count?: boolean | AgencyDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agencyData"]>

  export type AgencyDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agency_name?: boolean
    slug?: boolean
    address?: boolean
    phone?: boolean
    p_iva_c_f?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    about?: boolean
    logo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agencyData"]>

  export type AgencyDataSelectScalar = {
    id?: boolean
    agency_name?: boolean
    slug?: boolean
    address?: boolean
    phone?: boolean
    p_iva_c_f?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    about?: boolean
    logo?: boolean
  }

  export type AgencyDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | AgencyData$branchArgs<ExtArgs>
    jobOffers?: boolean | AgencyData$jobOffersArgs<ExtArgs>
    _count?: boolean | AgencyDataCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgencyDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AgencyDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgencyData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>[]
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agency_name: string
      slug: string
      address: string
      phone: string
      p_iva_c_f: string
      createdAt: Date
      updatedAt: Date
      userId: string
      about: string
      logo: string[]
    }, ExtArgs["result"]["agencyData"]>
    composites: {}
  }

  type AgencyDataGetPayload<S extends boolean | null | undefined | AgencyDataDefaultArgs> = $Result.GetResult<Prisma.$AgencyDataPayload, S>

  type AgencyDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgencyDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgencyDataCountAggregateInputType | true
    }

  export interface AgencyDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgencyData'], meta: { name: 'AgencyData' } }
    /**
     * Find zero or one AgencyData that matches the filter.
     * @param {AgencyDataFindUniqueArgs} args - Arguments to find a AgencyData
     * @example
     * // Get one AgencyData
     * const agencyData = await prisma.agencyData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgencyDataFindUniqueArgs>(args: SelectSubset<T, AgencyDataFindUniqueArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgencyData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgencyDataFindUniqueOrThrowArgs} args - Arguments to find a AgencyData
     * @example
     * // Get one AgencyData
     * const agencyData = await prisma.agencyData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgencyDataFindUniqueOrThrowArgs>(args: SelectSubset<T, AgencyDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgencyData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataFindFirstArgs} args - Arguments to find a AgencyData
     * @example
     * // Get one AgencyData
     * const agencyData = await prisma.agencyData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgencyDataFindFirstArgs>(args?: SelectSubset<T, AgencyDataFindFirstArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgencyData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataFindFirstOrThrowArgs} args - Arguments to find a AgencyData
     * @example
     * // Get one AgencyData
     * const agencyData = await prisma.agencyData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgencyDataFindFirstOrThrowArgs>(args?: SelectSubset<T, AgencyDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgencyData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgencyData
     * const agencyData = await prisma.agencyData.findMany()
     * 
     * // Get first 10 AgencyData
     * const agencyData = await prisma.agencyData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyDataWithIdOnly = await prisma.agencyData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgencyDataFindManyArgs>(args?: SelectSubset<T, AgencyDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgencyData.
     * @param {AgencyDataCreateArgs} args - Arguments to create a AgencyData.
     * @example
     * // Create one AgencyData
     * const AgencyData = await prisma.agencyData.create({
     *   data: {
     *     // ... data to create a AgencyData
     *   }
     * })
     * 
     */
    create<T extends AgencyDataCreateArgs>(args: SelectSubset<T, AgencyDataCreateArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgencyData.
     * @param {AgencyDataCreateManyArgs} args - Arguments to create many AgencyData.
     * @example
     * // Create many AgencyData
     * const agencyData = await prisma.agencyData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgencyDataCreateManyArgs>(args?: SelectSubset<T, AgencyDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgencyData and returns the data saved in the database.
     * @param {AgencyDataCreateManyAndReturnArgs} args - Arguments to create many AgencyData.
     * @example
     * // Create many AgencyData
     * const agencyData = await prisma.agencyData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgencyData and only return the `id`
     * const agencyDataWithIdOnly = await prisma.agencyData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgencyDataCreateManyAndReturnArgs>(args?: SelectSubset<T, AgencyDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AgencyData.
     * @param {AgencyDataDeleteArgs} args - Arguments to delete one AgencyData.
     * @example
     * // Delete one AgencyData
     * const AgencyData = await prisma.agencyData.delete({
     *   where: {
     *     // ... filter to delete one AgencyData
     *   }
     * })
     * 
     */
    delete<T extends AgencyDataDeleteArgs>(args: SelectSubset<T, AgencyDataDeleteArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgencyData.
     * @param {AgencyDataUpdateArgs} args - Arguments to update one AgencyData.
     * @example
     * // Update one AgencyData
     * const agencyData = await prisma.agencyData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgencyDataUpdateArgs>(args: SelectSubset<T, AgencyDataUpdateArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgencyData.
     * @param {AgencyDataDeleteManyArgs} args - Arguments to filter AgencyData to delete.
     * @example
     * // Delete a few AgencyData
     * const { count } = await prisma.agencyData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgencyDataDeleteManyArgs>(args?: SelectSubset<T, AgencyDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgencyData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgencyData
     * const agencyData = await prisma.agencyData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgencyDataUpdateManyArgs>(args: SelectSubset<T, AgencyDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgencyData.
     * @param {AgencyDataUpsertArgs} args - Arguments to update or create a AgencyData.
     * @example
     * // Update or create a AgencyData
     * const agencyData = await prisma.agencyData.upsert({
     *   create: {
     *     // ... data to create a AgencyData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgencyData we want to update
     *   }
     * })
     */
    upsert<T extends AgencyDataUpsertArgs>(args: SelectSubset<T, AgencyDataUpsertArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgencyData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataCountArgs} args - Arguments to filter AgencyData to count.
     * @example
     * // Count the number of AgencyData
     * const count = await prisma.agencyData.count({
     *   where: {
     *     // ... the filter for the AgencyData we want to count
     *   }
     * })
    **/
    count<T extends AgencyDataCountArgs>(
      args?: Subset<T, AgencyDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencyDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgencyData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencyDataAggregateArgs>(args: Subset<T, AgencyDataAggregateArgs>): Prisma.PrismaPromise<GetAgencyDataAggregateType<T>>

    /**
     * Group by AgencyData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencyDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencyDataGroupByArgs['orderBy'] }
        : { orderBy?: AgencyDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencyDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencyDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgencyData model
   */
  readonly fields: AgencyDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgencyData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgencyDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    branch<T extends AgencyData$branchArgs<ExtArgs> = {}>(args?: Subset<T, AgencyData$branchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany"> | Null>
    jobOffers<T extends AgencyData$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, AgencyData$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgencyData model
   */ 
  interface AgencyDataFieldRefs {
    readonly id: FieldRef<"AgencyData", 'String'>
    readonly agency_name: FieldRef<"AgencyData", 'String'>
    readonly slug: FieldRef<"AgencyData", 'String'>
    readonly address: FieldRef<"AgencyData", 'String'>
    readonly phone: FieldRef<"AgencyData", 'String'>
    readonly p_iva_c_f: FieldRef<"AgencyData", 'String'>
    readonly createdAt: FieldRef<"AgencyData", 'DateTime'>
    readonly updatedAt: FieldRef<"AgencyData", 'DateTime'>
    readonly userId: FieldRef<"AgencyData", 'String'>
    readonly about: FieldRef<"AgencyData", 'String'>
    readonly logo: FieldRef<"AgencyData", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * AgencyData findUnique
   */
  export type AgencyDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter, which AgencyData to fetch.
     */
    where: AgencyDataWhereUniqueInput
  }

  /**
   * AgencyData findUniqueOrThrow
   */
  export type AgencyDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter, which AgencyData to fetch.
     */
    where: AgencyDataWhereUniqueInput
  }

  /**
   * AgencyData findFirst
   */
  export type AgencyDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter, which AgencyData to fetch.
     */
    where?: AgencyDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyData to fetch.
     */
    orderBy?: AgencyDataOrderByWithRelationInput | AgencyDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencyData.
     */
    cursor?: AgencyDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencyData.
     */
    distinct?: AgencyDataScalarFieldEnum | AgencyDataScalarFieldEnum[]
  }

  /**
   * AgencyData findFirstOrThrow
   */
  export type AgencyDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter, which AgencyData to fetch.
     */
    where?: AgencyDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyData to fetch.
     */
    orderBy?: AgencyDataOrderByWithRelationInput | AgencyDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencyData.
     */
    cursor?: AgencyDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencyData.
     */
    distinct?: AgencyDataScalarFieldEnum | AgencyDataScalarFieldEnum[]
  }

  /**
   * AgencyData findMany
   */
  export type AgencyDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter, which AgencyData to fetch.
     */
    where?: AgencyDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyData to fetch.
     */
    orderBy?: AgencyDataOrderByWithRelationInput | AgencyDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgencyData.
     */
    cursor?: AgencyDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyData.
     */
    skip?: number
    distinct?: AgencyDataScalarFieldEnum | AgencyDataScalarFieldEnum[]
  }

  /**
   * AgencyData create
   */
  export type AgencyDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * The data needed to create a AgencyData.
     */
    data: XOR<AgencyDataCreateInput, AgencyDataUncheckedCreateInput>
  }

  /**
   * AgencyData createMany
   */
  export type AgencyDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgencyData.
     */
    data: AgencyDataCreateManyInput | AgencyDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgencyData createManyAndReturn
   */
  export type AgencyDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AgencyData.
     */
    data: AgencyDataCreateManyInput | AgencyDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgencyData update
   */
  export type AgencyDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * The data needed to update a AgencyData.
     */
    data: XOR<AgencyDataUpdateInput, AgencyDataUncheckedUpdateInput>
    /**
     * Choose, which AgencyData to update.
     */
    where: AgencyDataWhereUniqueInput
  }

  /**
   * AgencyData updateMany
   */
  export type AgencyDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgencyData.
     */
    data: XOR<AgencyDataUpdateManyMutationInput, AgencyDataUncheckedUpdateManyInput>
    /**
     * Filter which AgencyData to update
     */
    where?: AgencyDataWhereInput
  }

  /**
   * AgencyData upsert
   */
  export type AgencyDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * The filter to search for the AgencyData to update in case it exists.
     */
    where: AgencyDataWhereUniqueInput
    /**
     * In case the AgencyData found by the `where` argument doesn't exist, create a new AgencyData with this data.
     */
    create: XOR<AgencyDataCreateInput, AgencyDataUncheckedCreateInput>
    /**
     * In case the AgencyData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencyDataUpdateInput, AgencyDataUncheckedUpdateInput>
  }

  /**
   * AgencyData delete
   */
  export type AgencyDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
    /**
     * Filter which AgencyData to delete.
     */
    where: AgencyDataWhereUniqueInput
  }

  /**
   * AgencyData deleteMany
   */
  export type AgencyDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencyData to delete
     */
    where?: AgencyDataWhereInput
  }

  /**
   * AgencyData.branch
   */
  export type AgencyData$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    cursor?: BranchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * AgencyData.jobOffers
   */
  export type AgencyData$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * AgencyData without action
   */
  export type AgencyDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyData
     */
    select?: AgencyDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyDataInclude<ExtArgs> | null
  }


  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    fax: string | null
    address: string | null
    location: string | null
    region: string | null
    logo: string | null
    about_branch: string | null
    adId: string | null
  }

  export type BranchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    fax: string | null
    address: string | null
    location: string | null
    region: string | null
    logo: string | null
    about_branch: string | null
    adId: string | null
  }

  export type BranchCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    fax: number
    address: number
    location: number
    region: number
    logo: number
    about_branch: number
    adId: number
    _all: number
  }


  export type BranchMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    fax?: true
    address?: true
    location?: true
    region?: true
    logo?: true
    about_branch?: true
    adId?: true
  }

  export type BranchMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    fax?: true
    address?: true
    location?: true
    region?: true
    logo?: true
    about_branch?: true
    adId?: true
  }

  export type BranchCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    fax?: true
    address?: true
    location?: true
    region?: true
    logo?: true
    about_branch?: true
    adId?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    id: string
    name: string
    email: string
    phone: string
    fax: string | null
    address: string
    location: string
    region: string
    logo: string | null
    about_branch: string | null
    adId: string
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    fax?: boolean
    address?: boolean
    location?: boolean
    region?: boolean
    logo?: boolean
    about_branch?: boolean
    adId?: boolean
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    jobOffers?: boolean | Branch$jobOffersArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    fax?: boolean
    address?: boolean
    location?: boolean
    region?: boolean
    logo?: boolean
    about_branch?: boolean
    adId?: boolean
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    fax?: boolean
    address?: boolean
    location?: boolean
    region?: boolean
    logo?: boolean
    about_branch?: boolean
    adId?: boolean
  }

  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    jobOffers?: boolean | Branch$jobOffersArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BranchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      agency: Prisma.$AgencyDataPayload<ExtArgs>
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phone: string
      fax: string | null
      address: string
      location: string
      region: string
      logo: string | null
      about_branch: string | null
      adId: string
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchWithIdOnly = await prisma.branch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Branches and returns the data saved in the database.
     * @param {BranchCreateManyAndReturnArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BranchCreateManyAndReturnArgs>(args?: SelectSubset<T, BranchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDataDefaultArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobOffers<T extends Branch$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */ 
  interface BranchFieldRefs {
    readonly id: FieldRef<"Branch", 'String'>
    readonly name: FieldRef<"Branch", 'String'>
    readonly email: FieldRef<"Branch", 'String'>
    readonly phone: FieldRef<"Branch", 'String'>
    readonly fax: FieldRef<"Branch", 'String'>
    readonly address: FieldRef<"Branch", 'String'>
    readonly location: FieldRef<"Branch", 'String'>
    readonly region: FieldRef<"Branch", 'String'>
    readonly logo: FieldRef<"Branch", 'String'>
    readonly about_branch: FieldRef<"Branch", 'String'>
    readonly adId: FieldRef<"Branch", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch createManyAndReturn
   */
  export type BranchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
  }

  /**
   * Branch.jobOffers
   */
  export type Branch$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model jobOffers
   */

  export type AggregateJobOffers = {
    _count: JobOffersCountAggregateOutputType | null
    _avg: JobOffersAvgAggregateOutputType | null
    _sum: JobOffersSumAggregateOutputType | null
    _min: JobOffersMinAggregateOutputType | null
    _max: JobOffersMaxAggregateOutputType | null
  }

  export type JobOffersAvgAggregateOutputType = {
    views: number | null
  }

  export type JobOffersSumAggregateOutputType = {
    views: number | null
  }

  export type JobOffersMinAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    region: string | null
    province: string | null
    location: string | null
    reallyUpTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isValidate: boolean | null
    views: number | null
    categoryId: string | null
    contratId: string | null
    experienceId: string | null
    modeId: string | null
    workingTimeId: string | null
    levelId: string | null
    agencyId: string | null
    branchId: string | null
  }

  export type JobOffersMaxAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    region: string | null
    province: string | null
    location: string | null
    reallyUpTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isValidate: boolean | null
    views: number | null
    categoryId: string | null
    contratId: string | null
    experienceId: string | null
    modeId: string | null
    workingTimeId: string | null
    levelId: string | null
    agencyId: string | null
    branchId: string | null
  }

  export type JobOffersCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    region: number
    province: number
    location: number
    reallyUpTo: number
    createdAt: number
    updatedAt: number
    isValidate: number
    views: number
    categoryId: number
    contratId: number
    experienceId: number
    modeId: number
    workingTimeId: number
    levelId: number
    agencyId: number
    branchId: number
    _all: number
  }


  export type JobOffersAvgAggregateInputType = {
    views?: true
  }

  export type JobOffersSumAggregateInputType = {
    views?: true
  }

  export type JobOffersMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    region?: true
    province?: true
    location?: true
    reallyUpTo?: true
    createdAt?: true
    updatedAt?: true
    isValidate?: true
    views?: true
    categoryId?: true
    contratId?: true
    experienceId?: true
    modeId?: true
    workingTimeId?: true
    levelId?: true
    agencyId?: true
    branchId?: true
  }

  export type JobOffersMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    region?: true
    province?: true
    location?: true
    reallyUpTo?: true
    createdAt?: true
    updatedAt?: true
    isValidate?: true
    views?: true
    categoryId?: true
    contratId?: true
    experienceId?: true
    modeId?: true
    workingTimeId?: true
    levelId?: true
    agencyId?: true
    branchId?: true
  }

  export type JobOffersCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    region?: true
    province?: true
    location?: true
    reallyUpTo?: true
    createdAt?: true
    updatedAt?: true
    isValidate?: true
    views?: true
    categoryId?: true
    contratId?: true
    experienceId?: true
    modeId?: true
    workingTimeId?: true
    levelId?: true
    agencyId?: true
    branchId?: true
    _all?: true
  }

  export type JobOffersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobOffers to aggregate.
     */
    where?: jobOffersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobOffers to fetch.
     */
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jobOffersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobOffers
    **/
    _count?: true | JobOffersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobOffersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobOffersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobOffersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobOffersMaxAggregateInputType
  }

  export type GetJobOffersAggregateType<T extends JobOffersAggregateArgs> = {
        [P in keyof T & keyof AggregateJobOffers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobOffers[P]>
      : GetScalarType<T[P], AggregateJobOffers[P]>
  }




  export type jobOffersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithAggregationInput | jobOffersOrderByWithAggregationInput[]
    by: JobOffersScalarFieldEnum[] | JobOffersScalarFieldEnum
    having?: jobOffersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobOffersCountAggregateInputType | true
    _avg?: JobOffersAvgAggregateInputType
    _sum?: JobOffersSumAggregateInputType
    _min?: JobOffersMinAggregateInputType
    _max?: JobOffersMaxAggregateInputType
  }

  export type JobOffersGroupByOutputType = {
    id: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo: Date | null
    createdAt: Date
    updatedAt: Date
    isValidate: boolean
    views: number
    categoryId: string
    contratId: string | null
    experienceId: string | null
    modeId: string | null
    workingTimeId: string | null
    levelId: string | null
    agencyId: string
    branchId: string | null
    _count: JobOffersCountAggregateOutputType | null
    _avg: JobOffersAvgAggregateOutputType | null
    _sum: JobOffersSumAggregateOutputType | null
    _min: JobOffersMinAggregateOutputType | null
    _max: JobOffersMaxAggregateOutputType | null
  }

  type GetJobOffersGroupByPayload<T extends jobOffersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobOffersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobOffersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobOffersGroupByOutputType[P]>
            : GetScalarType<T[P], JobOffersGroupByOutputType[P]>
        }
      >
    >


  export type jobOffersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    region?: boolean
    province?: boolean
    location?: boolean
    reallyUpTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isValidate?: boolean
    views?: boolean
    categoryId?: boolean
    contratId?: boolean
    experienceId?: boolean
    modeId?: boolean
    workingTimeId?: boolean
    levelId?: boolean
    agencyId?: boolean
    branchId?: boolean
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    branch?: boolean | jobOffers$branchArgs<ExtArgs>
    categories?: boolean | CategoryDefaultArgs<ExtArgs>
    contractType?: boolean | jobOffers$contractTypeArgs<ExtArgs>
    experienceMinimalJob?: boolean | jobOffers$experienceMinimalJobArgs<ExtArgs>
    levelEducation?: boolean | jobOffers$levelEducationArgs<ExtArgs>
    modeJob?: boolean | jobOffers$modeJobArgs<ExtArgs>
    workingTimeJob?: boolean | jobOffers$workingTimeJobArgs<ExtArgs>
    sectors?: boolean | jobOffers$sectorsArgs<ExtArgs>
    tags?: boolean | jobOffers$tagsArgs<ExtArgs>
    savedBy?: boolean | jobOffers$savedByArgs<ExtArgs>
    sendCandidature?: boolean | jobOffers$sendCandidatureArgs<ExtArgs>
    _count?: boolean | JobOffersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobOffers"]>

  export type jobOffersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    region?: boolean
    province?: boolean
    location?: boolean
    reallyUpTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isValidate?: boolean
    views?: boolean
    categoryId?: boolean
    contratId?: boolean
    experienceId?: boolean
    modeId?: boolean
    workingTimeId?: boolean
    levelId?: boolean
    agencyId?: boolean
    branchId?: boolean
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    branch?: boolean | jobOffers$branchArgs<ExtArgs>
    categories?: boolean | CategoryDefaultArgs<ExtArgs>
    contractType?: boolean | jobOffers$contractTypeArgs<ExtArgs>
    experienceMinimalJob?: boolean | jobOffers$experienceMinimalJobArgs<ExtArgs>
    levelEducation?: boolean | jobOffers$levelEducationArgs<ExtArgs>
    modeJob?: boolean | jobOffers$modeJobArgs<ExtArgs>
    workingTimeJob?: boolean | jobOffers$workingTimeJobArgs<ExtArgs>
  }, ExtArgs["result"]["jobOffers"]>

  export type jobOffersSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    region?: boolean
    province?: boolean
    location?: boolean
    reallyUpTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isValidate?: boolean
    views?: boolean
    categoryId?: boolean
    contratId?: boolean
    experienceId?: boolean
    modeId?: boolean
    workingTimeId?: boolean
    levelId?: boolean
    agencyId?: boolean
    branchId?: boolean
  }

  export type jobOffersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    branch?: boolean | jobOffers$branchArgs<ExtArgs>
    categories?: boolean | CategoryDefaultArgs<ExtArgs>
    contractType?: boolean | jobOffers$contractTypeArgs<ExtArgs>
    experienceMinimalJob?: boolean | jobOffers$experienceMinimalJobArgs<ExtArgs>
    levelEducation?: boolean | jobOffers$levelEducationArgs<ExtArgs>
    modeJob?: boolean | jobOffers$modeJobArgs<ExtArgs>
    workingTimeJob?: boolean | jobOffers$workingTimeJobArgs<ExtArgs>
    sectors?: boolean | jobOffers$sectorsArgs<ExtArgs>
    tags?: boolean | jobOffers$tagsArgs<ExtArgs>
    savedBy?: boolean | jobOffers$savedByArgs<ExtArgs>
    sendCandidature?: boolean | jobOffers$sendCandidatureArgs<ExtArgs>
    _count?: boolean | JobOffersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type jobOffersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDataDefaultArgs<ExtArgs>
    branch?: boolean | jobOffers$branchArgs<ExtArgs>
    categories?: boolean | CategoryDefaultArgs<ExtArgs>
    contractType?: boolean | jobOffers$contractTypeArgs<ExtArgs>
    experienceMinimalJob?: boolean | jobOffers$experienceMinimalJobArgs<ExtArgs>
    levelEducation?: boolean | jobOffers$levelEducationArgs<ExtArgs>
    modeJob?: boolean | jobOffers$modeJobArgs<ExtArgs>
    workingTimeJob?: boolean | jobOffers$workingTimeJobArgs<ExtArgs>
  }

  export type $jobOffersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jobOffers"
    objects: {
      agency: Prisma.$AgencyDataPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs> | null
      categories: Prisma.$CategoryPayload<ExtArgs>
      contractType: Prisma.$ContractTypeJobPayload<ExtArgs> | null
      experienceMinimalJob: Prisma.$ExperienceMinimalJobPayload<ExtArgs> | null
      levelEducation: Prisma.$LevelEducationPayload<ExtArgs> | null
      modeJob: Prisma.$ModeJobPayload<ExtArgs> | null
      workingTimeJob: Prisma.$WorkingTimeJobPayload<ExtArgs> | null
      sectors: Prisma.$SectorsPayload<ExtArgs>[]
      tags: Prisma.$jobTagsPayload<ExtArgs>[]
      savedBy: Prisma.$SavedJobsPayload<ExtArgs>[]
      sendCandidature: Prisma.$SendCandidaturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      slug: string
      description: string
      region: string
      province: string
      location: string
      reallyUpTo: Date | null
      createdAt: Date
      updatedAt: Date
      isValidate: boolean
      views: number
      categoryId: string
      contratId: string | null
      experienceId: string | null
      modeId: string | null
      workingTimeId: string | null
      levelId: string | null
      agencyId: string
      branchId: string | null
    }, ExtArgs["result"]["jobOffers"]>
    composites: {}
  }

  type jobOffersGetPayload<S extends boolean | null | undefined | jobOffersDefaultArgs> = $Result.GetResult<Prisma.$jobOffersPayload, S>

  type jobOffersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<jobOffersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobOffersCountAggregateInputType | true
    }

  export interface jobOffersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jobOffers'], meta: { name: 'jobOffers' } }
    /**
     * Find zero or one JobOffers that matches the filter.
     * @param {jobOffersFindUniqueArgs} args - Arguments to find a JobOffers
     * @example
     * // Get one JobOffers
     * const jobOffers = await prisma.jobOffers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jobOffersFindUniqueArgs>(args: SelectSubset<T, jobOffersFindUniqueArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobOffers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {jobOffersFindUniqueOrThrowArgs} args - Arguments to find a JobOffers
     * @example
     * // Get one JobOffers
     * const jobOffers = await prisma.jobOffers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jobOffersFindUniqueOrThrowArgs>(args: SelectSubset<T, jobOffersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobOffers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersFindFirstArgs} args - Arguments to find a JobOffers
     * @example
     * // Get one JobOffers
     * const jobOffers = await prisma.jobOffers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jobOffersFindFirstArgs>(args?: SelectSubset<T, jobOffersFindFirstArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobOffers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersFindFirstOrThrowArgs} args - Arguments to find a JobOffers
     * @example
     * // Get one JobOffers
     * const jobOffers = await prisma.jobOffers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jobOffersFindFirstOrThrowArgs>(args?: SelectSubset<T, jobOffersFindFirstOrThrowArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobOffers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobOffers
     * const jobOffers = await prisma.jobOffers.findMany()
     * 
     * // Get first 10 JobOffers
     * const jobOffers = await prisma.jobOffers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobOffersWithIdOnly = await prisma.jobOffers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends jobOffersFindManyArgs>(args?: SelectSubset<T, jobOffersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobOffers.
     * @param {jobOffersCreateArgs} args - Arguments to create a JobOffers.
     * @example
     * // Create one JobOffers
     * const JobOffers = await prisma.jobOffers.create({
     *   data: {
     *     // ... data to create a JobOffers
     *   }
     * })
     * 
     */
    create<T extends jobOffersCreateArgs>(args: SelectSubset<T, jobOffersCreateArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobOffers.
     * @param {jobOffersCreateManyArgs} args - Arguments to create many JobOffers.
     * @example
     * // Create many JobOffers
     * const jobOffers = await prisma.jobOffers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jobOffersCreateManyArgs>(args?: SelectSubset<T, jobOffersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobOffers and returns the data saved in the database.
     * @param {jobOffersCreateManyAndReturnArgs} args - Arguments to create many JobOffers.
     * @example
     * // Create many JobOffers
     * const jobOffers = await prisma.jobOffers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobOffers and only return the `id`
     * const jobOffersWithIdOnly = await prisma.jobOffers.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jobOffersCreateManyAndReturnArgs>(args?: SelectSubset<T, jobOffersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobOffers.
     * @param {jobOffersDeleteArgs} args - Arguments to delete one JobOffers.
     * @example
     * // Delete one JobOffers
     * const JobOffers = await prisma.jobOffers.delete({
     *   where: {
     *     // ... filter to delete one JobOffers
     *   }
     * })
     * 
     */
    delete<T extends jobOffersDeleteArgs>(args: SelectSubset<T, jobOffersDeleteArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobOffers.
     * @param {jobOffersUpdateArgs} args - Arguments to update one JobOffers.
     * @example
     * // Update one JobOffers
     * const jobOffers = await prisma.jobOffers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jobOffersUpdateArgs>(args: SelectSubset<T, jobOffersUpdateArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobOffers.
     * @param {jobOffersDeleteManyArgs} args - Arguments to filter JobOffers to delete.
     * @example
     * // Delete a few JobOffers
     * const { count } = await prisma.jobOffers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jobOffersDeleteManyArgs>(args?: SelectSubset<T, jobOffersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobOffers
     * const jobOffers = await prisma.jobOffers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jobOffersUpdateManyArgs>(args: SelectSubset<T, jobOffersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobOffers.
     * @param {jobOffersUpsertArgs} args - Arguments to update or create a JobOffers.
     * @example
     * // Update or create a JobOffers
     * const jobOffers = await prisma.jobOffers.upsert({
     *   create: {
     *     // ... data to create a JobOffers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobOffers we want to update
     *   }
     * })
     */
    upsert<T extends jobOffersUpsertArgs>(args: SelectSubset<T, jobOffersUpsertArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersCountArgs} args - Arguments to filter JobOffers to count.
     * @example
     * // Count the number of JobOffers
     * const count = await prisma.jobOffers.count({
     *   where: {
     *     // ... the filter for the JobOffers we want to count
     *   }
     * })
    **/
    count<T extends jobOffersCountArgs>(
      args?: Subset<T, jobOffersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobOffersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobOffersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobOffersAggregateArgs>(args: Subset<T, JobOffersAggregateArgs>): Prisma.PrismaPromise<GetJobOffersAggregateType<T>>

    /**
     * Group by JobOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobOffersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jobOffersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jobOffersGroupByArgs['orderBy'] }
        : { orderBy?: jobOffersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jobOffersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobOffersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jobOffers model
   */
  readonly fields: jobOffersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jobOffers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jobOffersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDataDefaultArgs<ExtArgs>>): Prisma__AgencyDataClient<$Result.GetResult<Prisma.$AgencyDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    branch<T extends jobOffers$branchArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    categories<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contractType<T extends jobOffers$contractTypeArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$contractTypeArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    experienceMinimalJob<T extends jobOffers$experienceMinimalJobArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$experienceMinimalJobArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    levelEducation<T extends jobOffers$levelEducationArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$levelEducationArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    modeJob<T extends jobOffers$modeJobArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$modeJobArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    workingTimeJob<T extends jobOffers$workingTimeJobArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$workingTimeJobArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sectors<T extends jobOffers$sectorsArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$sectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends jobOffers$tagsArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findMany"> | Null>
    savedBy<T extends jobOffers$savedByArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$savedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findMany"> | Null>
    sendCandidature<T extends jobOffers$sendCandidatureArgs<ExtArgs> = {}>(args?: Subset<T, jobOffers$sendCandidatureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jobOffers model
   */ 
  interface jobOffersFieldRefs {
    readonly id: FieldRef<"jobOffers", 'String'>
    readonly title: FieldRef<"jobOffers", 'String'>
    readonly slug: FieldRef<"jobOffers", 'String'>
    readonly description: FieldRef<"jobOffers", 'String'>
    readonly region: FieldRef<"jobOffers", 'String'>
    readonly province: FieldRef<"jobOffers", 'String'>
    readonly location: FieldRef<"jobOffers", 'String'>
    readonly reallyUpTo: FieldRef<"jobOffers", 'DateTime'>
    readonly createdAt: FieldRef<"jobOffers", 'DateTime'>
    readonly updatedAt: FieldRef<"jobOffers", 'DateTime'>
    readonly isValidate: FieldRef<"jobOffers", 'Boolean'>
    readonly views: FieldRef<"jobOffers", 'Int'>
    readonly categoryId: FieldRef<"jobOffers", 'String'>
    readonly contratId: FieldRef<"jobOffers", 'String'>
    readonly experienceId: FieldRef<"jobOffers", 'String'>
    readonly modeId: FieldRef<"jobOffers", 'String'>
    readonly workingTimeId: FieldRef<"jobOffers", 'String'>
    readonly levelId: FieldRef<"jobOffers", 'String'>
    readonly agencyId: FieldRef<"jobOffers", 'String'>
    readonly branchId: FieldRef<"jobOffers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * jobOffers findUnique
   */
  export type jobOffersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter, which jobOffers to fetch.
     */
    where: jobOffersWhereUniqueInput
  }

  /**
   * jobOffers findUniqueOrThrow
   */
  export type jobOffersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter, which jobOffers to fetch.
     */
    where: jobOffersWhereUniqueInput
  }

  /**
   * jobOffers findFirst
   */
  export type jobOffersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter, which jobOffers to fetch.
     */
    where?: jobOffersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobOffers to fetch.
     */
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobOffers.
     */
    cursor?: jobOffersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobOffers.
     */
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * jobOffers findFirstOrThrow
   */
  export type jobOffersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter, which jobOffers to fetch.
     */
    where?: jobOffersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobOffers to fetch.
     */
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobOffers.
     */
    cursor?: jobOffersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobOffers.
     */
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * jobOffers findMany
   */
  export type jobOffersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter, which jobOffers to fetch.
     */
    where?: jobOffersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobOffers to fetch.
     */
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobOffers.
     */
    cursor?: jobOffersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobOffers.
     */
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * jobOffers create
   */
  export type jobOffersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * The data needed to create a jobOffers.
     */
    data: XOR<jobOffersCreateInput, jobOffersUncheckedCreateInput>
  }

  /**
   * jobOffers createMany
   */
  export type jobOffersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jobOffers.
     */
    data: jobOffersCreateManyInput | jobOffersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jobOffers createManyAndReturn
   */
  export type jobOffersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many jobOffers.
     */
    data: jobOffersCreateManyInput | jobOffersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * jobOffers update
   */
  export type jobOffersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * The data needed to update a jobOffers.
     */
    data: XOR<jobOffersUpdateInput, jobOffersUncheckedUpdateInput>
    /**
     * Choose, which jobOffers to update.
     */
    where: jobOffersWhereUniqueInput
  }

  /**
   * jobOffers updateMany
   */
  export type jobOffersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jobOffers.
     */
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyInput>
    /**
     * Filter which jobOffers to update
     */
    where?: jobOffersWhereInput
  }

  /**
   * jobOffers upsert
   */
  export type jobOffersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * The filter to search for the jobOffers to update in case it exists.
     */
    where: jobOffersWhereUniqueInput
    /**
     * In case the jobOffers found by the `where` argument doesn't exist, create a new jobOffers with this data.
     */
    create: XOR<jobOffersCreateInput, jobOffersUncheckedCreateInput>
    /**
     * In case the jobOffers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jobOffersUpdateInput, jobOffersUncheckedUpdateInput>
  }

  /**
   * jobOffers delete
   */
  export type jobOffersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    /**
     * Filter which jobOffers to delete.
     */
    where: jobOffersWhereUniqueInput
  }

  /**
   * jobOffers deleteMany
   */
  export type jobOffersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobOffers to delete
     */
    where?: jobOffersWhereInput
  }

  /**
   * jobOffers.branch
   */
  export type jobOffers$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * jobOffers.contractType
   */
  export type jobOffers$contractTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    where?: ContractTypeJobWhereInput
  }

  /**
   * jobOffers.experienceMinimalJob
   */
  export type jobOffers$experienceMinimalJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    where?: ExperienceMinimalJobWhereInput
  }

  /**
   * jobOffers.levelEducation
   */
  export type jobOffers$levelEducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    where?: LevelEducationWhereInput
  }

  /**
   * jobOffers.modeJob
   */
  export type jobOffers$modeJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    where?: ModeJobWhereInput
  }

  /**
   * jobOffers.workingTimeJob
   */
  export type jobOffers$workingTimeJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    where?: WorkingTimeJobWhereInput
  }

  /**
   * jobOffers.sectors
   */
  export type jobOffers$sectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    where?: SectorsWhereInput
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    cursor?: SectorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectorsScalarFieldEnum | SectorsScalarFieldEnum[]
  }

  /**
   * jobOffers.tags
   */
  export type jobOffers$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    where?: jobTagsWhereInput
    orderBy?: jobTagsOrderByWithRelationInput | jobTagsOrderByWithRelationInput[]
    cursor?: jobTagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobTagsScalarFieldEnum | JobTagsScalarFieldEnum[]
  }

  /**
   * jobOffers.savedBy
   */
  export type jobOffers$savedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    where?: SavedJobsWhereInput
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    cursor?: SavedJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedJobsScalarFieldEnum | SavedJobsScalarFieldEnum[]
  }

  /**
   * jobOffers.sendCandidature
   */
  export type jobOffers$sendCandidatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    where?: SendCandidatureWhereInput
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    cursor?: SendCandidatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SendCandidatureScalarFieldEnum | SendCandidatureScalarFieldEnum[]
  }

  /**
   * jobOffers without action
   */
  export type jobOffersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
  }


  /**
   * Model SavedJobs
   */

  export type AggregateSavedJobs = {
    _count: SavedJobsCountAggregateOutputType | null
    _min: SavedJobsMinAggregateOutputType | null
    _max: SavedJobsMaxAggregateOutputType | null
  }

  export type SavedJobsMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    jobOfferId: string | null
    savedAt: Date | null
  }

  export type SavedJobsMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    jobOfferId: string | null
    savedAt: Date | null
  }

  export type SavedJobsCountAggregateOutputType = {
    id: number
    candidateId: number
    jobOfferId: number
    savedAt: number
    _all: number
  }


  export type SavedJobsMinAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
  }

  export type SavedJobsMaxAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
  }

  export type SavedJobsCountAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
    _all?: true
  }

  export type SavedJobsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedJobs to aggregate.
     */
    where?: SavedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedJobs
    **/
    _count?: true | SavedJobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedJobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedJobsMaxAggregateInputType
  }

  export type GetSavedJobsAggregateType<T extends SavedJobsAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedJobs[P]>
      : GetScalarType<T[P], AggregateSavedJobs[P]>
  }




  export type SavedJobsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobsWhereInput
    orderBy?: SavedJobsOrderByWithAggregationInput | SavedJobsOrderByWithAggregationInput[]
    by: SavedJobsScalarFieldEnum[] | SavedJobsScalarFieldEnum
    having?: SavedJobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedJobsCountAggregateInputType | true
    _min?: SavedJobsMinAggregateInputType
    _max?: SavedJobsMaxAggregateInputType
  }

  export type SavedJobsGroupByOutputType = {
    id: string
    candidateId: string
    jobOfferId: string
    savedAt: Date
    _count: SavedJobsCountAggregateOutputType | null
    _min: SavedJobsMinAggregateOutputType | null
    _max: SavedJobsMaxAggregateOutputType | null
  }

  type GetSavedJobsGroupByPayload<T extends SavedJobsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedJobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedJobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedJobsGroupByOutputType[P]>
            : GetScalarType<T[P], SavedJobsGroupByOutputType[P]>
        }
      >
    >


  export type SavedJobsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedJobs"]>

  export type SavedJobsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedJobs"]>

  export type SavedJobsSelectScalar = {
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
  }

  export type SavedJobsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }
  export type SavedJobsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }

  export type $SavedJobsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedJobs"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
      jobOffer: Prisma.$jobOffersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      jobOfferId: string
      savedAt: Date
    }, ExtArgs["result"]["savedJobs"]>
    composites: {}
  }

  type SavedJobsGetPayload<S extends boolean | null | undefined | SavedJobsDefaultArgs> = $Result.GetResult<Prisma.$SavedJobsPayload, S>

  type SavedJobsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SavedJobsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SavedJobsCountAggregateInputType | true
    }

  export interface SavedJobsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedJobs'], meta: { name: 'SavedJobs' } }
    /**
     * Find zero or one SavedJobs that matches the filter.
     * @param {SavedJobsFindUniqueArgs} args - Arguments to find a SavedJobs
     * @example
     * // Get one SavedJobs
     * const savedJobs = await prisma.savedJobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedJobsFindUniqueArgs>(args: SelectSubset<T, SavedJobsFindUniqueArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SavedJobs that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SavedJobsFindUniqueOrThrowArgs} args - Arguments to find a SavedJobs
     * @example
     * // Get one SavedJobs
     * const savedJobs = await prisma.savedJobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedJobsFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedJobsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SavedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsFindFirstArgs} args - Arguments to find a SavedJobs
     * @example
     * // Get one SavedJobs
     * const savedJobs = await prisma.savedJobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedJobsFindFirstArgs>(args?: SelectSubset<T, SavedJobsFindFirstArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SavedJobs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsFindFirstOrThrowArgs} args - Arguments to find a SavedJobs
     * @example
     * // Get one SavedJobs
     * const savedJobs = await prisma.savedJobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedJobsFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedJobsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SavedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedJobs
     * const savedJobs = await prisma.savedJobs.findMany()
     * 
     * // Get first 10 SavedJobs
     * const savedJobs = await prisma.savedJobs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedJobsWithIdOnly = await prisma.savedJobs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedJobsFindManyArgs>(args?: SelectSubset<T, SavedJobsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SavedJobs.
     * @param {SavedJobsCreateArgs} args - Arguments to create a SavedJobs.
     * @example
     * // Create one SavedJobs
     * const SavedJobs = await prisma.savedJobs.create({
     *   data: {
     *     // ... data to create a SavedJobs
     *   }
     * })
     * 
     */
    create<T extends SavedJobsCreateArgs>(args: SelectSubset<T, SavedJobsCreateArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SavedJobs.
     * @param {SavedJobsCreateManyArgs} args - Arguments to create many SavedJobs.
     * @example
     * // Create many SavedJobs
     * const savedJobs = await prisma.savedJobs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedJobsCreateManyArgs>(args?: SelectSubset<T, SavedJobsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedJobs and returns the data saved in the database.
     * @param {SavedJobsCreateManyAndReturnArgs} args - Arguments to create many SavedJobs.
     * @example
     * // Create many SavedJobs
     * const savedJobs = await prisma.savedJobs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedJobs and only return the `id`
     * const savedJobsWithIdOnly = await prisma.savedJobs.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedJobsCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedJobsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SavedJobs.
     * @param {SavedJobsDeleteArgs} args - Arguments to delete one SavedJobs.
     * @example
     * // Delete one SavedJobs
     * const SavedJobs = await prisma.savedJobs.delete({
     *   where: {
     *     // ... filter to delete one SavedJobs
     *   }
     * })
     * 
     */
    delete<T extends SavedJobsDeleteArgs>(args: SelectSubset<T, SavedJobsDeleteArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SavedJobs.
     * @param {SavedJobsUpdateArgs} args - Arguments to update one SavedJobs.
     * @example
     * // Update one SavedJobs
     * const savedJobs = await prisma.savedJobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedJobsUpdateArgs>(args: SelectSubset<T, SavedJobsUpdateArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SavedJobs.
     * @param {SavedJobsDeleteManyArgs} args - Arguments to filter SavedJobs to delete.
     * @example
     * // Delete a few SavedJobs
     * const { count } = await prisma.savedJobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedJobsDeleteManyArgs>(args?: SelectSubset<T, SavedJobsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedJobs
     * const savedJobs = await prisma.savedJobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedJobsUpdateManyArgs>(args: SelectSubset<T, SavedJobsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SavedJobs.
     * @param {SavedJobsUpsertArgs} args - Arguments to update or create a SavedJobs.
     * @example
     * // Update or create a SavedJobs
     * const savedJobs = await prisma.savedJobs.upsert({
     *   create: {
     *     // ... data to create a SavedJobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedJobs we want to update
     *   }
     * })
     */
    upsert<T extends SavedJobsUpsertArgs>(args: SelectSubset<T, SavedJobsUpsertArgs<ExtArgs>>): Prisma__SavedJobsClient<$Result.GetResult<Prisma.$SavedJobsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsCountArgs} args - Arguments to filter SavedJobs to count.
     * @example
     * // Count the number of SavedJobs
     * const count = await prisma.savedJobs.count({
     *   where: {
     *     // ... the filter for the SavedJobs we want to count
     *   }
     * })
    **/
    count<T extends SavedJobsCountArgs>(
      args?: Subset<T, SavedJobsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedJobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedJobsAggregateArgs>(args: Subset<T, SavedJobsAggregateArgs>): Prisma.PrismaPromise<GetSavedJobsAggregateType<T>>

    /**
     * Group by SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedJobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedJobsGroupByArgs['orderBy'] }
        : { orderBy?: SavedJobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedJobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedJobsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedJobs model
   */
  readonly fields: SavedJobsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedJobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedJobsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobOffer<T extends jobOffersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jobOffersDefaultArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedJobs model
   */ 
  interface SavedJobsFieldRefs {
    readonly id: FieldRef<"SavedJobs", 'String'>
    readonly candidateId: FieldRef<"SavedJobs", 'String'>
    readonly jobOfferId: FieldRef<"SavedJobs", 'String'>
    readonly savedAt: FieldRef<"SavedJobs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SavedJobs findUnique
   */
  export type SavedJobsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where: SavedJobsWhereUniqueInput
  }

  /**
   * SavedJobs findUniqueOrThrow
   */
  export type SavedJobsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where: SavedJobsWhereUniqueInput
  }

  /**
   * SavedJobs findFirst
   */
  export type SavedJobsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where?: SavedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedJobs.
     */
    cursor?: SavedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedJobs.
     */
    distinct?: SavedJobsScalarFieldEnum | SavedJobsScalarFieldEnum[]
  }

  /**
   * SavedJobs findFirstOrThrow
   */
  export type SavedJobsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where?: SavedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedJobs.
     */
    cursor?: SavedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedJobs.
     */
    distinct?: SavedJobsScalarFieldEnum | SavedJobsScalarFieldEnum[]
  }

  /**
   * SavedJobs findMany
   */
  export type SavedJobsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where?: SavedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobsOrderByWithRelationInput | SavedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedJobs.
     */
    cursor?: SavedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    distinct?: SavedJobsScalarFieldEnum | SavedJobsScalarFieldEnum[]
  }

  /**
   * SavedJobs create
   */
  export type SavedJobsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedJobs.
     */
    data: XOR<SavedJobsCreateInput, SavedJobsUncheckedCreateInput>
  }

  /**
   * SavedJobs createMany
   */
  export type SavedJobsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedJobs.
     */
    data: SavedJobsCreateManyInput | SavedJobsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedJobs createManyAndReturn
   */
  export type SavedJobsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SavedJobs.
     */
    data: SavedJobsCreateManyInput | SavedJobsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedJobs update
   */
  export type SavedJobsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedJobs.
     */
    data: XOR<SavedJobsUpdateInput, SavedJobsUncheckedUpdateInput>
    /**
     * Choose, which SavedJobs to update.
     */
    where: SavedJobsWhereUniqueInput
  }

  /**
   * SavedJobs updateMany
   */
  export type SavedJobsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedJobs.
     */
    data: XOR<SavedJobsUpdateManyMutationInput, SavedJobsUncheckedUpdateManyInput>
    /**
     * Filter which SavedJobs to update
     */
    where?: SavedJobsWhereInput
  }

  /**
   * SavedJobs upsert
   */
  export type SavedJobsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedJobs to update in case it exists.
     */
    where: SavedJobsWhereUniqueInput
    /**
     * In case the SavedJobs found by the `where` argument doesn't exist, create a new SavedJobs with this data.
     */
    create: XOR<SavedJobsCreateInput, SavedJobsUncheckedCreateInput>
    /**
     * In case the SavedJobs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedJobsUpdateInput, SavedJobsUncheckedUpdateInput>
  }

  /**
   * SavedJobs delete
   */
  export type SavedJobsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
    /**
     * Filter which SavedJobs to delete.
     */
    where: SavedJobsWhereUniqueInput
  }

  /**
   * SavedJobs deleteMany
   */
  export type SavedJobsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedJobs to delete
     */
    where?: SavedJobsWhereInput
  }

  /**
   * SavedJobs without action
   */
  export type SavedJobsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJobs
     */
    select?: SavedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobsInclude<ExtArgs> | null
  }


  /**
   * Model SendCandidature
   */

  export type AggregateSendCandidature = {
    _count: SendCandidatureCountAggregateOutputType | null
    _min: SendCandidatureMinAggregateOutputType | null
    _max: SendCandidatureMaxAggregateOutputType | null
  }

  export type SendCandidatureMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    jobOfferId: string | null
    savedAt: Date | null
  }

  export type SendCandidatureMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    jobOfferId: string | null
    savedAt: Date | null
  }

  export type SendCandidatureCountAggregateOutputType = {
    id: number
    candidateId: number
    jobOfferId: number
    savedAt: number
    _all: number
  }


  export type SendCandidatureMinAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
  }

  export type SendCandidatureMaxAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
  }

  export type SendCandidatureCountAggregateInputType = {
    id?: true
    candidateId?: true
    jobOfferId?: true
    savedAt?: true
    _all?: true
  }

  export type SendCandidatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SendCandidature to aggregate.
     */
    where?: SendCandidatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SendCandidatures to fetch.
     */
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SendCandidatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SendCandidatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SendCandidatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SendCandidatures
    **/
    _count?: true | SendCandidatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SendCandidatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SendCandidatureMaxAggregateInputType
  }

  export type GetSendCandidatureAggregateType<T extends SendCandidatureAggregateArgs> = {
        [P in keyof T & keyof AggregateSendCandidature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSendCandidature[P]>
      : GetScalarType<T[P], AggregateSendCandidature[P]>
  }




  export type SendCandidatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SendCandidatureWhereInput
    orderBy?: SendCandidatureOrderByWithAggregationInput | SendCandidatureOrderByWithAggregationInput[]
    by: SendCandidatureScalarFieldEnum[] | SendCandidatureScalarFieldEnum
    having?: SendCandidatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SendCandidatureCountAggregateInputType | true
    _min?: SendCandidatureMinAggregateInputType
    _max?: SendCandidatureMaxAggregateInputType
  }

  export type SendCandidatureGroupByOutputType = {
    id: string
    candidateId: string
    jobOfferId: string
    savedAt: Date
    _count: SendCandidatureCountAggregateOutputType | null
    _min: SendCandidatureMinAggregateOutputType | null
    _max: SendCandidatureMaxAggregateOutputType | null
  }

  type GetSendCandidatureGroupByPayload<T extends SendCandidatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SendCandidatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SendCandidatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SendCandidatureGroupByOutputType[P]>
            : GetScalarType<T[P], SendCandidatureGroupByOutputType[P]>
        }
      >
    >


  export type SendCandidatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sendCandidature"]>

  export type SendCandidatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sendCandidature"]>

  export type SendCandidatureSelectScalar = {
    id?: boolean
    candidateId?: boolean
    jobOfferId?: boolean
    savedAt?: boolean
  }

  export type SendCandidatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }
  export type SendCandidatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidatDataDefaultArgs<ExtArgs>
    jobOffer?: boolean | jobOffersDefaultArgs<ExtArgs>
  }

  export type $SendCandidaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SendCandidature"
    objects: {
      candidate: Prisma.$CandidatDataPayload<ExtArgs>
      jobOffer: Prisma.$jobOffersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      jobOfferId: string
      savedAt: Date
    }, ExtArgs["result"]["sendCandidature"]>
    composites: {}
  }

  type SendCandidatureGetPayload<S extends boolean | null | undefined | SendCandidatureDefaultArgs> = $Result.GetResult<Prisma.$SendCandidaturePayload, S>

  type SendCandidatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SendCandidatureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SendCandidatureCountAggregateInputType | true
    }

  export interface SendCandidatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SendCandidature'], meta: { name: 'SendCandidature' } }
    /**
     * Find zero or one SendCandidature that matches the filter.
     * @param {SendCandidatureFindUniqueArgs} args - Arguments to find a SendCandidature
     * @example
     * // Get one SendCandidature
     * const sendCandidature = await prisma.sendCandidature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SendCandidatureFindUniqueArgs>(args: SelectSubset<T, SendCandidatureFindUniqueArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SendCandidature that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SendCandidatureFindUniqueOrThrowArgs} args - Arguments to find a SendCandidature
     * @example
     * // Get one SendCandidature
     * const sendCandidature = await prisma.sendCandidature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SendCandidatureFindUniqueOrThrowArgs>(args: SelectSubset<T, SendCandidatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SendCandidature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureFindFirstArgs} args - Arguments to find a SendCandidature
     * @example
     * // Get one SendCandidature
     * const sendCandidature = await prisma.sendCandidature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SendCandidatureFindFirstArgs>(args?: SelectSubset<T, SendCandidatureFindFirstArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SendCandidature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureFindFirstOrThrowArgs} args - Arguments to find a SendCandidature
     * @example
     * // Get one SendCandidature
     * const sendCandidature = await prisma.sendCandidature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SendCandidatureFindFirstOrThrowArgs>(args?: SelectSubset<T, SendCandidatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SendCandidatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SendCandidatures
     * const sendCandidatures = await prisma.sendCandidature.findMany()
     * 
     * // Get first 10 SendCandidatures
     * const sendCandidatures = await prisma.sendCandidature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sendCandidatureWithIdOnly = await prisma.sendCandidature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SendCandidatureFindManyArgs>(args?: SelectSubset<T, SendCandidatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SendCandidature.
     * @param {SendCandidatureCreateArgs} args - Arguments to create a SendCandidature.
     * @example
     * // Create one SendCandidature
     * const SendCandidature = await prisma.sendCandidature.create({
     *   data: {
     *     // ... data to create a SendCandidature
     *   }
     * })
     * 
     */
    create<T extends SendCandidatureCreateArgs>(args: SelectSubset<T, SendCandidatureCreateArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SendCandidatures.
     * @param {SendCandidatureCreateManyArgs} args - Arguments to create many SendCandidatures.
     * @example
     * // Create many SendCandidatures
     * const sendCandidature = await prisma.sendCandidature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SendCandidatureCreateManyArgs>(args?: SelectSubset<T, SendCandidatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SendCandidatures and returns the data saved in the database.
     * @param {SendCandidatureCreateManyAndReturnArgs} args - Arguments to create many SendCandidatures.
     * @example
     * // Create many SendCandidatures
     * const sendCandidature = await prisma.sendCandidature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SendCandidatures and only return the `id`
     * const sendCandidatureWithIdOnly = await prisma.sendCandidature.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SendCandidatureCreateManyAndReturnArgs>(args?: SelectSubset<T, SendCandidatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SendCandidature.
     * @param {SendCandidatureDeleteArgs} args - Arguments to delete one SendCandidature.
     * @example
     * // Delete one SendCandidature
     * const SendCandidature = await prisma.sendCandidature.delete({
     *   where: {
     *     // ... filter to delete one SendCandidature
     *   }
     * })
     * 
     */
    delete<T extends SendCandidatureDeleteArgs>(args: SelectSubset<T, SendCandidatureDeleteArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SendCandidature.
     * @param {SendCandidatureUpdateArgs} args - Arguments to update one SendCandidature.
     * @example
     * // Update one SendCandidature
     * const sendCandidature = await prisma.sendCandidature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SendCandidatureUpdateArgs>(args: SelectSubset<T, SendCandidatureUpdateArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SendCandidatures.
     * @param {SendCandidatureDeleteManyArgs} args - Arguments to filter SendCandidatures to delete.
     * @example
     * // Delete a few SendCandidatures
     * const { count } = await prisma.sendCandidature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SendCandidatureDeleteManyArgs>(args?: SelectSubset<T, SendCandidatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SendCandidatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SendCandidatures
     * const sendCandidature = await prisma.sendCandidature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SendCandidatureUpdateManyArgs>(args: SelectSubset<T, SendCandidatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SendCandidature.
     * @param {SendCandidatureUpsertArgs} args - Arguments to update or create a SendCandidature.
     * @example
     * // Update or create a SendCandidature
     * const sendCandidature = await prisma.sendCandidature.upsert({
     *   create: {
     *     // ... data to create a SendCandidature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SendCandidature we want to update
     *   }
     * })
     */
    upsert<T extends SendCandidatureUpsertArgs>(args: SelectSubset<T, SendCandidatureUpsertArgs<ExtArgs>>): Prisma__SendCandidatureClient<$Result.GetResult<Prisma.$SendCandidaturePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SendCandidatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureCountArgs} args - Arguments to filter SendCandidatures to count.
     * @example
     * // Count the number of SendCandidatures
     * const count = await prisma.sendCandidature.count({
     *   where: {
     *     // ... the filter for the SendCandidatures we want to count
     *   }
     * })
    **/
    count<T extends SendCandidatureCountArgs>(
      args?: Subset<T, SendCandidatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SendCandidatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SendCandidature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SendCandidatureAggregateArgs>(args: Subset<T, SendCandidatureAggregateArgs>): Prisma.PrismaPromise<GetSendCandidatureAggregateType<T>>

    /**
     * Group by SendCandidature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendCandidatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SendCandidatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SendCandidatureGroupByArgs['orderBy'] }
        : { orderBy?: SendCandidatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SendCandidatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSendCandidatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SendCandidature model
   */
  readonly fields: SendCandidatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SendCandidature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SendCandidatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidatDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDataDefaultArgs<ExtArgs>>): Prisma__CandidatDataClient<$Result.GetResult<Prisma.$CandidatDataPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobOffer<T extends jobOffersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jobOffersDefaultArgs<ExtArgs>>): Prisma__jobOffersClient<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SendCandidature model
   */ 
  interface SendCandidatureFieldRefs {
    readonly id: FieldRef<"SendCandidature", 'String'>
    readonly candidateId: FieldRef<"SendCandidature", 'String'>
    readonly jobOfferId: FieldRef<"SendCandidature", 'String'>
    readonly savedAt: FieldRef<"SendCandidature", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SendCandidature findUnique
   */
  export type SendCandidatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter, which SendCandidature to fetch.
     */
    where: SendCandidatureWhereUniqueInput
  }

  /**
   * SendCandidature findUniqueOrThrow
   */
  export type SendCandidatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter, which SendCandidature to fetch.
     */
    where: SendCandidatureWhereUniqueInput
  }

  /**
   * SendCandidature findFirst
   */
  export type SendCandidatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter, which SendCandidature to fetch.
     */
    where?: SendCandidatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SendCandidatures to fetch.
     */
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SendCandidatures.
     */
    cursor?: SendCandidatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SendCandidatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SendCandidatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SendCandidatures.
     */
    distinct?: SendCandidatureScalarFieldEnum | SendCandidatureScalarFieldEnum[]
  }

  /**
   * SendCandidature findFirstOrThrow
   */
  export type SendCandidatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter, which SendCandidature to fetch.
     */
    where?: SendCandidatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SendCandidatures to fetch.
     */
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SendCandidatures.
     */
    cursor?: SendCandidatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SendCandidatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SendCandidatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SendCandidatures.
     */
    distinct?: SendCandidatureScalarFieldEnum | SendCandidatureScalarFieldEnum[]
  }

  /**
   * SendCandidature findMany
   */
  export type SendCandidatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter, which SendCandidatures to fetch.
     */
    where?: SendCandidatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SendCandidatures to fetch.
     */
    orderBy?: SendCandidatureOrderByWithRelationInput | SendCandidatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SendCandidatures.
     */
    cursor?: SendCandidatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SendCandidatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SendCandidatures.
     */
    skip?: number
    distinct?: SendCandidatureScalarFieldEnum | SendCandidatureScalarFieldEnum[]
  }

  /**
   * SendCandidature create
   */
  export type SendCandidatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * The data needed to create a SendCandidature.
     */
    data: XOR<SendCandidatureCreateInput, SendCandidatureUncheckedCreateInput>
  }

  /**
   * SendCandidature createMany
   */
  export type SendCandidatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SendCandidatures.
     */
    data: SendCandidatureCreateManyInput | SendCandidatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SendCandidature createManyAndReturn
   */
  export type SendCandidatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SendCandidatures.
     */
    data: SendCandidatureCreateManyInput | SendCandidatureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SendCandidature update
   */
  export type SendCandidatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * The data needed to update a SendCandidature.
     */
    data: XOR<SendCandidatureUpdateInput, SendCandidatureUncheckedUpdateInput>
    /**
     * Choose, which SendCandidature to update.
     */
    where: SendCandidatureWhereUniqueInput
  }

  /**
   * SendCandidature updateMany
   */
  export type SendCandidatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SendCandidatures.
     */
    data: XOR<SendCandidatureUpdateManyMutationInput, SendCandidatureUncheckedUpdateManyInput>
    /**
     * Filter which SendCandidatures to update
     */
    where?: SendCandidatureWhereInput
  }

  /**
   * SendCandidature upsert
   */
  export type SendCandidatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * The filter to search for the SendCandidature to update in case it exists.
     */
    where: SendCandidatureWhereUniqueInput
    /**
     * In case the SendCandidature found by the `where` argument doesn't exist, create a new SendCandidature with this data.
     */
    create: XOR<SendCandidatureCreateInput, SendCandidatureUncheckedCreateInput>
    /**
     * In case the SendCandidature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SendCandidatureUpdateInput, SendCandidatureUncheckedUpdateInput>
  }

  /**
   * SendCandidature delete
   */
  export type SendCandidatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
    /**
     * Filter which SendCandidature to delete.
     */
    where: SendCandidatureWhereUniqueInput
  }

  /**
   * SendCandidature deleteMany
   */
  export type SendCandidatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SendCandidatures to delete
     */
    where?: SendCandidatureWhereInput
  }

  /**
   * SendCandidature without action
   */
  export type SendCandidatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendCandidature
     */
    select?: SendCandidatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SendCandidatureInclude<ExtArgs> | null
  }


  /**
   * Model ContractTypeJob
   */

  export type AggregateContractTypeJob = {
    _count: ContractTypeJobCountAggregateOutputType | null
    _min: ContractTypeJobMinAggregateOutputType | null
    _max: ContractTypeJobMaxAggregateOutputType | null
  }

  export type ContractTypeJobMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ContractTypeJobMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ContractTypeJobCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ContractTypeJobMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ContractTypeJobMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ContractTypeJobCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ContractTypeJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractTypeJob to aggregate.
     */
    where?: ContractTypeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypeJobs to fetch.
     */
    orderBy?: ContractTypeJobOrderByWithRelationInput | ContractTypeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractTypeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractTypeJobs
    **/
    _count?: true | ContractTypeJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractTypeJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractTypeJobMaxAggregateInputType
  }

  export type GetContractTypeJobAggregateType<T extends ContractTypeJobAggregateArgs> = {
        [P in keyof T & keyof AggregateContractTypeJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractTypeJob[P]>
      : GetScalarType<T[P], AggregateContractTypeJob[P]>
  }




  export type ContractTypeJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractTypeJobWhereInput
    orderBy?: ContractTypeJobOrderByWithAggregationInput | ContractTypeJobOrderByWithAggregationInput[]
    by: ContractTypeJobScalarFieldEnum[] | ContractTypeJobScalarFieldEnum
    having?: ContractTypeJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractTypeJobCountAggregateInputType | true
    _min?: ContractTypeJobMinAggregateInputType
    _max?: ContractTypeJobMaxAggregateInputType
  }

  export type ContractTypeJobGroupByOutputType = {
    id: string
    name: string
    _count: ContractTypeJobCountAggregateOutputType | null
    _min: ContractTypeJobMinAggregateOutputType | null
    _max: ContractTypeJobMaxAggregateOutputType | null
  }

  type GetContractTypeJobGroupByPayload<T extends ContractTypeJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractTypeJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractTypeJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractTypeJobGroupByOutputType[P]>
            : GetScalarType<T[P], ContractTypeJobGroupByOutputType[P]>
        }
      >
    >


  export type ContractTypeJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    experience?: boolean | ContractTypeJob$experienceArgs<ExtArgs>
    jobOffers?: boolean | ContractTypeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ContractTypeJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractTypeJob"]>

  export type ContractTypeJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["contractTypeJob"]>

  export type ContractTypeJobSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ContractTypeJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experience?: boolean | ContractTypeJob$experienceArgs<ExtArgs>
    jobOffers?: boolean | ContractTypeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ContractTypeJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractTypeJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContractTypeJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractTypeJob"
    objects: {
      experience: Prisma.$ExperiencePayload<ExtArgs>[]
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["contractTypeJob"]>
    composites: {}
  }

  type ContractTypeJobGetPayload<S extends boolean | null | undefined | ContractTypeJobDefaultArgs> = $Result.GetResult<Prisma.$ContractTypeJobPayload, S>

  type ContractTypeJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractTypeJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractTypeJobCountAggregateInputType | true
    }

  export interface ContractTypeJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractTypeJob'], meta: { name: 'ContractTypeJob' } }
    /**
     * Find zero or one ContractTypeJob that matches the filter.
     * @param {ContractTypeJobFindUniqueArgs} args - Arguments to find a ContractTypeJob
     * @example
     * // Get one ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractTypeJobFindUniqueArgs>(args: SelectSubset<T, ContractTypeJobFindUniqueArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContractTypeJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractTypeJobFindUniqueOrThrowArgs} args - Arguments to find a ContractTypeJob
     * @example
     * // Get one ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractTypeJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractTypeJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContractTypeJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobFindFirstArgs} args - Arguments to find a ContractTypeJob
     * @example
     * // Get one ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractTypeJobFindFirstArgs>(args?: SelectSubset<T, ContractTypeJobFindFirstArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContractTypeJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobFindFirstOrThrowArgs} args - Arguments to find a ContractTypeJob
     * @example
     * // Get one ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractTypeJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractTypeJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContractTypeJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractTypeJobs
     * const contractTypeJobs = await prisma.contractTypeJob.findMany()
     * 
     * // Get first 10 ContractTypeJobs
     * const contractTypeJobs = await prisma.contractTypeJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractTypeJobWithIdOnly = await prisma.contractTypeJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractTypeJobFindManyArgs>(args?: SelectSubset<T, ContractTypeJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContractTypeJob.
     * @param {ContractTypeJobCreateArgs} args - Arguments to create a ContractTypeJob.
     * @example
     * // Create one ContractTypeJob
     * const ContractTypeJob = await prisma.contractTypeJob.create({
     *   data: {
     *     // ... data to create a ContractTypeJob
     *   }
     * })
     * 
     */
    create<T extends ContractTypeJobCreateArgs>(args: SelectSubset<T, ContractTypeJobCreateArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContractTypeJobs.
     * @param {ContractTypeJobCreateManyArgs} args - Arguments to create many ContractTypeJobs.
     * @example
     * // Create many ContractTypeJobs
     * const contractTypeJob = await prisma.contractTypeJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractTypeJobCreateManyArgs>(args?: SelectSubset<T, ContractTypeJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractTypeJobs and returns the data saved in the database.
     * @param {ContractTypeJobCreateManyAndReturnArgs} args - Arguments to create many ContractTypeJobs.
     * @example
     * // Create many ContractTypeJobs
     * const contractTypeJob = await prisma.contractTypeJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractTypeJobs and only return the `id`
     * const contractTypeJobWithIdOnly = await prisma.contractTypeJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractTypeJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractTypeJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContractTypeJob.
     * @param {ContractTypeJobDeleteArgs} args - Arguments to delete one ContractTypeJob.
     * @example
     * // Delete one ContractTypeJob
     * const ContractTypeJob = await prisma.contractTypeJob.delete({
     *   where: {
     *     // ... filter to delete one ContractTypeJob
     *   }
     * })
     * 
     */
    delete<T extends ContractTypeJobDeleteArgs>(args: SelectSubset<T, ContractTypeJobDeleteArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContractTypeJob.
     * @param {ContractTypeJobUpdateArgs} args - Arguments to update one ContractTypeJob.
     * @example
     * // Update one ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractTypeJobUpdateArgs>(args: SelectSubset<T, ContractTypeJobUpdateArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContractTypeJobs.
     * @param {ContractTypeJobDeleteManyArgs} args - Arguments to filter ContractTypeJobs to delete.
     * @example
     * // Delete a few ContractTypeJobs
     * const { count } = await prisma.contractTypeJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractTypeJobDeleteManyArgs>(args?: SelectSubset<T, ContractTypeJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractTypeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractTypeJobs
     * const contractTypeJob = await prisma.contractTypeJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractTypeJobUpdateManyArgs>(args: SelectSubset<T, ContractTypeJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContractTypeJob.
     * @param {ContractTypeJobUpsertArgs} args - Arguments to update or create a ContractTypeJob.
     * @example
     * // Update or create a ContractTypeJob
     * const contractTypeJob = await prisma.contractTypeJob.upsert({
     *   create: {
     *     // ... data to create a ContractTypeJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractTypeJob we want to update
     *   }
     * })
     */
    upsert<T extends ContractTypeJobUpsertArgs>(args: SelectSubset<T, ContractTypeJobUpsertArgs<ExtArgs>>): Prisma__ContractTypeJobClient<$Result.GetResult<Prisma.$ContractTypeJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContractTypeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobCountArgs} args - Arguments to filter ContractTypeJobs to count.
     * @example
     * // Count the number of ContractTypeJobs
     * const count = await prisma.contractTypeJob.count({
     *   where: {
     *     // ... the filter for the ContractTypeJobs we want to count
     *   }
     * })
    **/
    count<T extends ContractTypeJobCountArgs>(
      args?: Subset<T, ContractTypeJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractTypeJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractTypeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractTypeJobAggregateArgs>(args: Subset<T, ContractTypeJobAggregateArgs>): Prisma.PrismaPromise<GetContractTypeJobAggregateType<T>>

    /**
     * Group by ContractTypeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractTypeJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractTypeJobGroupByArgs['orderBy'] }
        : { orderBy?: ContractTypeJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractTypeJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractTypeJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractTypeJob model
   */
  readonly fields: ContractTypeJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractTypeJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractTypeJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experience<T extends ContractTypeJob$experienceArgs<ExtArgs> = {}>(args?: Subset<T, ContractTypeJob$experienceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany"> | Null>
    jobOffers<T extends ContractTypeJob$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, ContractTypeJob$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractTypeJob model
   */ 
  interface ContractTypeJobFieldRefs {
    readonly id: FieldRef<"ContractTypeJob", 'String'>
    readonly name: FieldRef<"ContractTypeJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractTypeJob findUnique
   */
  export type ContractTypeJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypeJob to fetch.
     */
    where: ContractTypeJobWhereUniqueInput
  }

  /**
   * ContractTypeJob findUniqueOrThrow
   */
  export type ContractTypeJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypeJob to fetch.
     */
    where: ContractTypeJobWhereUniqueInput
  }

  /**
   * ContractTypeJob findFirst
   */
  export type ContractTypeJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypeJob to fetch.
     */
    where?: ContractTypeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypeJobs to fetch.
     */
    orderBy?: ContractTypeJobOrderByWithRelationInput | ContractTypeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractTypeJobs.
     */
    cursor?: ContractTypeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractTypeJobs.
     */
    distinct?: ContractTypeJobScalarFieldEnum | ContractTypeJobScalarFieldEnum[]
  }

  /**
   * ContractTypeJob findFirstOrThrow
   */
  export type ContractTypeJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypeJob to fetch.
     */
    where?: ContractTypeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypeJobs to fetch.
     */
    orderBy?: ContractTypeJobOrderByWithRelationInput | ContractTypeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractTypeJobs.
     */
    cursor?: ContractTypeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractTypeJobs.
     */
    distinct?: ContractTypeJobScalarFieldEnum | ContractTypeJobScalarFieldEnum[]
  }

  /**
   * ContractTypeJob findMany
   */
  export type ContractTypeJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypeJobs to fetch.
     */
    where?: ContractTypeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypeJobs to fetch.
     */
    orderBy?: ContractTypeJobOrderByWithRelationInput | ContractTypeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractTypeJobs.
     */
    cursor?: ContractTypeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypeJobs.
     */
    skip?: number
    distinct?: ContractTypeJobScalarFieldEnum | ContractTypeJobScalarFieldEnum[]
  }

  /**
   * ContractTypeJob create
   */
  export type ContractTypeJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractTypeJob.
     */
    data: XOR<ContractTypeJobCreateInput, ContractTypeJobUncheckedCreateInput>
  }

  /**
   * ContractTypeJob createMany
   */
  export type ContractTypeJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractTypeJobs.
     */
    data: ContractTypeJobCreateManyInput | ContractTypeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractTypeJob createManyAndReturn
   */
  export type ContractTypeJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContractTypeJobs.
     */
    data: ContractTypeJobCreateManyInput | ContractTypeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractTypeJob update
   */
  export type ContractTypeJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractTypeJob.
     */
    data: XOR<ContractTypeJobUpdateInput, ContractTypeJobUncheckedUpdateInput>
    /**
     * Choose, which ContractTypeJob to update.
     */
    where: ContractTypeJobWhereUniqueInput
  }

  /**
   * ContractTypeJob updateMany
   */
  export type ContractTypeJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractTypeJobs.
     */
    data: XOR<ContractTypeJobUpdateManyMutationInput, ContractTypeJobUncheckedUpdateManyInput>
    /**
     * Filter which ContractTypeJobs to update
     */
    where?: ContractTypeJobWhereInput
  }

  /**
   * ContractTypeJob upsert
   */
  export type ContractTypeJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractTypeJob to update in case it exists.
     */
    where: ContractTypeJobWhereUniqueInput
    /**
     * In case the ContractTypeJob found by the `where` argument doesn't exist, create a new ContractTypeJob with this data.
     */
    create: XOR<ContractTypeJobCreateInput, ContractTypeJobUncheckedCreateInput>
    /**
     * In case the ContractTypeJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractTypeJobUpdateInput, ContractTypeJobUncheckedUpdateInput>
  }

  /**
   * ContractTypeJob delete
   */
  export type ContractTypeJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
    /**
     * Filter which ContractTypeJob to delete.
     */
    where: ContractTypeJobWhereUniqueInput
  }

  /**
   * ContractTypeJob deleteMany
   */
  export type ContractTypeJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractTypeJobs to delete
     */
    where?: ContractTypeJobWhereInput
  }

  /**
   * ContractTypeJob.experience
   */
  export type ContractTypeJob$experienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }

  /**
   * ContractTypeJob.jobOffers
   */
  export type ContractTypeJob$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * ContractTypeJob without action
   */
  export type ContractTypeJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeJob
     */
    select?: ContractTypeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeJobInclude<ExtArgs> | null
  }


  /**
   * Model ExperienceMinimalJob
   */

  export type AggregateExperienceMinimalJob = {
    _count: ExperienceMinimalJobCountAggregateOutputType | null
    _min: ExperienceMinimalJobMinAggregateOutputType | null
    _max: ExperienceMinimalJobMaxAggregateOutputType | null
  }

  export type ExperienceMinimalJobMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ExperienceMinimalJobMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ExperienceMinimalJobCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ExperienceMinimalJobMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ExperienceMinimalJobMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ExperienceMinimalJobCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ExperienceMinimalJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperienceMinimalJob to aggregate.
     */
    where?: ExperienceMinimalJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperienceMinimalJobs to fetch.
     */
    orderBy?: ExperienceMinimalJobOrderByWithRelationInput | ExperienceMinimalJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperienceMinimalJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperienceMinimalJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperienceMinimalJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExperienceMinimalJobs
    **/
    _count?: true | ExperienceMinimalJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperienceMinimalJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperienceMinimalJobMaxAggregateInputType
  }

  export type GetExperienceMinimalJobAggregateType<T extends ExperienceMinimalJobAggregateArgs> = {
        [P in keyof T & keyof AggregateExperienceMinimalJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperienceMinimalJob[P]>
      : GetScalarType<T[P], AggregateExperienceMinimalJob[P]>
  }




  export type ExperienceMinimalJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceMinimalJobWhereInput
    orderBy?: ExperienceMinimalJobOrderByWithAggregationInput | ExperienceMinimalJobOrderByWithAggregationInput[]
    by: ExperienceMinimalJobScalarFieldEnum[] | ExperienceMinimalJobScalarFieldEnum
    having?: ExperienceMinimalJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperienceMinimalJobCountAggregateInputType | true
    _min?: ExperienceMinimalJobMinAggregateInputType
    _max?: ExperienceMinimalJobMaxAggregateInputType
  }

  export type ExperienceMinimalJobGroupByOutputType = {
    id: string
    name: string
    _count: ExperienceMinimalJobCountAggregateOutputType | null
    _min: ExperienceMinimalJobMinAggregateOutputType | null
    _max: ExperienceMinimalJobMaxAggregateOutputType | null
  }

  type GetExperienceMinimalJobGroupByPayload<T extends ExperienceMinimalJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperienceMinimalJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperienceMinimalJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperienceMinimalJobGroupByOutputType[P]>
            : GetScalarType<T[P], ExperienceMinimalJobGroupByOutputType[P]>
        }
      >
    >


  export type ExperienceMinimalJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    jobOffers?: boolean | ExperienceMinimalJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ExperienceMinimalJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experienceMinimalJob"]>

  export type ExperienceMinimalJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["experienceMinimalJob"]>

  export type ExperienceMinimalJobSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ExperienceMinimalJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | ExperienceMinimalJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ExperienceMinimalJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExperienceMinimalJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExperienceMinimalJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExperienceMinimalJob"
    objects: {
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["experienceMinimalJob"]>
    composites: {}
  }

  type ExperienceMinimalJobGetPayload<S extends boolean | null | undefined | ExperienceMinimalJobDefaultArgs> = $Result.GetResult<Prisma.$ExperienceMinimalJobPayload, S>

  type ExperienceMinimalJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperienceMinimalJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperienceMinimalJobCountAggregateInputType | true
    }

  export interface ExperienceMinimalJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExperienceMinimalJob'], meta: { name: 'ExperienceMinimalJob' } }
    /**
     * Find zero or one ExperienceMinimalJob that matches the filter.
     * @param {ExperienceMinimalJobFindUniqueArgs} args - Arguments to find a ExperienceMinimalJob
     * @example
     * // Get one ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperienceMinimalJobFindUniqueArgs>(args: SelectSubset<T, ExperienceMinimalJobFindUniqueArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExperienceMinimalJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExperienceMinimalJobFindUniqueOrThrowArgs} args - Arguments to find a ExperienceMinimalJob
     * @example
     * // Get one ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperienceMinimalJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperienceMinimalJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExperienceMinimalJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobFindFirstArgs} args - Arguments to find a ExperienceMinimalJob
     * @example
     * // Get one ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperienceMinimalJobFindFirstArgs>(args?: SelectSubset<T, ExperienceMinimalJobFindFirstArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExperienceMinimalJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobFindFirstOrThrowArgs} args - Arguments to find a ExperienceMinimalJob
     * @example
     * // Get one ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperienceMinimalJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperienceMinimalJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExperienceMinimalJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExperienceMinimalJobs
     * const experienceMinimalJobs = await prisma.experienceMinimalJob.findMany()
     * 
     * // Get first 10 ExperienceMinimalJobs
     * const experienceMinimalJobs = await prisma.experienceMinimalJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experienceMinimalJobWithIdOnly = await prisma.experienceMinimalJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperienceMinimalJobFindManyArgs>(args?: SelectSubset<T, ExperienceMinimalJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExperienceMinimalJob.
     * @param {ExperienceMinimalJobCreateArgs} args - Arguments to create a ExperienceMinimalJob.
     * @example
     * // Create one ExperienceMinimalJob
     * const ExperienceMinimalJob = await prisma.experienceMinimalJob.create({
     *   data: {
     *     // ... data to create a ExperienceMinimalJob
     *   }
     * })
     * 
     */
    create<T extends ExperienceMinimalJobCreateArgs>(args: SelectSubset<T, ExperienceMinimalJobCreateArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExperienceMinimalJobs.
     * @param {ExperienceMinimalJobCreateManyArgs} args - Arguments to create many ExperienceMinimalJobs.
     * @example
     * // Create many ExperienceMinimalJobs
     * const experienceMinimalJob = await prisma.experienceMinimalJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperienceMinimalJobCreateManyArgs>(args?: SelectSubset<T, ExperienceMinimalJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExperienceMinimalJobs and returns the data saved in the database.
     * @param {ExperienceMinimalJobCreateManyAndReturnArgs} args - Arguments to create many ExperienceMinimalJobs.
     * @example
     * // Create many ExperienceMinimalJobs
     * const experienceMinimalJob = await prisma.experienceMinimalJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExperienceMinimalJobs and only return the `id`
     * const experienceMinimalJobWithIdOnly = await prisma.experienceMinimalJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperienceMinimalJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperienceMinimalJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExperienceMinimalJob.
     * @param {ExperienceMinimalJobDeleteArgs} args - Arguments to delete one ExperienceMinimalJob.
     * @example
     * // Delete one ExperienceMinimalJob
     * const ExperienceMinimalJob = await prisma.experienceMinimalJob.delete({
     *   where: {
     *     // ... filter to delete one ExperienceMinimalJob
     *   }
     * })
     * 
     */
    delete<T extends ExperienceMinimalJobDeleteArgs>(args: SelectSubset<T, ExperienceMinimalJobDeleteArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExperienceMinimalJob.
     * @param {ExperienceMinimalJobUpdateArgs} args - Arguments to update one ExperienceMinimalJob.
     * @example
     * // Update one ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperienceMinimalJobUpdateArgs>(args: SelectSubset<T, ExperienceMinimalJobUpdateArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExperienceMinimalJobs.
     * @param {ExperienceMinimalJobDeleteManyArgs} args - Arguments to filter ExperienceMinimalJobs to delete.
     * @example
     * // Delete a few ExperienceMinimalJobs
     * const { count } = await prisma.experienceMinimalJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperienceMinimalJobDeleteManyArgs>(args?: SelectSubset<T, ExperienceMinimalJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExperienceMinimalJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExperienceMinimalJobs
     * const experienceMinimalJob = await prisma.experienceMinimalJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperienceMinimalJobUpdateManyArgs>(args: SelectSubset<T, ExperienceMinimalJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExperienceMinimalJob.
     * @param {ExperienceMinimalJobUpsertArgs} args - Arguments to update or create a ExperienceMinimalJob.
     * @example
     * // Update or create a ExperienceMinimalJob
     * const experienceMinimalJob = await prisma.experienceMinimalJob.upsert({
     *   create: {
     *     // ... data to create a ExperienceMinimalJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExperienceMinimalJob we want to update
     *   }
     * })
     */
    upsert<T extends ExperienceMinimalJobUpsertArgs>(args: SelectSubset<T, ExperienceMinimalJobUpsertArgs<ExtArgs>>): Prisma__ExperienceMinimalJobClient<$Result.GetResult<Prisma.$ExperienceMinimalJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExperienceMinimalJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobCountArgs} args - Arguments to filter ExperienceMinimalJobs to count.
     * @example
     * // Count the number of ExperienceMinimalJobs
     * const count = await prisma.experienceMinimalJob.count({
     *   where: {
     *     // ... the filter for the ExperienceMinimalJobs we want to count
     *   }
     * })
    **/
    count<T extends ExperienceMinimalJobCountArgs>(
      args?: Subset<T, ExperienceMinimalJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperienceMinimalJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExperienceMinimalJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperienceMinimalJobAggregateArgs>(args: Subset<T, ExperienceMinimalJobAggregateArgs>): Prisma.PrismaPromise<GetExperienceMinimalJobAggregateType<T>>

    /**
     * Group by ExperienceMinimalJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceMinimalJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperienceMinimalJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperienceMinimalJobGroupByArgs['orderBy'] }
        : { orderBy?: ExperienceMinimalJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperienceMinimalJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceMinimalJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExperienceMinimalJob model
   */
  readonly fields: ExperienceMinimalJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExperienceMinimalJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperienceMinimalJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobOffers<T extends ExperienceMinimalJob$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, ExperienceMinimalJob$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExperienceMinimalJob model
   */ 
  interface ExperienceMinimalJobFieldRefs {
    readonly id: FieldRef<"ExperienceMinimalJob", 'String'>
    readonly name: FieldRef<"ExperienceMinimalJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExperienceMinimalJob findUnique
   */
  export type ExperienceMinimalJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter, which ExperienceMinimalJob to fetch.
     */
    where: ExperienceMinimalJobWhereUniqueInput
  }

  /**
   * ExperienceMinimalJob findUniqueOrThrow
   */
  export type ExperienceMinimalJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter, which ExperienceMinimalJob to fetch.
     */
    where: ExperienceMinimalJobWhereUniqueInput
  }

  /**
   * ExperienceMinimalJob findFirst
   */
  export type ExperienceMinimalJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter, which ExperienceMinimalJob to fetch.
     */
    where?: ExperienceMinimalJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperienceMinimalJobs to fetch.
     */
    orderBy?: ExperienceMinimalJobOrderByWithRelationInput | ExperienceMinimalJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperienceMinimalJobs.
     */
    cursor?: ExperienceMinimalJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperienceMinimalJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperienceMinimalJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperienceMinimalJobs.
     */
    distinct?: ExperienceMinimalJobScalarFieldEnum | ExperienceMinimalJobScalarFieldEnum[]
  }

  /**
   * ExperienceMinimalJob findFirstOrThrow
   */
  export type ExperienceMinimalJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter, which ExperienceMinimalJob to fetch.
     */
    where?: ExperienceMinimalJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperienceMinimalJobs to fetch.
     */
    orderBy?: ExperienceMinimalJobOrderByWithRelationInput | ExperienceMinimalJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperienceMinimalJobs.
     */
    cursor?: ExperienceMinimalJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperienceMinimalJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperienceMinimalJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperienceMinimalJobs.
     */
    distinct?: ExperienceMinimalJobScalarFieldEnum | ExperienceMinimalJobScalarFieldEnum[]
  }

  /**
   * ExperienceMinimalJob findMany
   */
  export type ExperienceMinimalJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter, which ExperienceMinimalJobs to fetch.
     */
    where?: ExperienceMinimalJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperienceMinimalJobs to fetch.
     */
    orderBy?: ExperienceMinimalJobOrderByWithRelationInput | ExperienceMinimalJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExperienceMinimalJobs.
     */
    cursor?: ExperienceMinimalJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperienceMinimalJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperienceMinimalJobs.
     */
    skip?: number
    distinct?: ExperienceMinimalJobScalarFieldEnum | ExperienceMinimalJobScalarFieldEnum[]
  }

  /**
   * ExperienceMinimalJob create
   */
  export type ExperienceMinimalJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ExperienceMinimalJob.
     */
    data: XOR<ExperienceMinimalJobCreateInput, ExperienceMinimalJobUncheckedCreateInput>
  }

  /**
   * ExperienceMinimalJob createMany
   */
  export type ExperienceMinimalJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExperienceMinimalJobs.
     */
    data: ExperienceMinimalJobCreateManyInput | ExperienceMinimalJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExperienceMinimalJob createManyAndReturn
   */
  export type ExperienceMinimalJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExperienceMinimalJobs.
     */
    data: ExperienceMinimalJobCreateManyInput | ExperienceMinimalJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExperienceMinimalJob update
   */
  export type ExperienceMinimalJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ExperienceMinimalJob.
     */
    data: XOR<ExperienceMinimalJobUpdateInput, ExperienceMinimalJobUncheckedUpdateInput>
    /**
     * Choose, which ExperienceMinimalJob to update.
     */
    where: ExperienceMinimalJobWhereUniqueInput
  }

  /**
   * ExperienceMinimalJob updateMany
   */
  export type ExperienceMinimalJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExperienceMinimalJobs.
     */
    data: XOR<ExperienceMinimalJobUpdateManyMutationInput, ExperienceMinimalJobUncheckedUpdateManyInput>
    /**
     * Filter which ExperienceMinimalJobs to update
     */
    where?: ExperienceMinimalJobWhereInput
  }

  /**
   * ExperienceMinimalJob upsert
   */
  export type ExperienceMinimalJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ExperienceMinimalJob to update in case it exists.
     */
    where: ExperienceMinimalJobWhereUniqueInput
    /**
     * In case the ExperienceMinimalJob found by the `where` argument doesn't exist, create a new ExperienceMinimalJob with this data.
     */
    create: XOR<ExperienceMinimalJobCreateInput, ExperienceMinimalJobUncheckedCreateInput>
    /**
     * In case the ExperienceMinimalJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperienceMinimalJobUpdateInput, ExperienceMinimalJobUncheckedUpdateInput>
  }

  /**
   * ExperienceMinimalJob delete
   */
  export type ExperienceMinimalJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
    /**
     * Filter which ExperienceMinimalJob to delete.
     */
    where: ExperienceMinimalJobWhereUniqueInput
  }

  /**
   * ExperienceMinimalJob deleteMany
   */
  export type ExperienceMinimalJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperienceMinimalJobs to delete
     */
    where?: ExperienceMinimalJobWhereInput
  }

  /**
   * ExperienceMinimalJob.jobOffers
   */
  export type ExperienceMinimalJob$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * ExperienceMinimalJob without action
   */
  export type ExperienceMinimalJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceMinimalJob
     */
    select?: ExperienceMinimalJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperienceMinimalJobInclude<ExtArgs> | null
  }


  /**
   * Model ModeJob
   */

  export type AggregateModeJob = {
    _count: ModeJobCountAggregateOutputType | null
    _min: ModeJobMinAggregateOutputType | null
    _max: ModeJobMaxAggregateOutputType | null
  }

  export type ModeJobMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ModeJobMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ModeJobCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ModeJobMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ModeJobMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ModeJobCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ModeJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeJob to aggregate.
     */
    where?: ModeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeJobs to fetch.
     */
    orderBy?: ModeJobOrderByWithRelationInput | ModeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ModeJobs
    **/
    _count?: true | ModeJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeJobMaxAggregateInputType
  }

  export type GetModeJobAggregateType<T extends ModeJobAggregateArgs> = {
        [P in keyof T & keyof AggregateModeJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModeJob[P]>
      : GetScalarType<T[P], AggregateModeJob[P]>
  }




  export type ModeJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeJobWhereInput
    orderBy?: ModeJobOrderByWithAggregationInput | ModeJobOrderByWithAggregationInput[]
    by: ModeJobScalarFieldEnum[] | ModeJobScalarFieldEnum
    having?: ModeJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeJobCountAggregateInputType | true
    _min?: ModeJobMinAggregateInputType
    _max?: ModeJobMaxAggregateInputType
  }

  export type ModeJobGroupByOutputType = {
    id: string
    name: string
    _count: ModeJobCountAggregateOutputType | null
    _min: ModeJobMinAggregateOutputType | null
    _max: ModeJobMaxAggregateOutputType | null
  }

  type GetModeJobGroupByPayload<T extends ModeJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModeJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeJobGroupByOutputType[P]>
            : GetScalarType<T[P], ModeJobGroupByOutputType[P]>
        }
      >
    >


  export type ModeJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    jobOffers?: boolean | ModeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ModeJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modeJob"]>

  export type ModeJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["modeJob"]>

  export type ModeJobSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ModeJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | ModeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | ModeJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModeJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ModeJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ModeJob"
    objects: {
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["modeJob"]>
    composites: {}
  }

  type ModeJobGetPayload<S extends boolean | null | undefined | ModeJobDefaultArgs> = $Result.GetResult<Prisma.$ModeJobPayload, S>

  type ModeJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModeJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModeJobCountAggregateInputType | true
    }

  export interface ModeJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModeJob'], meta: { name: 'ModeJob' } }
    /**
     * Find zero or one ModeJob that matches the filter.
     * @param {ModeJobFindUniqueArgs} args - Arguments to find a ModeJob
     * @example
     * // Get one ModeJob
     * const modeJob = await prisma.modeJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModeJobFindUniqueArgs>(args: SelectSubset<T, ModeJobFindUniqueArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ModeJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModeJobFindUniqueOrThrowArgs} args - Arguments to find a ModeJob
     * @example
     * // Get one ModeJob
     * const modeJob = await prisma.modeJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModeJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ModeJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ModeJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobFindFirstArgs} args - Arguments to find a ModeJob
     * @example
     * // Get one ModeJob
     * const modeJob = await prisma.modeJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModeJobFindFirstArgs>(args?: SelectSubset<T, ModeJobFindFirstArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ModeJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobFindFirstOrThrowArgs} args - Arguments to find a ModeJob
     * @example
     * // Get one ModeJob
     * const modeJob = await prisma.modeJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModeJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ModeJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ModeJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ModeJobs
     * const modeJobs = await prisma.modeJob.findMany()
     * 
     * // Get first 10 ModeJobs
     * const modeJobs = await prisma.modeJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modeJobWithIdOnly = await prisma.modeJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModeJobFindManyArgs>(args?: SelectSubset<T, ModeJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ModeJob.
     * @param {ModeJobCreateArgs} args - Arguments to create a ModeJob.
     * @example
     * // Create one ModeJob
     * const ModeJob = await prisma.modeJob.create({
     *   data: {
     *     // ... data to create a ModeJob
     *   }
     * })
     * 
     */
    create<T extends ModeJobCreateArgs>(args: SelectSubset<T, ModeJobCreateArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ModeJobs.
     * @param {ModeJobCreateManyArgs} args - Arguments to create many ModeJobs.
     * @example
     * // Create many ModeJobs
     * const modeJob = await prisma.modeJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModeJobCreateManyArgs>(args?: SelectSubset<T, ModeJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ModeJobs and returns the data saved in the database.
     * @param {ModeJobCreateManyAndReturnArgs} args - Arguments to create many ModeJobs.
     * @example
     * // Create many ModeJobs
     * const modeJob = await prisma.modeJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ModeJobs and only return the `id`
     * const modeJobWithIdOnly = await prisma.modeJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModeJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ModeJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ModeJob.
     * @param {ModeJobDeleteArgs} args - Arguments to delete one ModeJob.
     * @example
     * // Delete one ModeJob
     * const ModeJob = await prisma.modeJob.delete({
     *   where: {
     *     // ... filter to delete one ModeJob
     *   }
     * })
     * 
     */
    delete<T extends ModeJobDeleteArgs>(args: SelectSubset<T, ModeJobDeleteArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ModeJob.
     * @param {ModeJobUpdateArgs} args - Arguments to update one ModeJob.
     * @example
     * // Update one ModeJob
     * const modeJob = await prisma.modeJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModeJobUpdateArgs>(args: SelectSubset<T, ModeJobUpdateArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ModeJobs.
     * @param {ModeJobDeleteManyArgs} args - Arguments to filter ModeJobs to delete.
     * @example
     * // Delete a few ModeJobs
     * const { count } = await prisma.modeJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModeJobDeleteManyArgs>(args?: SelectSubset<T, ModeJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ModeJobs
     * const modeJob = await prisma.modeJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModeJobUpdateManyArgs>(args: SelectSubset<T, ModeJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ModeJob.
     * @param {ModeJobUpsertArgs} args - Arguments to update or create a ModeJob.
     * @example
     * // Update or create a ModeJob
     * const modeJob = await prisma.modeJob.upsert({
     *   create: {
     *     // ... data to create a ModeJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ModeJob we want to update
     *   }
     * })
     */
    upsert<T extends ModeJobUpsertArgs>(args: SelectSubset<T, ModeJobUpsertArgs<ExtArgs>>): Prisma__ModeJobClient<$Result.GetResult<Prisma.$ModeJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ModeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobCountArgs} args - Arguments to filter ModeJobs to count.
     * @example
     * // Count the number of ModeJobs
     * const count = await prisma.modeJob.count({
     *   where: {
     *     // ... the filter for the ModeJobs we want to count
     *   }
     * })
    **/
    count<T extends ModeJobCountArgs>(
      args?: Subset<T, ModeJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ModeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeJobAggregateArgs>(args: Subset<T, ModeJobAggregateArgs>): Prisma.PrismaPromise<GetModeJobAggregateType<T>>

    /**
     * Group by ModeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeJobGroupByArgs['orderBy'] }
        : { orderBy?: ModeJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ModeJob model
   */
  readonly fields: ModeJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ModeJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModeJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobOffers<T extends ModeJob$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, ModeJob$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ModeJob model
   */ 
  interface ModeJobFieldRefs {
    readonly id: FieldRef<"ModeJob", 'String'>
    readonly name: FieldRef<"ModeJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ModeJob findUnique
   */
  export type ModeJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter, which ModeJob to fetch.
     */
    where: ModeJobWhereUniqueInput
  }

  /**
   * ModeJob findUniqueOrThrow
   */
  export type ModeJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter, which ModeJob to fetch.
     */
    where: ModeJobWhereUniqueInput
  }

  /**
   * ModeJob findFirst
   */
  export type ModeJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter, which ModeJob to fetch.
     */
    where?: ModeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeJobs to fetch.
     */
    orderBy?: ModeJobOrderByWithRelationInput | ModeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeJobs.
     */
    cursor?: ModeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeJobs.
     */
    distinct?: ModeJobScalarFieldEnum | ModeJobScalarFieldEnum[]
  }

  /**
   * ModeJob findFirstOrThrow
   */
  export type ModeJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter, which ModeJob to fetch.
     */
    where?: ModeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeJobs to fetch.
     */
    orderBy?: ModeJobOrderByWithRelationInput | ModeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeJobs.
     */
    cursor?: ModeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeJobs.
     */
    distinct?: ModeJobScalarFieldEnum | ModeJobScalarFieldEnum[]
  }

  /**
   * ModeJob findMany
   */
  export type ModeJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter, which ModeJobs to fetch.
     */
    where?: ModeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeJobs to fetch.
     */
    orderBy?: ModeJobOrderByWithRelationInput | ModeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ModeJobs.
     */
    cursor?: ModeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeJobs.
     */
    skip?: number
    distinct?: ModeJobScalarFieldEnum | ModeJobScalarFieldEnum[]
  }

  /**
   * ModeJob create
   */
  export type ModeJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ModeJob.
     */
    data: XOR<ModeJobCreateInput, ModeJobUncheckedCreateInput>
  }

  /**
   * ModeJob createMany
   */
  export type ModeJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ModeJobs.
     */
    data: ModeJobCreateManyInput | ModeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ModeJob createManyAndReturn
   */
  export type ModeJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ModeJobs.
     */
    data: ModeJobCreateManyInput | ModeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ModeJob update
   */
  export type ModeJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ModeJob.
     */
    data: XOR<ModeJobUpdateInput, ModeJobUncheckedUpdateInput>
    /**
     * Choose, which ModeJob to update.
     */
    where: ModeJobWhereUniqueInput
  }

  /**
   * ModeJob updateMany
   */
  export type ModeJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ModeJobs.
     */
    data: XOR<ModeJobUpdateManyMutationInput, ModeJobUncheckedUpdateManyInput>
    /**
     * Filter which ModeJobs to update
     */
    where?: ModeJobWhereInput
  }

  /**
   * ModeJob upsert
   */
  export type ModeJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ModeJob to update in case it exists.
     */
    where: ModeJobWhereUniqueInput
    /**
     * In case the ModeJob found by the `where` argument doesn't exist, create a new ModeJob with this data.
     */
    create: XOR<ModeJobCreateInput, ModeJobUncheckedCreateInput>
    /**
     * In case the ModeJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeJobUpdateInput, ModeJobUncheckedUpdateInput>
  }

  /**
   * ModeJob delete
   */
  export type ModeJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
    /**
     * Filter which ModeJob to delete.
     */
    where: ModeJobWhereUniqueInput
  }

  /**
   * ModeJob deleteMany
   */
  export type ModeJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeJobs to delete
     */
    where?: ModeJobWhereInput
  }

  /**
   * ModeJob.jobOffers
   */
  export type ModeJob$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * ModeJob without action
   */
  export type ModeJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeJob
     */
    select?: ModeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeJobInclude<ExtArgs> | null
  }


  /**
   * Model WorkingTimeJob
   */

  export type AggregateWorkingTimeJob = {
    _count: WorkingTimeJobCountAggregateOutputType | null
    _min: WorkingTimeJobMinAggregateOutputType | null
    _max: WorkingTimeJobMaxAggregateOutputType | null
  }

  export type WorkingTimeJobMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type WorkingTimeJobMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type WorkingTimeJobCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type WorkingTimeJobMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type WorkingTimeJobMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type WorkingTimeJobCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type WorkingTimeJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingTimeJob to aggregate.
     */
    where?: WorkingTimeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimeJobs to fetch.
     */
    orderBy?: WorkingTimeJobOrderByWithRelationInput | WorkingTimeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkingTimeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkingTimeJobs
    **/
    _count?: true | WorkingTimeJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkingTimeJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkingTimeJobMaxAggregateInputType
  }

  export type GetWorkingTimeJobAggregateType<T extends WorkingTimeJobAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkingTimeJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkingTimeJob[P]>
      : GetScalarType<T[P], AggregateWorkingTimeJob[P]>
  }




  export type WorkingTimeJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkingTimeJobWhereInput
    orderBy?: WorkingTimeJobOrderByWithAggregationInput | WorkingTimeJobOrderByWithAggregationInput[]
    by: WorkingTimeJobScalarFieldEnum[] | WorkingTimeJobScalarFieldEnum
    having?: WorkingTimeJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkingTimeJobCountAggregateInputType | true
    _min?: WorkingTimeJobMinAggregateInputType
    _max?: WorkingTimeJobMaxAggregateInputType
  }

  export type WorkingTimeJobGroupByOutputType = {
    id: string
    name: string
    _count: WorkingTimeJobCountAggregateOutputType | null
    _min: WorkingTimeJobMinAggregateOutputType | null
    _max: WorkingTimeJobMaxAggregateOutputType | null
  }

  type GetWorkingTimeJobGroupByPayload<T extends WorkingTimeJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkingTimeJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkingTimeJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkingTimeJobGroupByOutputType[P]>
            : GetScalarType<T[P], WorkingTimeJobGroupByOutputType[P]>
        }
      >
    >


  export type WorkingTimeJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    jobOffers?: boolean | WorkingTimeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | WorkingTimeJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workingTimeJob"]>

  export type WorkingTimeJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["workingTimeJob"]>

  export type WorkingTimeJobSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type WorkingTimeJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | WorkingTimeJob$jobOffersArgs<ExtArgs>
    _count?: boolean | WorkingTimeJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkingTimeJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkingTimeJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkingTimeJob"
    objects: {
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["workingTimeJob"]>
    composites: {}
  }

  type WorkingTimeJobGetPayload<S extends boolean | null | undefined | WorkingTimeJobDefaultArgs> = $Result.GetResult<Prisma.$WorkingTimeJobPayload, S>

  type WorkingTimeJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkingTimeJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkingTimeJobCountAggregateInputType | true
    }

  export interface WorkingTimeJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkingTimeJob'], meta: { name: 'WorkingTimeJob' } }
    /**
     * Find zero or one WorkingTimeJob that matches the filter.
     * @param {WorkingTimeJobFindUniqueArgs} args - Arguments to find a WorkingTimeJob
     * @example
     * // Get one WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkingTimeJobFindUniqueArgs>(args: SelectSubset<T, WorkingTimeJobFindUniqueArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkingTimeJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkingTimeJobFindUniqueOrThrowArgs} args - Arguments to find a WorkingTimeJob
     * @example
     * // Get one WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkingTimeJobFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkingTimeJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkingTimeJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobFindFirstArgs} args - Arguments to find a WorkingTimeJob
     * @example
     * // Get one WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkingTimeJobFindFirstArgs>(args?: SelectSubset<T, WorkingTimeJobFindFirstArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkingTimeJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobFindFirstOrThrowArgs} args - Arguments to find a WorkingTimeJob
     * @example
     * // Get one WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkingTimeJobFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkingTimeJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkingTimeJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkingTimeJobs
     * const workingTimeJobs = await prisma.workingTimeJob.findMany()
     * 
     * // Get first 10 WorkingTimeJobs
     * const workingTimeJobs = await prisma.workingTimeJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workingTimeJobWithIdOnly = await prisma.workingTimeJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkingTimeJobFindManyArgs>(args?: SelectSubset<T, WorkingTimeJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkingTimeJob.
     * @param {WorkingTimeJobCreateArgs} args - Arguments to create a WorkingTimeJob.
     * @example
     * // Create one WorkingTimeJob
     * const WorkingTimeJob = await prisma.workingTimeJob.create({
     *   data: {
     *     // ... data to create a WorkingTimeJob
     *   }
     * })
     * 
     */
    create<T extends WorkingTimeJobCreateArgs>(args: SelectSubset<T, WorkingTimeJobCreateArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkingTimeJobs.
     * @param {WorkingTimeJobCreateManyArgs} args - Arguments to create many WorkingTimeJobs.
     * @example
     * // Create many WorkingTimeJobs
     * const workingTimeJob = await prisma.workingTimeJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkingTimeJobCreateManyArgs>(args?: SelectSubset<T, WorkingTimeJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkingTimeJobs and returns the data saved in the database.
     * @param {WorkingTimeJobCreateManyAndReturnArgs} args - Arguments to create many WorkingTimeJobs.
     * @example
     * // Create many WorkingTimeJobs
     * const workingTimeJob = await prisma.workingTimeJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkingTimeJobs and only return the `id`
     * const workingTimeJobWithIdOnly = await prisma.workingTimeJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkingTimeJobCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkingTimeJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkingTimeJob.
     * @param {WorkingTimeJobDeleteArgs} args - Arguments to delete one WorkingTimeJob.
     * @example
     * // Delete one WorkingTimeJob
     * const WorkingTimeJob = await prisma.workingTimeJob.delete({
     *   where: {
     *     // ... filter to delete one WorkingTimeJob
     *   }
     * })
     * 
     */
    delete<T extends WorkingTimeJobDeleteArgs>(args: SelectSubset<T, WorkingTimeJobDeleteArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkingTimeJob.
     * @param {WorkingTimeJobUpdateArgs} args - Arguments to update one WorkingTimeJob.
     * @example
     * // Update one WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkingTimeJobUpdateArgs>(args: SelectSubset<T, WorkingTimeJobUpdateArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkingTimeJobs.
     * @param {WorkingTimeJobDeleteManyArgs} args - Arguments to filter WorkingTimeJobs to delete.
     * @example
     * // Delete a few WorkingTimeJobs
     * const { count } = await prisma.workingTimeJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkingTimeJobDeleteManyArgs>(args?: SelectSubset<T, WorkingTimeJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkingTimeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkingTimeJobs
     * const workingTimeJob = await prisma.workingTimeJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkingTimeJobUpdateManyArgs>(args: SelectSubset<T, WorkingTimeJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkingTimeJob.
     * @param {WorkingTimeJobUpsertArgs} args - Arguments to update or create a WorkingTimeJob.
     * @example
     * // Update or create a WorkingTimeJob
     * const workingTimeJob = await prisma.workingTimeJob.upsert({
     *   create: {
     *     // ... data to create a WorkingTimeJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkingTimeJob we want to update
     *   }
     * })
     */
    upsert<T extends WorkingTimeJobUpsertArgs>(args: SelectSubset<T, WorkingTimeJobUpsertArgs<ExtArgs>>): Prisma__WorkingTimeJobClient<$Result.GetResult<Prisma.$WorkingTimeJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkingTimeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobCountArgs} args - Arguments to filter WorkingTimeJobs to count.
     * @example
     * // Count the number of WorkingTimeJobs
     * const count = await prisma.workingTimeJob.count({
     *   where: {
     *     // ... the filter for the WorkingTimeJobs we want to count
     *   }
     * })
    **/
    count<T extends WorkingTimeJobCountArgs>(
      args?: Subset<T, WorkingTimeJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkingTimeJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkingTimeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkingTimeJobAggregateArgs>(args: Subset<T, WorkingTimeJobAggregateArgs>): Prisma.PrismaPromise<GetWorkingTimeJobAggregateType<T>>

    /**
     * Group by WorkingTimeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingTimeJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkingTimeJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkingTimeJobGroupByArgs['orderBy'] }
        : { orderBy?: WorkingTimeJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkingTimeJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkingTimeJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkingTimeJob model
   */
  readonly fields: WorkingTimeJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkingTimeJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkingTimeJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobOffers<T extends WorkingTimeJob$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, WorkingTimeJob$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkingTimeJob model
   */ 
  interface WorkingTimeJobFieldRefs {
    readonly id: FieldRef<"WorkingTimeJob", 'String'>
    readonly name: FieldRef<"WorkingTimeJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkingTimeJob findUnique
   */
  export type WorkingTimeJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimeJob to fetch.
     */
    where: WorkingTimeJobWhereUniqueInput
  }

  /**
   * WorkingTimeJob findUniqueOrThrow
   */
  export type WorkingTimeJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimeJob to fetch.
     */
    where: WorkingTimeJobWhereUniqueInput
  }

  /**
   * WorkingTimeJob findFirst
   */
  export type WorkingTimeJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimeJob to fetch.
     */
    where?: WorkingTimeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimeJobs to fetch.
     */
    orderBy?: WorkingTimeJobOrderByWithRelationInput | WorkingTimeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingTimeJobs.
     */
    cursor?: WorkingTimeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingTimeJobs.
     */
    distinct?: WorkingTimeJobScalarFieldEnum | WorkingTimeJobScalarFieldEnum[]
  }

  /**
   * WorkingTimeJob findFirstOrThrow
   */
  export type WorkingTimeJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimeJob to fetch.
     */
    where?: WorkingTimeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimeJobs to fetch.
     */
    orderBy?: WorkingTimeJobOrderByWithRelationInput | WorkingTimeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingTimeJobs.
     */
    cursor?: WorkingTimeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingTimeJobs.
     */
    distinct?: WorkingTimeJobScalarFieldEnum | WorkingTimeJobScalarFieldEnum[]
  }

  /**
   * WorkingTimeJob findMany
   */
  export type WorkingTimeJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter, which WorkingTimeJobs to fetch.
     */
    where?: WorkingTimeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingTimeJobs to fetch.
     */
    orderBy?: WorkingTimeJobOrderByWithRelationInput | WorkingTimeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkingTimeJobs.
     */
    cursor?: WorkingTimeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingTimeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingTimeJobs.
     */
    skip?: number
    distinct?: WorkingTimeJobScalarFieldEnum | WorkingTimeJobScalarFieldEnum[]
  }

  /**
   * WorkingTimeJob create
   */
  export type WorkingTimeJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkingTimeJob.
     */
    data: XOR<WorkingTimeJobCreateInput, WorkingTimeJobUncheckedCreateInput>
  }

  /**
   * WorkingTimeJob createMany
   */
  export type WorkingTimeJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkingTimeJobs.
     */
    data: WorkingTimeJobCreateManyInput | WorkingTimeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkingTimeJob createManyAndReturn
   */
  export type WorkingTimeJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkingTimeJobs.
     */
    data: WorkingTimeJobCreateManyInput | WorkingTimeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkingTimeJob update
   */
  export type WorkingTimeJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkingTimeJob.
     */
    data: XOR<WorkingTimeJobUpdateInput, WorkingTimeJobUncheckedUpdateInput>
    /**
     * Choose, which WorkingTimeJob to update.
     */
    where: WorkingTimeJobWhereUniqueInput
  }

  /**
   * WorkingTimeJob updateMany
   */
  export type WorkingTimeJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkingTimeJobs.
     */
    data: XOR<WorkingTimeJobUpdateManyMutationInput, WorkingTimeJobUncheckedUpdateManyInput>
    /**
     * Filter which WorkingTimeJobs to update
     */
    where?: WorkingTimeJobWhereInput
  }

  /**
   * WorkingTimeJob upsert
   */
  export type WorkingTimeJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkingTimeJob to update in case it exists.
     */
    where: WorkingTimeJobWhereUniqueInput
    /**
     * In case the WorkingTimeJob found by the `where` argument doesn't exist, create a new WorkingTimeJob with this data.
     */
    create: XOR<WorkingTimeJobCreateInput, WorkingTimeJobUncheckedCreateInput>
    /**
     * In case the WorkingTimeJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkingTimeJobUpdateInput, WorkingTimeJobUncheckedUpdateInput>
  }

  /**
   * WorkingTimeJob delete
   */
  export type WorkingTimeJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
    /**
     * Filter which WorkingTimeJob to delete.
     */
    where: WorkingTimeJobWhereUniqueInput
  }

  /**
   * WorkingTimeJob deleteMany
   */
  export type WorkingTimeJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingTimeJobs to delete
     */
    where?: WorkingTimeJobWhereInput
  }

  /**
   * WorkingTimeJob.jobOffers
   */
  export type WorkingTimeJob$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * WorkingTimeJob without action
   */
  export type WorkingTimeJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingTimeJob
     */
    select?: WorkingTimeJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingTimeJobInclude<ExtArgs> | null
  }


  /**
   * Model LevelEducation
   */

  export type AggregateLevelEducation = {
    _count: LevelEducationCountAggregateOutputType | null
    _min: LevelEducationMinAggregateOutputType | null
    _max: LevelEducationMaxAggregateOutputType | null
  }

  export type LevelEducationMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type LevelEducationMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type LevelEducationCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LevelEducationMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LevelEducationMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LevelEducationCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LevelEducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelEducation to aggregate.
     */
    where?: LevelEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelEducations to fetch.
     */
    orderBy?: LevelEducationOrderByWithRelationInput | LevelEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LevelEducations
    **/
    _count?: true | LevelEducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelEducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelEducationMaxAggregateInputType
  }

  export type GetLevelEducationAggregateType<T extends LevelEducationAggregateArgs> = {
        [P in keyof T & keyof AggregateLevelEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevelEducation[P]>
      : GetScalarType<T[P], AggregateLevelEducation[P]>
  }




  export type LevelEducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelEducationWhereInput
    orderBy?: LevelEducationOrderByWithAggregationInput | LevelEducationOrderByWithAggregationInput[]
    by: LevelEducationScalarFieldEnum[] | LevelEducationScalarFieldEnum
    having?: LevelEducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelEducationCountAggregateInputType | true
    _min?: LevelEducationMinAggregateInputType
    _max?: LevelEducationMaxAggregateInputType
  }

  export type LevelEducationGroupByOutputType = {
    id: string
    name: string
    _count: LevelEducationCountAggregateOutputType | null
    _min: LevelEducationMinAggregateOutputType | null
    _max: LevelEducationMaxAggregateOutputType | null
  }

  type GetLevelEducationGroupByPayload<T extends LevelEducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelEducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelEducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelEducationGroupByOutputType[P]>
            : GetScalarType<T[P], LevelEducationGroupByOutputType[P]>
        }
      >
    >


  export type LevelEducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    education?: boolean | LevelEducation$educationArgs<ExtArgs>
    jobOffers?: boolean | LevelEducation$jobOffersArgs<ExtArgs>
    _count?: boolean | LevelEducationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levelEducation"]>

  export type LevelEducationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["levelEducation"]>

  export type LevelEducationSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type LevelEducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    education?: boolean | LevelEducation$educationArgs<ExtArgs>
    jobOffers?: boolean | LevelEducation$jobOffersArgs<ExtArgs>
    _count?: boolean | LevelEducationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelEducationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelEducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LevelEducation"
    objects: {
      education: Prisma.$EducationPayload<ExtArgs>[]
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["levelEducation"]>
    composites: {}
  }

  type LevelEducationGetPayload<S extends boolean | null | undefined | LevelEducationDefaultArgs> = $Result.GetResult<Prisma.$LevelEducationPayload, S>

  type LevelEducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LevelEducationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LevelEducationCountAggregateInputType | true
    }

  export interface LevelEducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LevelEducation'], meta: { name: 'LevelEducation' } }
    /**
     * Find zero or one LevelEducation that matches the filter.
     * @param {LevelEducationFindUniqueArgs} args - Arguments to find a LevelEducation
     * @example
     * // Get one LevelEducation
     * const levelEducation = await prisma.levelEducation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelEducationFindUniqueArgs>(args: SelectSubset<T, LevelEducationFindUniqueArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LevelEducation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LevelEducationFindUniqueOrThrowArgs} args - Arguments to find a LevelEducation
     * @example
     * // Get one LevelEducation
     * const levelEducation = await prisma.levelEducation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelEducationFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelEducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LevelEducation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationFindFirstArgs} args - Arguments to find a LevelEducation
     * @example
     * // Get one LevelEducation
     * const levelEducation = await prisma.levelEducation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelEducationFindFirstArgs>(args?: SelectSubset<T, LevelEducationFindFirstArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LevelEducation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationFindFirstOrThrowArgs} args - Arguments to find a LevelEducation
     * @example
     * // Get one LevelEducation
     * const levelEducation = await prisma.levelEducation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelEducationFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelEducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LevelEducations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LevelEducations
     * const levelEducations = await prisma.levelEducation.findMany()
     * 
     * // Get first 10 LevelEducations
     * const levelEducations = await prisma.levelEducation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelEducationWithIdOnly = await prisma.levelEducation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelEducationFindManyArgs>(args?: SelectSubset<T, LevelEducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LevelEducation.
     * @param {LevelEducationCreateArgs} args - Arguments to create a LevelEducation.
     * @example
     * // Create one LevelEducation
     * const LevelEducation = await prisma.levelEducation.create({
     *   data: {
     *     // ... data to create a LevelEducation
     *   }
     * })
     * 
     */
    create<T extends LevelEducationCreateArgs>(args: SelectSubset<T, LevelEducationCreateArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LevelEducations.
     * @param {LevelEducationCreateManyArgs} args - Arguments to create many LevelEducations.
     * @example
     * // Create many LevelEducations
     * const levelEducation = await prisma.levelEducation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelEducationCreateManyArgs>(args?: SelectSubset<T, LevelEducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LevelEducations and returns the data saved in the database.
     * @param {LevelEducationCreateManyAndReturnArgs} args - Arguments to create many LevelEducations.
     * @example
     * // Create many LevelEducations
     * const levelEducation = await prisma.levelEducation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LevelEducations and only return the `id`
     * const levelEducationWithIdOnly = await prisma.levelEducation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelEducationCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelEducationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LevelEducation.
     * @param {LevelEducationDeleteArgs} args - Arguments to delete one LevelEducation.
     * @example
     * // Delete one LevelEducation
     * const LevelEducation = await prisma.levelEducation.delete({
     *   where: {
     *     // ... filter to delete one LevelEducation
     *   }
     * })
     * 
     */
    delete<T extends LevelEducationDeleteArgs>(args: SelectSubset<T, LevelEducationDeleteArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LevelEducation.
     * @param {LevelEducationUpdateArgs} args - Arguments to update one LevelEducation.
     * @example
     * // Update one LevelEducation
     * const levelEducation = await prisma.levelEducation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelEducationUpdateArgs>(args: SelectSubset<T, LevelEducationUpdateArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LevelEducations.
     * @param {LevelEducationDeleteManyArgs} args - Arguments to filter LevelEducations to delete.
     * @example
     * // Delete a few LevelEducations
     * const { count } = await prisma.levelEducation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelEducationDeleteManyArgs>(args?: SelectSubset<T, LevelEducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LevelEducations
     * const levelEducation = await prisma.levelEducation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelEducationUpdateManyArgs>(args: SelectSubset<T, LevelEducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LevelEducation.
     * @param {LevelEducationUpsertArgs} args - Arguments to update or create a LevelEducation.
     * @example
     * // Update or create a LevelEducation
     * const levelEducation = await prisma.levelEducation.upsert({
     *   create: {
     *     // ... data to create a LevelEducation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LevelEducation we want to update
     *   }
     * })
     */
    upsert<T extends LevelEducationUpsertArgs>(args: SelectSubset<T, LevelEducationUpsertArgs<ExtArgs>>): Prisma__LevelEducationClient<$Result.GetResult<Prisma.$LevelEducationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LevelEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationCountArgs} args - Arguments to filter LevelEducations to count.
     * @example
     * // Count the number of LevelEducations
     * const count = await prisma.levelEducation.count({
     *   where: {
     *     // ... the filter for the LevelEducations we want to count
     *   }
     * })
    **/
    count<T extends LevelEducationCountArgs>(
      args?: Subset<T, LevelEducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelEducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LevelEducation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelEducationAggregateArgs>(args: Subset<T, LevelEducationAggregateArgs>): Prisma.PrismaPromise<GetLevelEducationAggregateType<T>>

    /**
     * Group by LevelEducation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelEducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelEducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelEducationGroupByArgs['orderBy'] }
        : { orderBy?: LevelEducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelEducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LevelEducation model
   */
  readonly fields: LevelEducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LevelEducation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelEducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    education<T extends LevelEducation$educationArgs<ExtArgs> = {}>(args?: Subset<T, LevelEducation$educationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany"> | Null>
    jobOffers<T extends LevelEducation$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, LevelEducation$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LevelEducation model
   */ 
  interface LevelEducationFieldRefs {
    readonly id: FieldRef<"LevelEducation", 'String'>
    readonly name: FieldRef<"LevelEducation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LevelEducation findUnique
   */
  export type LevelEducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter, which LevelEducation to fetch.
     */
    where: LevelEducationWhereUniqueInput
  }

  /**
   * LevelEducation findUniqueOrThrow
   */
  export type LevelEducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter, which LevelEducation to fetch.
     */
    where: LevelEducationWhereUniqueInput
  }

  /**
   * LevelEducation findFirst
   */
  export type LevelEducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter, which LevelEducation to fetch.
     */
    where?: LevelEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelEducations to fetch.
     */
    orderBy?: LevelEducationOrderByWithRelationInput | LevelEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelEducations.
     */
    cursor?: LevelEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelEducations.
     */
    distinct?: LevelEducationScalarFieldEnum | LevelEducationScalarFieldEnum[]
  }

  /**
   * LevelEducation findFirstOrThrow
   */
  export type LevelEducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter, which LevelEducation to fetch.
     */
    where?: LevelEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelEducations to fetch.
     */
    orderBy?: LevelEducationOrderByWithRelationInput | LevelEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelEducations.
     */
    cursor?: LevelEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelEducations.
     */
    distinct?: LevelEducationScalarFieldEnum | LevelEducationScalarFieldEnum[]
  }

  /**
   * LevelEducation findMany
   */
  export type LevelEducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter, which LevelEducations to fetch.
     */
    where?: LevelEducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelEducations to fetch.
     */
    orderBy?: LevelEducationOrderByWithRelationInput | LevelEducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LevelEducations.
     */
    cursor?: LevelEducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelEducations.
     */
    skip?: number
    distinct?: LevelEducationScalarFieldEnum | LevelEducationScalarFieldEnum[]
  }

  /**
   * LevelEducation create
   */
  export type LevelEducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * The data needed to create a LevelEducation.
     */
    data: XOR<LevelEducationCreateInput, LevelEducationUncheckedCreateInput>
  }

  /**
   * LevelEducation createMany
   */
  export type LevelEducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LevelEducations.
     */
    data: LevelEducationCreateManyInput | LevelEducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LevelEducation createManyAndReturn
   */
  export type LevelEducationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LevelEducations.
     */
    data: LevelEducationCreateManyInput | LevelEducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LevelEducation update
   */
  export type LevelEducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * The data needed to update a LevelEducation.
     */
    data: XOR<LevelEducationUpdateInput, LevelEducationUncheckedUpdateInput>
    /**
     * Choose, which LevelEducation to update.
     */
    where: LevelEducationWhereUniqueInput
  }

  /**
   * LevelEducation updateMany
   */
  export type LevelEducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LevelEducations.
     */
    data: XOR<LevelEducationUpdateManyMutationInput, LevelEducationUncheckedUpdateManyInput>
    /**
     * Filter which LevelEducations to update
     */
    where?: LevelEducationWhereInput
  }

  /**
   * LevelEducation upsert
   */
  export type LevelEducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * The filter to search for the LevelEducation to update in case it exists.
     */
    where: LevelEducationWhereUniqueInput
    /**
     * In case the LevelEducation found by the `where` argument doesn't exist, create a new LevelEducation with this data.
     */
    create: XOR<LevelEducationCreateInput, LevelEducationUncheckedCreateInput>
    /**
     * In case the LevelEducation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelEducationUpdateInput, LevelEducationUncheckedUpdateInput>
  }

  /**
   * LevelEducation delete
   */
  export type LevelEducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
    /**
     * Filter which LevelEducation to delete.
     */
    where: LevelEducationWhereUniqueInput
  }

  /**
   * LevelEducation deleteMany
   */
  export type LevelEducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelEducations to delete
     */
    where?: LevelEducationWhereInput
  }

  /**
   * LevelEducation.education
   */
  export type LevelEducation$educationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * LevelEducation.jobOffers
   */
  export type LevelEducation$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * LevelEducation without action
   */
  export type LevelEducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelEducation
     */
    select?: LevelEducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelEducationInclude<ExtArgs> | null
  }


  /**
   * Model jobTags
   */

  export type AggregateJobTags = {
    _count: JobTagsCountAggregateOutputType | null
    _min: JobTagsMinAggregateOutputType | null
    _max: JobTagsMaxAggregateOutputType | null
  }

  export type JobTagsMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
  }

  export type JobTagsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
  }

  export type JobTagsCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    _all: number
  }


  export type JobTagsMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type JobTagsMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type JobTagsCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    _all?: true
  }

  export type JobTagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobTags to aggregate.
     */
    where?: jobTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobTags to fetch.
     */
    orderBy?: jobTagsOrderByWithRelationInput | jobTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jobTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobTags
    **/
    _count?: true | JobTagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobTagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobTagsMaxAggregateInputType
  }

  export type GetJobTagsAggregateType<T extends JobTagsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobTags[P]>
      : GetScalarType<T[P], AggregateJobTags[P]>
  }




  export type jobTagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobTagsWhereInput
    orderBy?: jobTagsOrderByWithAggregationInput | jobTagsOrderByWithAggregationInput[]
    by: JobTagsScalarFieldEnum[] | JobTagsScalarFieldEnum
    having?: jobTagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobTagsCountAggregateInputType | true
    _min?: JobTagsMinAggregateInputType
    _max?: JobTagsMaxAggregateInputType
  }

  export type JobTagsGroupByOutputType = {
    id: string
    name: string
    slug: string
    _count: JobTagsCountAggregateOutputType | null
    _min: JobTagsMinAggregateOutputType | null
    _max: JobTagsMaxAggregateOutputType | null
  }

  type GetJobTagsGroupByPayload<T extends jobTagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobTagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobTagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobTagsGroupByOutputType[P]>
            : GetScalarType<T[P], JobTagsGroupByOutputType[P]>
        }
      >
    >


  export type jobTagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    jobOffers?: boolean | jobTags$jobOffersArgs<ExtArgs>
    _count?: boolean | JobTagsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobTags"]>

  export type jobTagsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
  }, ExtArgs["result"]["jobTags"]>

  export type jobTagsSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
  }

  export type jobTagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobOffers?: boolean | jobTags$jobOffersArgs<ExtArgs>
    _count?: boolean | JobTagsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type jobTagsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $jobTagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jobTags"
    objects: {
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
    }, ExtArgs["result"]["jobTags"]>
    composites: {}
  }

  type jobTagsGetPayload<S extends boolean | null | undefined | jobTagsDefaultArgs> = $Result.GetResult<Prisma.$jobTagsPayload, S>

  type jobTagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<jobTagsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobTagsCountAggregateInputType | true
    }

  export interface jobTagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jobTags'], meta: { name: 'jobTags' } }
    /**
     * Find zero or one JobTags that matches the filter.
     * @param {jobTagsFindUniqueArgs} args - Arguments to find a JobTags
     * @example
     * // Get one JobTags
     * const jobTags = await prisma.jobTags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jobTagsFindUniqueArgs>(args: SelectSubset<T, jobTagsFindUniqueArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobTags that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {jobTagsFindUniqueOrThrowArgs} args - Arguments to find a JobTags
     * @example
     * // Get one JobTags
     * const jobTags = await prisma.jobTags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jobTagsFindUniqueOrThrowArgs>(args: SelectSubset<T, jobTagsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsFindFirstArgs} args - Arguments to find a JobTags
     * @example
     * // Get one JobTags
     * const jobTags = await prisma.jobTags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jobTagsFindFirstArgs>(args?: SelectSubset<T, jobTagsFindFirstArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobTags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsFindFirstOrThrowArgs} args - Arguments to find a JobTags
     * @example
     * // Get one JobTags
     * const jobTags = await prisma.jobTags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jobTagsFindFirstOrThrowArgs>(args?: SelectSubset<T, jobTagsFindFirstOrThrowArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobTags
     * const jobTags = await prisma.jobTags.findMany()
     * 
     * // Get first 10 JobTags
     * const jobTags = await prisma.jobTags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobTagsWithIdOnly = await prisma.jobTags.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends jobTagsFindManyArgs>(args?: SelectSubset<T, jobTagsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobTags.
     * @param {jobTagsCreateArgs} args - Arguments to create a JobTags.
     * @example
     * // Create one JobTags
     * const JobTags = await prisma.jobTags.create({
     *   data: {
     *     // ... data to create a JobTags
     *   }
     * })
     * 
     */
    create<T extends jobTagsCreateArgs>(args: SelectSubset<T, jobTagsCreateArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobTags.
     * @param {jobTagsCreateManyArgs} args - Arguments to create many JobTags.
     * @example
     * // Create many JobTags
     * const jobTags = await prisma.jobTags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jobTagsCreateManyArgs>(args?: SelectSubset<T, jobTagsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobTags and returns the data saved in the database.
     * @param {jobTagsCreateManyAndReturnArgs} args - Arguments to create many JobTags.
     * @example
     * // Create many JobTags
     * const jobTags = await prisma.jobTags.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobTags and only return the `id`
     * const jobTagsWithIdOnly = await prisma.jobTags.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jobTagsCreateManyAndReturnArgs>(args?: SelectSubset<T, jobTagsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobTags.
     * @param {jobTagsDeleteArgs} args - Arguments to delete one JobTags.
     * @example
     * // Delete one JobTags
     * const JobTags = await prisma.jobTags.delete({
     *   where: {
     *     // ... filter to delete one JobTags
     *   }
     * })
     * 
     */
    delete<T extends jobTagsDeleteArgs>(args: SelectSubset<T, jobTagsDeleteArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobTags.
     * @param {jobTagsUpdateArgs} args - Arguments to update one JobTags.
     * @example
     * // Update one JobTags
     * const jobTags = await prisma.jobTags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jobTagsUpdateArgs>(args: SelectSubset<T, jobTagsUpdateArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobTags.
     * @param {jobTagsDeleteManyArgs} args - Arguments to filter JobTags to delete.
     * @example
     * // Delete a few JobTags
     * const { count } = await prisma.jobTags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jobTagsDeleteManyArgs>(args?: SelectSubset<T, jobTagsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobTags
     * const jobTags = await prisma.jobTags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jobTagsUpdateManyArgs>(args: SelectSubset<T, jobTagsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobTags.
     * @param {jobTagsUpsertArgs} args - Arguments to update or create a JobTags.
     * @example
     * // Update or create a JobTags
     * const jobTags = await prisma.jobTags.upsert({
     *   create: {
     *     // ... data to create a JobTags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobTags we want to update
     *   }
     * })
     */
    upsert<T extends jobTagsUpsertArgs>(args: SelectSubset<T, jobTagsUpsertArgs<ExtArgs>>): Prisma__jobTagsClient<$Result.GetResult<Prisma.$jobTagsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsCountArgs} args - Arguments to filter JobTags to count.
     * @example
     * // Count the number of JobTags
     * const count = await prisma.jobTags.count({
     *   where: {
     *     // ... the filter for the JobTags we want to count
     *   }
     * })
    **/
    count<T extends jobTagsCountArgs>(
      args?: Subset<T, jobTagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobTagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobTagsAggregateArgs>(args: Subset<T, JobTagsAggregateArgs>): Prisma.PrismaPromise<GetJobTagsAggregateType<T>>

    /**
     * Group by JobTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobTagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jobTagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jobTagsGroupByArgs['orderBy'] }
        : { orderBy?: jobTagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jobTagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jobTags model
   */
  readonly fields: jobTagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jobTags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jobTagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobOffers<T extends jobTags$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, jobTags$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jobTags model
   */ 
  interface jobTagsFieldRefs {
    readonly id: FieldRef<"jobTags", 'String'>
    readonly name: FieldRef<"jobTags", 'String'>
    readonly slug: FieldRef<"jobTags", 'String'>
  }
    

  // Custom InputTypes
  /**
   * jobTags findUnique
   */
  export type jobTagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter, which jobTags to fetch.
     */
    where: jobTagsWhereUniqueInput
  }

  /**
   * jobTags findUniqueOrThrow
   */
  export type jobTagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter, which jobTags to fetch.
     */
    where: jobTagsWhereUniqueInput
  }

  /**
   * jobTags findFirst
   */
  export type jobTagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter, which jobTags to fetch.
     */
    where?: jobTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobTags to fetch.
     */
    orderBy?: jobTagsOrderByWithRelationInput | jobTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobTags.
     */
    cursor?: jobTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobTags.
     */
    distinct?: JobTagsScalarFieldEnum | JobTagsScalarFieldEnum[]
  }

  /**
   * jobTags findFirstOrThrow
   */
  export type jobTagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter, which jobTags to fetch.
     */
    where?: jobTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobTags to fetch.
     */
    orderBy?: jobTagsOrderByWithRelationInput | jobTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobTags.
     */
    cursor?: jobTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobTags.
     */
    distinct?: JobTagsScalarFieldEnum | JobTagsScalarFieldEnum[]
  }

  /**
   * jobTags findMany
   */
  export type jobTagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter, which jobTags to fetch.
     */
    where?: jobTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobTags to fetch.
     */
    orderBy?: jobTagsOrderByWithRelationInput | jobTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobTags.
     */
    cursor?: jobTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobTags.
     */
    skip?: number
    distinct?: JobTagsScalarFieldEnum | JobTagsScalarFieldEnum[]
  }

  /**
   * jobTags create
   */
  export type jobTagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * The data needed to create a jobTags.
     */
    data: XOR<jobTagsCreateInput, jobTagsUncheckedCreateInput>
  }

  /**
   * jobTags createMany
   */
  export type jobTagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jobTags.
     */
    data: jobTagsCreateManyInput | jobTagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jobTags createManyAndReturn
   */
  export type jobTagsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many jobTags.
     */
    data: jobTagsCreateManyInput | jobTagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jobTags update
   */
  export type jobTagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * The data needed to update a jobTags.
     */
    data: XOR<jobTagsUpdateInput, jobTagsUncheckedUpdateInput>
    /**
     * Choose, which jobTags to update.
     */
    where: jobTagsWhereUniqueInput
  }

  /**
   * jobTags updateMany
   */
  export type jobTagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jobTags.
     */
    data: XOR<jobTagsUpdateManyMutationInput, jobTagsUncheckedUpdateManyInput>
    /**
     * Filter which jobTags to update
     */
    where?: jobTagsWhereInput
  }

  /**
   * jobTags upsert
   */
  export type jobTagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * The filter to search for the jobTags to update in case it exists.
     */
    where: jobTagsWhereUniqueInput
    /**
     * In case the jobTags found by the `where` argument doesn't exist, create a new jobTags with this data.
     */
    create: XOR<jobTagsCreateInput, jobTagsUncheckedCreateInput>
    /**
     * In case the jobTags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jobTagsUpdateInput, jobTagsUncheckedUpdateInput>
  }

  /**
   * jobTags delete
   */
  export type jobTagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
    /**
     * Filter which jobTags to delete.
     */
    where: jobTagsWhereUniqueInput
  }

  /**
   * jobTags deleteMany
   */
  export type jobTagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobTags to delete
     */
    where?: jobTagsWhereInput
  }

  /**
   * jobTags.jobOffers
   */
  export type jobTags$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * jobTags without action
   */
  export type jobTagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobTags
     */
    select?: jobTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobTagsInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    level: number | null
  }

  export type CategorySumAggregateOutputType = {
    level: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    level: number | null
    parentId: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    level: number | null
    parentId: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    level: number
    parentId: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    level?: true
  }

  export type CategorySumAggregateInputType = {
    level?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    level?: true
    parentId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    level?: true
    parentId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    level?: true
    parentId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string
    level: number | null
    parentId: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    level?: boolean
    parentId?: boolean
    sectors?: boolean | Category$sectorsArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    jobOffers?: boolean | Category$jobOffersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    level?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    level?: boolean
    parentId?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectors?: boolean | Category$sectorsArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    jobOffers?: boolean | Category$jobOffersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      sectors: Prisma.$SectorsPayload<ExtArgs>[]
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      jobOffers: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string
      level: number | null
      parentId: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sectors<T extends Category$sectorsArgs<ExtArgs> = {}>(args?: Subset<T, Category$sectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findMany"> | Null>
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    jobOffers<T extends Category$jobOffersArgs<ExtArgs> = {}>(args?: Subset<T, Category$jobOffersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly level: FieldRef<"Category", 'Int'>
    readonly parentId: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.sectors
   */
  export type Category$sectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    where?: SectorsWhereInput
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    cursor?: SectorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectorsScalarFieldEnum | SectorsScalarFieldEnum[]
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.jobOffers
   */
  export type Category$jobOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Sectors
   */

  export type AggregateSectors = {
    _count: SectorsCountAggregateOutputType | null
    _min: SectorsMinAggregateOutputType | null
    _max: SectorsMaxAggregateOutputType | null
  }

  export type SectorsMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    categoryId: string | null
  }

  export type SectorsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    categoryId: string | null
  }

  export type SectorsCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    categoryId: number
    _all: number
  }


  export type SectorsMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
  }

  export type SectorsMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
  }

  export type SectorsCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    categoryId?: true
    _all?: true
  }

  export type SectorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sectors to aggregate.
     */
    where?: SectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sectors
    **/
    _count?: true | SectorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectorsMaxAggregateInputType
  }

  export type GetSectorsAggregateType<T extends SectorsAggregateArgs> = {
        [P in keyof T & keyof AggregateSectors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSectors[P]>
      : GetScalarType<T[P], AggregateSectors[P]>
  }




  export type SectorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectorsWhereInput
    orderBy?: SectorsOrderByWithAggregationInput | SectorsOrderByWithAggregationInput[]
    by: SectorsScalarFieldEnum[] | SectorsScalarFieldEnum
    having?: SectorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectorsCountAggregateInputType | true
    _min?: SectorsMinAggregateInputType
    _max?: SectorsMaxAggregateInputType
  }

  export type SectorsGroupByOutputType = {
    id: string
    name: string
    slug: string
    categoryId: string
    _count: SectorsCountAggregateOutputType | null
    _min: SectorsMinAggregateOutputType | null
    _max: SectorsMaxAggregateOutputType | null
  }

  type GetSectorsGroupByPayload<T extends SectorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectorsGroupByOutputType[P]>
            : GetScalarType<T[P], SectorsGroupByOutputType[P]>
        }
      >
    >


  export type SectorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    jobOffer?: boolean | Sectors$jobOfferArgs<ExtArgs>
    _count?: boolean | SectorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sectors"]>

  export type SectorsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sectors"]>

  export type SectorsSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    categoryId?: boolean
  }

  export type SectorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    jobOffer?: boolean | Sectors$jobOfferArgs<ExtArgs>
    _count?: boolean | SectorsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectorsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $SectorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sectors"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      jobOffer: Prisma.$jobOffersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      categoryId: string
    }, ExtArgs["result"]["sectors"]>
    composites: {}
  }

  type SectorsGetPayload<S extends boolean | null | undefined | SectorsDefaultArgs> = $Result.GetResult<Prisma.$SectorsPayload, S>

  type SectorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SectorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SectorsCountAggregateInputType | true
    }

  export interface SectorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sectors'], meta: { name: 'Sectors' } }
    /**
     * Find zero or one Sectors that matches the filter.
     * @param {SectorsFindUniqueArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectorsFindUniqueArgs>(args: SelectSubset<T, SectorsFindUniqueArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sectors that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SectorsFindUniqueOrThrowArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectorsFindUniqueOrThrowArgs>(args: SelectSubset<T, SectorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsFindFirstArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectorsFindFirstArgs>(args?: SelectSubset<T, SectorsFindFirstArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sectors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsFindFirstOrThrowArgs} args - Arguments to find a Sectors
     * @example
     * // Get one Sectors
     * const sectors = await prisma.sectors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectorsFindFirstOrThrowArgs>(args?: SelectSubset<T, SectorsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sectors
     * const sectors = await prisma.sectors.findMany()
     * 
     * // Get first 10 Sectors
     * const sectors = await prisma.sectors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectorsWithIdOnly = await prisma.sectors.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectorsFindManyArgs>(args?: SelectSubset<T, SectorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sectors.
     * @param {SectorsCreateArgs} args - Arguments to create a Sectors.
     * @example
     * // Create one Sectors
     * const Sectors = await prisma.sectors.create({
     *   data: {
     *     // ... data to create a Sectors
     *   }
     * })
     * 
     */
    create<T extends SectorsCreateArgs>(args: SelectSubset<T, SectorsCreateArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sectors.
     * @param {SectorsCreateManyArgs} args - Arguments to create many Sectors.
     * @example
     * // Create many Sectors
     * const sectors = await prisma.sectors.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectorsCreateManyArgs>(args?: SelectSubset<T, SectorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sectors and returns the data saved in the database.
     * @param {SectorsCreateManyAndReturnArgs} args - Arguments to create many Sectors.
     * @example
     * // Create many Sectors
     * const sectors = await prisma.sectors.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sectors and only return the `id`
     * const sectorsWithIdOnly = await prisma.sectors.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectorsCreateManyAndReturnArgs>(args?: SelectSubset<T, SectorsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sectors.
     * @param {SectorsDeleteArgs} args - Arguments to delete one Sectors.
     * @example
     * // Delete one Sectors
     * const Sectors = await prisma.sectors.delete({
     *   where: {
     *     // ... filter to delete one Sectors
     *   }
     * })
     * 
     */
    delete<T extends SectorsDeleteArgs>(args: SelectSubset<T, SectorsDeleteArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sectors.
     * @param {SectorsUpdateArgs} args - Arguments to update one Sectors.
     * @example
     * // Update one Sectors
     * const sectors = await prisma.sectors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectorsUpdateArgs>(args: SelectSubset<T, SectorsUpdateArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sectors.
     * @param {SectorsDeleteManyArgs} args - Arguments to filter Sectors to delete.
     * @example
     * // Delete a few Sectors
     * const { count } = await prisma.sectors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectorsDeleteManyArgs>(args?: SelectSubset<T, SectorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sectors
     * const sectors = await prisma.sectors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectorsUpdateManyArgs>(args: SelectSubset<T, SectorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sectors.
     * @param {SectorsUpsertArgs} args - Arguments to update or create a Sectors.
     * @example
     * // Update or create a Sectors
     * const sectors = await prisma.sectors.upsert({
     *   create: {
     *     // ... data to create a Sectors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sectors we want to update
     *   }
     * })
     */
    upsert<T extends SectorsUpsertArgs>(args: SelectSubset<T, SectorsUpsertArgs<ExtArgs>>): Prisma__SectorsClient<$Result.GetResult<Prisma.$SectorsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsCountArgs} args - Arguments to filter Sectors to count.
     * @example
     * // Count the number of Sectors
     * const count = await prisma.sectors.count({
     *   where: {
     *     // ... the filter for the Sectors we want to count
     *   }
     * })
    **/
    count<T extends SectorsCountArgs>(
      args?: Subset<T, SectorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectorsAggregateArgs>(args: Subset<T, SectorsAggregateArgs>): Prisma.PrismaPromise<GetSectorsAggregateType<T>>

    /**
     * Group by Sectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectorsGroupByArgs['orderBy'] }
        : { orderBy?: SectorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sectors model
   */
  readonly fields: SectorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sectors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobOffer<T extends Sectors$jobOfferArgs<ExtArgs> = {}>(args?: Subset<T, Sectors$jobOfferArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobOffersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sectors model
   */ 
  interface SectorsFieldRefs {
    readonly id: FieldRef<"Sectors", 'String'>
    readonly name: FieldRef<"Sectors", 'String'>
    readonly slug: FieldRef<"Sectors", 'String'>
    readonly categoryId: FieldRef<"Sectors", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Sectors findUnique
   */
  export type SectorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where: SectorsWhereUniqueInput
  }

  /**
   * Sectors findUniqueOrThrow
   */
  export type SectorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where: SectorsWhereUniqueInput
  }

  /**
   * Sectors findFirst
   */
  export type SectorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where?: SectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sectors.
     */
    cursor?: SectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sectors.
     */
    distinct?: SectorsScalarFieldEnum | SectorsScalarFieldEnum[]
  }

  /**
   * Sectors findFirstOrThrow
   */
  export type SectorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where?: SectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sectors.
     */
    cursor?: SectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sectors.
     */
    distinct?: SectorsScalarFieldEnum | SectorsScalarFieldEnum[]
  }

  /**
   * Sectors findMany
   */
  export type SectorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter, which Sectors to fetch.
     */
    where?: SectorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sectors to fetch.
     */
    orderBy?: SectorsOrderByWithRelationInput | SectorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sectors.
     */
    cursor?: SectorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sectors.
     */
    skip?: number
    distinct?: SectorsScalarFieldEnum | SectorsScalarFieldEnum[]
  }

  /**
   * Sectors create
   */
  export type SectorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * The data needed to create a Sectors.
     */
    data: XOR<SectorsCreateInput, SectorsUncheckedCreateInput>
  }

  /**
   * Sectors createMany
   */
  export type SectorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sectors.
     */
    data: SectorsCreateManyInput | SectorsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sectors createManyAndReturn
   */
  export type SectorsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sectors.
     */
    data: SectorsCreateManyInput | SectorsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sectors update
   */
  export type SectorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * The data needed to update a Sectors.
     */
    data: XOR<SectorsUpdateInput, SectorsUncheckedUpdateInput>
    /**
     * Choose, which Sectors to update.
     */
    where: SectorsWhereUniqueInput
  }

  /**
   * Sectors updateMany
   */
  export type SectorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sectors.
     */
    data: XOR<SectorsUpdateManyMutationInput, SectorsUncheckedUpdateManyInput>
    /**
     * Filter which Sectors to update
     */
    where?: SectorsWhereInput
  }

  /**
   * Sectors upsert
   */
  export type SectorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * The filter to search for the Sectors to update in case it exists.
     */
    where: SectorsWhereUniqueInput
    /**
     * In case the Sectors found by the `where` argument doesn't exist, create a new Sectors with this data.
     */
    create: XOR<SectorsCreateInput, SectorsUncheckedCreateInput>
    /**
     * In case the Sectors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectorsUpdateInput, SectorsUncheckedUpdateInput>
  }

  /**
   * Sectors delete
   */
  export type SectorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
    /**
     * Filter which Sectors to delete.
     */
    where: SectorsWhereUniqueInput
  }

  /**
   * Sectors deleteMany
   */
  export type SectorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sectors to delete
     */
    where?: SectorsWhereInput
  }

  /**
   * Sectors.jobOffer
   */
  export type Sectors$jobOfferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobOffers
     */
    select?: jobOffersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobOffersInclude<ExtArgs> | null
    where?: jobOffersWhereInput
    orderBy?: jobOffersOrderByWithRelationInput | jobOffersOrderByWithRelationInput[]
    cursor?: jobOffersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobOffersScalarFieldEnum | JobOffersScalarFieldEnum[]
  }

  /**
   * Sectors without action
   */
  export type SectorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sectors
     */
    select?: SectorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectorsInclude<ExtArgs> | null
  }


  /**
   * Model AuthAccount
   */

  export type AggregateAuthAccount = {
    _count: AuthAccountCountAggregateOutputType | null
    _avg: AuthAccountAvgAggregateOutputType | null
    _sum: AuthAccountSumAggregateOutputType | null
    _min: AuthAccountMinAggregateOutputType | null
    _max: AuthAccountMaxAggregateOutputType | null
  }

  export type AuthAccountAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type AuthAccountSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type AuthAccountMinAggregateOutputType = {
    id: string | null
    type: string | null
    provide: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AuthAccountMaxAggregateOutputType = {
    id: string | null
    type: string | null
    provide: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AuthAccountCountAggregateOutputType = {
    id: number
    type: number
    provide: number
    refreshToken: number
    accessToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AuthAccountAvgAggregateInputType = {
    expiresAt?: true
  }

  export type AuthAccountSumAggregateInputType = {
    expiresAt?: true
  }

  export type AuthAccountMinAggregateInputType = {
    id?: true
    type?: true
    provide?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AuthAccountMaxAggregateInputType = {
    id?: true
    type?: true
    provide?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AuthAccountCountAggregateInputType = {
    id?: true
    type?: true
    provide?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AuthAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthAccount to aggregate.
     */
    where?: AuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAccounts to fetch.
     */
    orderBy?: AuthAccountOrderByWithRelationInput | AuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthAccounts
    **/
    _count?: true | AuthAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthAccountMaxAggregateInputType
  }

  export type GetAuthAccountAggregateType<T extends AuthAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthAccount[P]>
      : GetScalarType<T[P], AggregateAuthAccount[P]>
  }




  export type AuthAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthAccountWhereInput
    orderBy?: AuthAccountOrderByWithAggregationInput | AuthAccountOrderByWithAggregationInput[]
    by: AuthAccountScalarFieldEnum[] | AuthAccountScalarFieldEnum
    having?: AuthAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthAccountCountAggregateInputType | true
    _avg?: AuthAccountAvgAggregateInputType
    _sum?: AuthAccountSumAggregateInputType
    _min?: AuthAccountMinAggregateInputType
    _max?: AuthAccountMaxAggregateInputType
  }

  export type AuthAccountGroupByOutputType = {
    id: string
    type: string
    provide: string
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: AuthAccountCountAggregateOutputType | null
    _avg: AuthAccountAvgAggregateOutputType | null
    _sum: AuthAccountSumAggregateOutputType | null
    _min: AuthAccountMinAggregateOutputType | null
    _max: AuthAccountMaxAggregateOutputType | null
  }

  type GetAuthAccountGroupByPayload<T extends AuthAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthAccountGroupByOutputType[P]>
            : GetScalarType<T[P], AuthAccountGroupByOutputType[P]>
        }
      >
    >


  export type AuthAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provide?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | AuthAccount$userArgs<ExtArgs>
  }, ExtArgs["result"]["authAccount"]>

  export type AuthAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provide?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | AuthAccount$userArgs<ExtArgs>
  }, ExtArgs["result"]["authAccount"]>

  export type AuthAccountSelectScalar = {
    id?: boolean
    type?: boolean
    provide?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type AuthAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuthAccount$userArgs<ExtArgs>
  }
  export type AuthAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuthAccount$userArgs<ExtArgs>
  }

  export type $AuthAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      provide: string
      refreshToken: string | null
      accessToken: string | null
      expiresAt: number
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["authAccount"]>
    composites: {}
  }

  type AuthAccountGetPayload<S extends boolean | null | undefined | AuthAccountDefaultArgs> = $Result.GetResult<Prisma.$AuthAccountPayload, S>

  type AuthAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuthAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuthAccountCountAggregateInputType | true
    }

  export interface AuthAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthAccount'], meta: { name: 'AuthAccount' } }
    /**
     * Find zero or one AuthAccount that matches the filter.
     * @param {AuthAccountFindUniqueArgs} args - Arguments to find a AuthAccount
     * @example
     * // Get one AuthAccount
     * const authAccount = await prisma.authAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthAccountFindUniqueArgs>(args: SelectSubset<T, AuthAccountFindUniqueArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuthAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuthAccountFindUniqueOrThrowArgs} args - Arguments to find a AuthAccount
     * @example
     * // Get one AuthAccount
     * const authAccount = await prisma.authAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuthAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountFindFirstArgs} args - Arguments to find a AuthAccount
     * @example
     * // Get one AuthAccount
     * const authAccount = await prisma.authAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthAccountFindFirstArgs>(args?: SelectSubset<T, AuthAccountFindFirstArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuthAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountFindFirstOrThrowArgs} args - Arguments to find a AuthAccount
     * @example
     * // Get one AuthAccount
     * const authAccount = await prisma.authAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuthAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthAccounts
     * const authAccounts = await prisma.authAccount.findMany()
     * 
     * // Get first 10 AuthAccounts
     * const authAccounts = await prisma.authAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authAccountWithIdOnly = await prisma.authAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthAccountFindManyArgs>(args?: SelectSubset<T, AuthAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuthAccount.
     * @param {AuthAccountCreateArgs} args - Arguments to create a AuthAccount.
     * @example
     * // Create one AuthAccount
     * const AuthAccount = await prisma.authAccount.create({
     *   data: {
     *     // ... data to create a AuthAccount
     *   }
     * })
     * 
     */
    create<T extends AuthAccountCreateArgs>(args: SelectSubset<T, AuthAccountCreateArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuthAccounts.
     * @param {AuthAccountCreateManyArgs} args - Arguments to create many AuthAccounts.
     * @example
     * // Create many AuthAccounts
     * const authAccount = await prisma.authAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthAccountCreateManyArgs>(args?: SelectSubset<T, AuthAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuthAccounts and returns the data saved in the database.
     * @param {AuthAccountCreateManyAndReturnArgs} args - Arguments to create many AuthAccounts.
     * @example
     * // Create many AuthAccounts
     * const authAccount = await prisma.authAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuthAccounts and only return the `id`
     * const authAccountWithIdOnly = await prisma.authAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuthAccount.
     * @param {AuthAccountDeleteArgs} args - Arguments to delete one AuthAccount.
     * @example
     * // Delete one AuthAccount
     * const AuthAccount = await prisma.authAccount.delete({
     *   where: {
     *     // ... filter to delete one AuthAccount
     *   }
     * })
     * 
     */
    delete<T extends AuthAccountDeleteArgs>(args: SelectSubset<T, AuthAccountDeleteArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuthAccount.
     * @param {AuthAccountUpdateArgs} args - Arguments to update one AuthAccount.
     * @example
     * // Update one AuthAccount
     * const authAccount = await prisma.authAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthAccountUpdateArgs>(args: SelectSubset<T, AuthAccountUpdateArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuthAccounts.
     * @param {AuthAccountDeleteManyArgs} args - Arguments to filter AuthAccounts to delete.
     * @example
     * // Delete a few AuthAccounts
     * const { count } = await prisma.authAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthAccountDeleteManyArgs>(args?: SelectSubset<T, AuthAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthAccounts
     * const authAccount = await prisma.authAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthAccountUpdateManyArgs>(args: SelectSubset<T, AuthAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthAccount.
     * @param {AuthAccountUpsertArgs} args - Arguments to update or create a AuthAccount.
     * @example
     * // Update or create a AuthAccount
     * const authAccount = await prisma.authAccount.upsert({
     *   create: {
     *     // ... data to create a AuthAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthAccount we want to update
     *   }
     * })
     */
    upsert<T extends AuthAccountUpsertArgs>(args: SelectSubset<T, AuthAccountUpsertArgs<ExtArgs>>): Prisma__AuthAccountClient<$Result.GetResult<Prisma.$AuthAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountCountArgs} args - Arguments to filter AuthAccounts to count.
     * @example
     * // Count the number of AuthAccounts
     * const count = await prisma.authAccount.count({
     *   where: {
     *     // ... the filter for the AuthAccounts we want to count
     *   }
     * })
    **/
    count<T extends AuthAccountCountArgs>(
      args?: Subset<T, AuthAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAccountAggregateArgs>(args: Subset<T, AuthAccountAggregateArgs>): Prisma.PrismaPromise<GetAuthAccountAggregateType<T>>

    /**
     * Group by AuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthAccountGroupByArgs['orderBy'] }
        : { orderBy?: AuthAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthAccount model
   */
  readonly fields: AuthAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuthAccount$userArgs<ExtArgs> = {}>(args?: Subset<T, AuthAccount$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthAccount model
   */ 
  interface AuthAccountFieldRefs {
    readonly id: FieldRef<"AuthAccount", 'String'>
    readonly type: FieldRef<"AuthAccount", 'String'>
    readonly provide: FieldRef<"AuthAccount", 'String'>
    readonly refreshToken: FieldRef<"AuthAccount", 'String'>
    readonly accessToken: FieldRef<"AuthAccount", 'String'>
    readonly expiresAt: FieldRef<"AuthAccount", 'Int'>
    readonly createdAt: FieldRef<"AuthAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"AuthAccount", 'DateTime'>
    readonly userId: FieldRef<"AuthAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuthAccount findUnique
   */
  export type AuthAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which AuthAccount to fetch.
     */
    where: AuthAccountWhereUniqueInput
  }

  /**
   * AuthAccount findUniqueOrThrow
   */
  export type AuthAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which AuthAccount to fetch.
     */
    where: AuthAccountWhereUniqueInput
  }

  /**
   * AuthAccount findFirst
   */
  export type AuthAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which AuthAccount to fetch.
     */
    where?: AuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAccounts to fetch.
     */
    orderBy?: AuthAccountOrderByWithRelationInput | AuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthAccounts.
     */
    cursor?: AuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthAccounts.
     */
    distinct?: AuthAccountScalarFieldEnum | AuthAccountScalarFieldEnum[]
  }

  /**
   * AuthAccount findFirstOrThrow
   */
  export type AuthAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which AuthAccount to fetch.
     */
    where?: AuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAccounts to fetch.
     */
    orderBy?: AuthAccountOrderByWithRelationInput | AuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthAccounts.
     */
    cursor?: AuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthAccounts.
     */
    distinct?: AuthAccountScalarFieldEnum | AuthAccountScalarFieldEnum[]
  }

  /**
   * AuthAccount findMany
   */
  export type AuthAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which AuthAccounts to fetch.
     */
    where?: AuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAccounts to fetch.
     */
    orderBy?: AuthAccountOrderByWithRelationInput | AuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthAccounts.
     */
    cursor?: AuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAccounts.
     */
    skip?: number
    distinct?: AuthAccountScalarFieldEnum | AuthAccountScalarFieldEnum[]
  }

  /**
   * AuthAccount create
   */
  export type AuthAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthAccount.
     */
    data: XOR<AuthAccountCreateInput, AuthAccountUncheckedCreateInput>
  }

  /**
   * AuthAccount createMany
   */
  export type AuthAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthAccounts.
     */
    data: AuthAccountCreateManyInput | AuthAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthAccount createManyAndReturn
   */
  export type AuthAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuthAccounts.
     */
    data: AuthAccountCreateManyInput | AuthAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuthAccount update
   */
  export type AuthAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthAccount.
     */
    data: XOR<AuthAccountUpdateInput, AuthAccountUncheckedUpdateInput>
    /**
     * Choose, which AuthAccount to update.
     */
    where: AuthAccountWhereUniqueInput
  }

  /**
   * AuthAccount updateMany
   */
  export type AuthAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthAccounts.
     */
    data: XOR<AuthAccountUpdateManyMutationInput, AuthAccountUncheckedUpdateManyInput>
    /**
     * Filter which AuthAccounts to update
     */
    where?: AuthAccountWhereInput
  }

  /**
   * AuthAccount upsert
   */
  export type AuthAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthAccount to update in case it exists.
     */
    where: AuthAccountWhereUniqueInput
    /**
     * In case the AuthAccount found by the `where` argument doesn't exist, create a new AuthAccount with this data.
     */
    create: XOR<AuthAccountCreateInput, AuthAccountUncheckedCreateInput>
    /**
     * In case the AuthAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthAccountUpdateInput, AuthAccountUncheckedUpdateInput>
  }

  /**
   * AuthAccount delete
   */
  export type AuthAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
    /**
     * Filter which AuthAccount to delete.
     */
    where: AuthAccountWhereUniqueInput
  }

  /**
   * AuthAccount deleteMany
   */
  export type AuthAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthAccounts to delete
     */
    where?: AuthAccountWhereInput
  }

  /**
   * AuthAccount.user
   */
  export type AuthAccount$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuthAccount without action
   */
  export type AuthAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAccount
     */
    select?: AuthAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAccountInclude<ExtArgs> | null
  }


  /**
   * Model Tokens
   */

  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokensMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    email: number
    token: number
    type: number
    expiresIn: number
    createdAt: number
    _all: number
  }


  export type TokensMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to aggregate.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type TokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
    orderBy?: TokensOrderByWithAggregationInput | TokensOrderByWithAggregationInput[]
    by: TokensScalarFieldEnum[] | TokensScalarFieldEnum
    having?: TokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }

  export type TokensGroupByOutputType = {
    id: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date
    createdAt: Date
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends TokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type TokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }


  export type $TokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      type: $Enums.TokenType
      expiresIn: Date
      createdAt: Date
    }, ExtArgs["result"]["tokens"]>
    composites: {}
  }

  type TokensGetPayload<S extends boolean | null | undefined | TokensDefaultArgs> = $Result.GetResult<Prisma.$TokensPayload, S>

  type TokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface TokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tokens'], meta: { name: 'Tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {TokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokensFindUniqueArgs>(args: SelectSubset<T, TokensFindUniqueArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tokens that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokensFindUniqueOrThrowArgs>(args: SelectSubset<T, TokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokensFindFirstArgs>(args?: SelectSubset<T, TokensFindFirstArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokensFindFirstOrThrowArgs>(args?: SelectSubset<T, TokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokensFindManyArgs>(args?: SelectSubset<T, TokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tokens.
     * @param {TokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
     */
    create<T extends TokensCreateArgs>(args: SelectSubset<T, TokensCreateArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tokens.
     * @param {TokensCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokensCreateManyArgs>(args?: SelectSubset<T, TokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokensCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokensCreateManyAndReturnArgs>(args?: SelectSubset<T, TokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tokens.
     * @param {TokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
     */
    delete<T extends TokensDeleteArgs>(args: SelectSubset<T, TokensDeleteArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tokens.
     * @param {TokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokensUpdateArgs>(args: SelectSubset<T, TokensUpdateArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokensDeleteManyArgs>(args?: SelectSubset<T, TokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokensUpdateManyArgs>(args: SelectSubset<T, TokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tokens.
     * @param {TokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
     */
    upsert<T extends TokensUpsertArgs>(args: SelectSubset<T, TokensUpsertArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokensCountArgs>(
      args?: Subset<T, TokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokensGroupByArgs['orderBy'] }
        : { orderBy?: TokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tokens model
   */
  readonly fields: TokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tokens model
   */ 
  interface TokensFieldRefs {
    readonly id: FieldRef<"Tokens", 'String'>
    readonly email: FieldRef<"Tokens", 'String'>
    readonly token: FieldRef<"Tokens", 'String'>
    readonly type: FieldRef<"Tokens", 'TokenType'>
    readonly expiresIn: FieldRef<"Tokens", 'DateTime'>
    readonly createdAt: FieldRef<"Tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tokens findUnique
   */
  export type TokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens findUniqueOrThrow
   */
  export type TokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens findFirst
   */
  export type TokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens findFirstOrThrow
   */
  export type TokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens findMany
   */
  export type TokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens create
   */
  export type TokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * The data needed to create a Tokens.
     */
    data: XOR<TokensCreateInput, TokensUncheckedCreateInput>
  }

  /**
   * Tokens createMany
   */
  export type TokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokensCreateManyInput | TokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tokens createManyAndReturn
   */
  export type TokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokensCreateManyInput | TokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tokens update
   */
  export type TokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * The data needed to update a Tokens.
     */
    data: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
    /**
     * Choose, which Tokens to update.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens updateMany
   */
  export type TokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokensWhereInput
  }

  /**
   * Tokens upsert
   */
  export type TokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * The filter to search for the Tokens to update in case it exists.
     */
    where: TokensWhereUniqueInput
    /**
     * In case the Tokens found by the `where` argument doesn't exist, create a new Tokens with this data.
     */
    create: XOR<TokensCreateInput, TokensUncheckedCreateInput>
    /**
     * In case the Tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
  }

  /**
   * Tokens delete
   */
  export type TokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Filter which Tokens to delete.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens deleteMany
   */
  export type TokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokensWhereInput
  }

  /**
   * Tokens without action
   */
  export type TokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    isVerified: 'isVerified',
    isTwoFactorEnabled: 'isTwoFactorEnabled',
    method: 'method',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CandidatDataScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    surname: 'surname',
    birthday: 'birthday',
    phone: 'phone',
    resident: 'resident',
    about_my: 'about_my',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    avatar: 'avatar'
  };

  export type CandidatDataScalarFieldEnum = (typeof CandidatDataScalarFieldEnum)[keyof typeof CandidatDataScalarFieldEnum]


  export const CandidatLifeStateScalarFieldEnum: {
    id: 'id',
    availabilityTransport: 'availabilityTransport',
    maritalStatus: 'maritalStatus',
    cdId: 'cdId',
    driverCategory: 'driverCategory'
  };

  export type CandidatLifeStateScalarFieldEnum = (typeof CandidatLifeStateScalarFieldEnum)[keyof typeof CandidatLifeStateScalarFieldEnum]


  export const UserSocialScalarFieldEnum: {
    id: 'id',
    usId: 'usId',
    socialLink: 'socialLink'
  };

  export type UserSocialScalarFieldEnum = (typeof UserSocialScalarFieldEnum)[keyof typeof UserSocialScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    school: 'school',
    grade: 'grade',
    startdate: 'startdate',
    enddate: 'enddate',
    description: 'description',
    levelId: 'levelId',
    cdId: 'cdId'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const SkillsScalarFieldEnum: {
    id: 'id',
    skill: 'skill',
    level: 'level',
    cdId: 'cdId'
  };

  export type SkillsScalarFieldEnum = (typeof SkillsScalarFieldEnum)[keyof typeof SkillsScalarFieldEnum]


  export const ExperienceScalarFieldEnum: {
    id: 'id',
    company: 'company',
    location: 'location',
    currently: 'currently',
    startDate: 'startDate',
    endDate: 'endDate',
    description: 'description',
    contractTypeId: 'contractTypeId',
    cdId: 'cdId'
  };

  export type ExperienceScalarFieldEnum = (typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum]


  export const LanguagesScalarFieldEnum: {
    id: 'id',
    language: 'language',
    level: 'level',
    cdId: 'cdId'
  };

  export type LanguagesScalarFieldEnum = (typeof LanguagesScalarFieldEnum)[keyof typeof LanguagesScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    id: 'id',
    course: 'course',
    institution: 'institution',
    grade: 'grade',
    startdate: 'startdate',
    enddate: 'enddate',
    cdId: 'cdId'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const HobbiesScalarFieldEnum: {
    id: 'id',
    hobbie: 'hobbie',
    cdId: 'cdId'
  };

  export type HobbiesScalarFieldEnum = (typeof HobbiesScalarFieldEnum)[keyof typeof HobbiesScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    reviewerId: 'reviewerId',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const AgencyDataScalarFieldEnum: {
    id: 'id',
    agency_name: 'agency_name',
    slug: 'slug',
    address: 'address',
    phone: 'phone',
    p_iva_c_f: 'p_iva_c_f',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    about: 'about',
    logo: 'logo'
  };

  export type AgencyDataScalarFieldEnum = (typeof AgencyDataScalarFieldEnum)[keyof typeof AgencyDataScalarFieldEnum]


  export const BranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    fax: 'fax',
    address: 'address',
    location: 'location',
    region: 'region',
    logo: 'logo',
    about_branch: 'about_branch',
    adId: 'adId'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const JobOffersScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    region: 'region',
    province: 'province',
    location: 'location',
    reallyUpTo: 'reallyUpTo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isValidate: 'isValidate',
    views: 'views',
    categoryId: 'categoryId',
    contratId: 'contratId',
    experienceId: 'experienceId',
    modeId: 'modeId',
    workingTimeId: 'workingTimeId',
    levelId: 'levelId',
    agencyId: 'agencyId',
    branchId: 'branchId'
  };

  export type JobOffersScalarFieldEnum = (typeof JobOffersScalarFieldEnum)[keyof typeof JobOffersScalarFieldEnum]


  export const SavedJobsScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    jobOfferId: 'jobOfferId',
    savedAt: 'savedAt'
  };

  export type SavedJobsScalarFieldEnum = (typeof SavedJobsScalarFieldEnum)[keyof typeof SavedJobsScalarFieldEnum]


  export const SendCandidatureScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    jobOfferId: 'jobOfferId',
    savedAt: 'savedAt'
  };

  export type SendCandidatureScalarFieldEnum = (typeof SendCandidatureScalarFieldEnum)[keyof typeof SendCandidatureScalarFieldEnum]


  export const ContractTypeJobScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ContractTypeJobScalarFieldEnum = (typeof ContractTypeJobScalarFieldEnum)[keyof typeof ContractTypeJobScalarFieldEnum]


  export const ExperienceMinimalJobScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ExperienceMinimalJobScalarFieldEnum = (typeof ExperienceMinimalJobScalarFieldEnum)[keyof typeof ExperienceMinimalJobScalarFieldEnum]


  export const ModeJobScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ModeJobScalarFieldEnum = (typeof ModeJobScalarFieldEnum)[keyof typeof ModeJobScalarFieldEnum]


  export const WorkingTimeJobScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type WorkingTimeJobScalarFieldEnum = (typeof WorkingTimeJobScalarFieldEnum)[keyof typeof WorkingTimeJobScalarFieldEnum]


  export const LevelEducationScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LevelEducationScalarFieldEnum = (typeof LevelEducationScalarFieldEnum)[keyof typeof LevelEducationScalarFieldEnum]


  export const JobTagsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug'
  };

  export type JobTagsScalarFieldEnum = (typeof JobTagsScalarFieldEnum)[keyof typeof JobTagsScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    level: 'level',
    parentId: 'parentId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SectorsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    categoryId: 'categoryId'
  };

  export type SectorsScalarFieldEnum = (typeof SectorsScalarFieldEnum)[keyof typeof SectorsScalarFieldEnum]


  export const AuthAccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    provide: 'provide',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AuthAccountScalarFieldEnum = (typeof AuthAccountScalarFieldEnum)[keyof typeof AuthAccountScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    type: 'type',
    expiresIn: 'expiresIn',
    createdAt: 'createdAt'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const CandidatDataOrderByRelevanceFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    surname: 'surname',
    birthday: 'birthday',
    phone: 'phone',
    resident: 'resident',
    about_my: 'about_my',
    userId: 'userId',
    avatar: 'avatar'
  };

  export type CandidatDataOrderByRelevanceFieldEnum = (typeof CandidatDataOrderByRelevanceFieldEnum)[keyof typeof CandidatDataOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const CandidatLifeStateOrderByRelevanceFieldEnum: {
    id: 'id',
    cdId: 'cdId'
  };

  export type CandidatLifeStateOrderByRelevanceFieldEnum = (typeof CandidatLifeStateOrderByRelevanceFieldEnum)[keyof typeof CandidatLifeStateOrderByRelevanceFieldEnum]


  export const UserSocialOrderByRelevanceFieldEnum: {
    id: 'id',
    usId: 'usId',
    socialLink: 'socialLink'
  };

  export type UserSocialOrderByRelevanceFieldEnum = (typeof UserSocialOrderByRelevanceFieldEnum)[keyof typeof UserSocialOrderByRelevanceFieldEnum]


  export const EducationOrderByRelevanceFieldEnum: {
    id: 'id',
    school: 'school',
    grade: 'grade',
    description: 'description',
    levelId: 'levelId',
    cdId: 'cdId'
  };

  export type EducationOrderByRelevanceFieldEnum = (typeof EducationOrderByRelevanceFieldEnum)[keyof typeof EducationOrderByRelevanceFieldEnum]


  export const SkillsOrderByRelevanceFieldEnum: {
    id: 'id',
    skill: 'skill',
    cdId: 'cdId'
  };

  export type SkillsOrderByRelevanceFieldEnum = (typeof SkillsOrderByRelevanceFieldEnum)[keyof typeof SkillsOrderByRelevanceFieldEnum]


  export const ExperienceOrderByRelevanceFieldEnum: {
    id: 'id',
    company: 'company',
    location: 'location',
    description: 'description',
    contractTypeId: 'contractTypeId',
    cdId: 'cdId'
  };

  export type ExperienceOrderByRelevanceFieldEnum = (typeof ExperienceOrderByRelevanceFieldEnum)[keyof typeof ExperienceOrderByRelevanceFieldEnum]


  export const LanguagesOrderByRelevanceFieldEnum: {
    id: 'id',
    language: 'language',
    cdId: 'cdId'
  };

  export type LanguagesOrderByRelevanceFieldEnum = (typeof LanguagesOrderByRelevanceFieldEnum)[keyof typeof LanguagesOrderByRelevanceFieldEnum]


  export const CoursesOrderByRelevanceFieldEnum: {
    id: 'id',
    course: 'course',
    institution: 'institution',
    grade: 'grade',
    cdId: 'cdId'
  };

  export type CoursesOrderByRelevanceFieldEnum = (typeof CoursesOrderByRelevanceFieldEnum)[keyof typeof CoursesOrderByRelevanceFieldEnum]


  export const HobbiesOrderByRelevanceFieldEnum: {
    id: 'id',
    hobbie: 'hobbie',
    cdId: 'cdId'
  };

  export type HobbiesOrderByRelevanceFieldEnum = (typeof HobbiesOrderByRelevanceFieldEnum)[keyof typeof HobbiesOrderByRelevanceFieldEnum]


  export const RatingOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    reviewerId: 'reviewerId'
  };

  export type RatingOrderByRelevanceFieldEnum = (typeof RatingOrderByRelevanceFieldEnum)[keyof typeof RatingOrderByRelevanceFieldEnum]


  export const AgencyDataOrderByRelevanceFieldEnum: {
    id: 'id',
    agency_name: 'agency_name',
    slug: 'slug',
    address: 'address',
    phone: 'phone',
    p_iva_c_f: 'p_iva_c_f',
    userId: 'userId',
    about: 'about',
    logo: 'logo'
  };

  export type AgencyDataOrderByRelevanceFieldEnum = (typeof AgencyDataOrderByRelevanceFieldEnum)[keyof typeof AgencyDataOrderByRelevanceFieldEnum]


  export const BranchOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    fax: 'fax',
    address: 'address',
    location: 'location',
    region: 'region',
    logo: 'logo',
    about_branch: 'about_branch',
    adId: 'adId'
  };

  export type BranchOrderByRelevanceFieldEnum = (typeof BranchOrderByRelevanceFieldEnum)[keyof typeof BranchOrderByRelevanceFieldEnum]


  export const jobOffersOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    region: 'region',
    province: 'province',
    location: 'location',
    categoryId: 'categoryId',
    contratId: 'contratId',
    experienceId: 'experienceId',
    modeId: 'modeId',
    workingTimeId: 'workingTimeId',
    levelId: 'levelId',
    agencyId: 'agencyId',
    branchId: 'branchId'
  };

  export type jobOffersOrderByRelevanceFieldEnum = (typeof jobOffersOrderByRelevanceFieldEnum)[keyof typeof jobOffersOrderByRelevanceFieldEnum]


  export const SavedJobsOrderByRelevanceFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    jobOfferId: 'jobOfferId'
  };

  export type SavedJobsOrderByRelevanceFieldEnum = (typeof SavedJobsOrderByRelevanceFieldEnum)[keyof typeof SavedJobsOrderByRelevanceFieldEnum]


  export const SendCandidatureOrderByRelevanceFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    jobOfferId: 'jobOfferId'
  };

  export type SendCandidatureOrderByRelevanceFieldEnum = (typeof SendCandidatureOrderByRelevanceFieldEnum)[keyof typeof SendCandidatureOrderByRelevanceFieldEnum]


  export const ContractTypeJobOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ContractTypeJobOrderByRelevanceFieldEnum = (typeof ContractTypeJobOrderByRelevanceFieldEnum)[keyof typeof ContractTypeJobOrderByRelevanceFieldEnum]


  export const ExperienceMinimalJobOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ExperienceMinimalJobOrderByRelevanceFieldEnum = (typeof ExperienceMinimalJobOrderByRelevanceFieldEnum)[keyof typeof ExperienceMinimalJobOrderByRelevanceFieldEnum]


  export const ModeJobOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ModeJobOrderByRelevanceFieldEnum = (typeof ModeJobOrderByRelevanceFieldEnum)[keyof typeof ModeJobOrderByRelevanceFieldEnum]


  export const WorkingTimeJobOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type WorkingTimeJobOrderByRelevanceFieldEnum = (typeof WorkingTimeJobOrderByRelevanceFieldEnum)[keyof typeof WorkingTimeJobOrderByRelevanceFieldEnum]


  export const LevelEducationOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LevelEducationOrderByRelevanceFieldEnum = (typeof LevelEducationOrderByRelevanceFieldEnum)[keyof typeof LevelEducationOrderByRelevanceFieldEnum]


  export const jobTagsOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug'
  };

  export type jobTagsOrderByRelevanceFieldEnum = (typeof jobTagsOrderByRelevanceFieldEnum)[keyof typeof jobTagsOrderByRelevanceFieldEnum]


  export const CategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    parentId: 'parentId'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const SectorsOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    categoryId: 'categoryId'
  };

  export type SectorsOrderByRelevanceFieldEnum = (typeof SectorsOrderByRelevanceFieldEnum)[keyof typeof SectorsOrderByRelevanceFieldEnum]


  export const AuthAccountOrderByRelevanceFieldEnum: {
    id: 'id',
    type: 'type',
    provide: 'provide',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    userId: 'userId'
  };

  export type AuthAccountOrderByRelevanceFieldEnum = (typeof AuthAccountOrderByRelevanceFieldEnum)[keyof typeof AuthAccountOrderByRelevanceFieldEnum]


  export const TokensOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token'
  };

  export type TokensOrderByRelevanceFieldEnum = (typeof TokensOrderByRelevanceFieldEnum)[keyof typeof TokensOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AuthMethod'
   */
  export type EnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod'>
    


  /**
   * Reference to a field of type 'AuthMethod[]'
   */
  export type ListEnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'MaritalStatus'
   */
  export type EnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus'>
    


  /**
   * Reference to a field of type 'MaritalStatus[]'
   */
  export type ListEnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'SkillsLevel'
   */
  export type EnumSkillsLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillsLevel'>
    


  /**
   * Reference to a field of type 'SkillsLevel[]'
   */
  export type ListEnumSkillsLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillsLevel[]'>
    


  /**
   * Reference to a field of type 'LanguageLevel'
   */
  export type EnumLanguageLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LanguageLevel'>
    


  /**
   * Reference to a field of type 'LanguageLevel[]'
   */
  export type ListEnumLanguageLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LanguageLevel[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    agencydata?: XOR<AgencyDataNullableScalarRelationFilter, AgencyDataWhereInput> | null
    social?: UserSocialListRelationFilter
    authAccounts?: AuthAccountListRelationFilter
    candidatdata?: XOR<CandidatDataNullableScalarRelationFilter, CandidatDataWhereInput> | null
    ratings?: RatingListRelationFilter
    reviews?: RatingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencydata?: AgencyDataOrderByWithRelationInput
    social?: UserSocialOrderByRelationAggregateInput
    authAccounts?: AuthAccountOrderByRelationAggregateInput
    candidatdata?: CandidatDataOrderByWithRelationInput
    ratings?: RatingOrderByRelationAggregateInput
    reviews?: RatingOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    agencydata?: XOR<AgencyDataNullableScalarRelationFilter, AgencyDataWhereInput> | null
    social?: UserSocialListRelationFilter
    authAccounts?: AuthAccountListRelationFilter
    candidatdata?: XOR<CandidatDataNullableScalarRelationFilter, CandidatDataWhereInput> | null
    ratings?: RatingListRelationFilter
    reviews?: RatingListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    method?: EnumAuthMethodWithAggregatesFilter<"User"> | $Enums.AuthMethod
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CandidatDataWhereInput = {
    AND?: CandidatDataWhereInput | CandidatDataWhereInput[]
    OR?: CandidatDataWhereInput[]
    NOT?: CandidatDataWhereInput | CandidatDataWhereInput[]
    id?: StringFilter<"CandidatData"> | string
    firstname?: StringFilter<"CandidatData"> | string
    surname?: StringFilter<"CandidatData"> | string
    birthday?: StringFilter<"CandidatData"> | string
    phone?: StringNullableFilter<"CandidatData"> | string | null
    resident?: StringNullableFilter<"CandidatData"> | string | null
    about_my?: StringNullableFilter<"CandidatData"> | string | null
    createdAt?: DateTimeFilter<"CandidatData"> | Date | string
    updatedAt?: DateTimeFilter<"CandidatData"> | Date | string
    userId?: StringFilter<"CandidatData"> | string
    avatar?: StringNullableListFilter<"CandidatData">
    courses?: CoursesListRelationFilter
    education?: EducationListRelationFilter
    experience?: ExperienceListRelationFilter
    hobbies?: HobbiesListRelationFilter
    languages?: LanguagesListRelationFilter
    skills?: SkillsListRelationFilter
    savedJobs?: SavedJobsListRelationFilter
    sendCandidature?: SendCandidatureListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    candidatLifeState?: XOR<CandidatLifeStateNullableScalarRelationFilter, CandidatLifeStateWhereInput> | null
  }

  export type CandidatDataOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrderInput | SortOrder
    resident?: SortOrderInput | SortOrder
    about_my?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    courses?: CoursesOrderByRelationAggregateInput
    education?: EducationOrderByRelationAggregateInput
    experience?: ExperienceOrderByRelationAggregateInput
    hobbies?: HobbiesOrderByRelationAggregateInput
    languages?: LanguagesOrderByRelationAggregateInput
    skills?: SkillsOrderByRelationAggregateInput
    savedJobs?: SavedJobsOrderByRelationAggregateInput
    sendCandidature?: SendCandidatureOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    candidatLifeState?: CandidatLifeStateOrderByWithRelationInput
    _relevance?: CandidatDataOrderByRelevanceInput
  }

  export type CandidatDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CandidatDataWhereInput | CandidatDataWhereInput[]
    OR?: CandidatDataWhereInput[]
    NOT?: CandidatDataWhereInput | CandidatDataWhereInput[]
    firstname?: StringFilter<"CandidatData"> | string
    surname?: StringFilter<"CandidatData"> | string
    birthday?: StringFilter<"CandidatData"> | string
    phone?: StringNullableFilter<"CandidatData"> | string | null
    resident?: StringNullableFilter<"CandidatData"> | string | null
    about_my?: StringNullableFilter<"CandidatData"> | string | null
    createdAt?: DateTimeFilter<"CandidatData"> | Date | string
    updatedAt?: DateTimeFilter<"CandidatData"> | Date | string
    avatar?: StringNullableListFilter<"CandidatData">
    courses?: CoursesListRelationFilter
    education?: EducationListRelationFilter
    experience?: ExperienceListRelationFilter
    hobbies?: HobbiesListRelationFilter
    languages?: LanguagesListRelationFilter
    skills?: SkillsListRelationFilter
    savedJobs?: SavedJobsListRelationFilter
    sendCandidature?: SendCandidatureListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    candidatLifeState?: XOR<CandidatLifeStateNullableScalarRelationFilter, CandidatLifeStateWhereInput> | null
  }, "id" | "userId">

  export type CandidatDataOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrderInput | SortOrder
    resident?: SortOrderInput | SortOrder
    about_my?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    _count?: CandidatDataCountOrderByAggregateInput
    _max?: CandidatDataMaxOrderByAggregateInput
    _min?: CandidatDataMinOrderByAggregateInput
  }

  export type CandidatDataScalarWhereWithAggregatesInput = {
    AND?: CandidatDataScalarWhereWithAggregatesInput | CandidatDataScalarWhereWithAggregatesInput[]
    OR?: CandidatDataScalarWhereWithAggregatesInput[]
    NOT?: CandidatDataScalarWhereWithAggregatesInput | CandidatDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidatData"> | string
    firstname?: StringWithAggregatesFilter<"CandidatData"> | string
    surname?: StringWithAggregatesFilter<"CandidatData"> | string
    birthday?: StringWithAggregatesFilter<"CandidatData"> | string
    phone?: StringNullableWithAggregatesFilter<"CandidatData"> | string | null
    resident?: StringNullableWithAggregatesFilter<"CandidatData"> | string | null
    about_my?: StringNullableWithAggregatesFilter<"CandidatData"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CandidatData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CandidatData"> | Date | string
    userId?: StringWithAggregatesFilter<"CandidatData"> | string
    avatar?: StringNullableListFilter<"CandidatData">
  }

  export type CandidatLifeStateWhereInput = {
    AND?: CandidatLifeStateWhereInput | CandidatLifeStateWhereInput[]
    OR?: CandidatLifeStateWhereInput[]
    NOT?: CandidatLifeStateWhereInput | CandidatLifeStateWhereInput[]
    id?: StringFilter<"CandidatLifeState"> | string
    availabilityTransport?: BoolFilter<"CandidatLifeState"> | boolean
    maritalStatus?: EnumMaritalStatusFilter<"CandidatLifeState"> | $Enums.MaritalStatus
    cdId?: StringFilter<"CandidatLifeState"> | string
    driverCategory?: JsonNullableFilter<"CandidatLifeState">
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type CandidatLifeStateOrderByWithRelationInput = {
    id?: SortOrder
    availabilityTransport?: SortOrder
    maritalStatus?: SortOrder
    cdId?: SortOrder
    driverCategory?: SortOrderInput | SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: CandidatLifeStateOrderByRelevanceInput
  }

  export type CandidatLifeStateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cdId?: string
    AND?: CandidatLifeStateWhereInput | CandidatLifeStateWhereInput[]
    OR?: CandidatLifeStateWhereInput[]
    NOT?: CandidatLifeStateWhereInput | CandidatLifeStateWhereInput[]
    availabilityTransport?: BoolFilter<"CandidatLifeState"> | boolean
    maritalStatus?: EnumMaritalStatusFilter<"CandidatLifeState"> | $Enums.MaritalStatus
    driverCategory?: JsonNullableFilter<"CandidatLifeState">
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id" | "cdId">

  export type CandidatLifeStateOrderByWithAggregationInput = {
    id?: SortOrder
    availabilityTransport?: SortOrder
    maritalStatus?: SortOrder
    cdId?: SortOrder
    driverCategory?: SortOrderInput | SortOrder
    _count?: CandidatLifeStateCountOrderByAggregateInput
    _max?: CandidatLifeStateMaxOrderByAggregateInput
    _min?: CandidatLifeStateMinOrderByAggregateInput
  }

  export type CandidatLifeStateScalarWhereWithAggregatesInput = {
    AND?: CandidatLifeStateScalarWhereWithAggregatesInput | CandidatLifeStateScalarWhereWithAggregatesInput[]
    OR?: CandidatLifeStateScalarWhereWithAggregatesInput[]
    NOT?: CandidatLifeStateScalarWhereWithAggregatesInput | CandidatLifeStateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidatLifeState"> | string
    availabilityTransport?: BoolWithAggregatesFilter<"CandidatLifeState"> | boolean
    maritalStatus?: EnumMaritalStatusWithAggregatesFilter<"CandidatLifeState"> | $Enums.MaritalStatus
    cdId?: StringWithAggregatesFilter<"CandidatLifeState"> | string
    driverCategory?: JsonNullableWithAggregatesFilter<"CandidatLifeState">
  }

  export type UserSocialWhereInput = {
    AND?: UserSocialWhereInput | UserSocialWhereInput[]
    OR?: UserSocialWhereInput[]
    NOT?: UserSocialWhereInput | UserSocialWhereInput[]
    id?: StringFilter<"UserSocial"> | string
    usId?: StringFilter<"UserSocial"> | string
    socialLink?: StringFilter<"UserSocial"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSocialOrderByWithRelationInput = {
    id?: SortOrder
    usId?: SortOrder
    socialLink?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserSocialOrderByRelevanceInput
  }

  export type UserSocialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSocialWhereInput | UserSocialWhereInput[]
    OR?: UserSocialWhereInput[]
    NOT?: UserSocialWhereInput | UserSocialWhereInput[]
    usId?: StringFilter<"UserSocial"> | string
    socialLink?: StringFilter<"UserSocial"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserSocialOrderByWithAggregationInput = {
    id?: SortOrder
    usId?: SortOrder
    socialLink?: SortOrder
    _count?: UserSocialCountOrderByAggregateInput
    _max?: UserSocialMaxOrderByAggregateInput
    _min?: UserSocialMinOrderByAggregateInput
  }

  export type UserSocialScalarWhereWithAggregatesInput = {
    AND?: UserSocialScalarWhereWithAggregatesInput | UserSocialScalarWhereWithAggregatesInput[]
    OR?: UserSocialScalarWhereWithAggregatesInput[]
    NOT?: UserSocialScalarWhereWithAggregatesInput | UserSocialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSocial"> | string
    usId?: StringWithAggregatesFilter<"UserSocial"> | string
    socialLink?: StringWithAggregatesFilter<"UserSocial"> | string
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: StringFilter<"Education"> | string
    school?: StringFilter<"Education"> | string
    grade?: StringNullableFilter<"Education"> | string | null
    startdate?: DateTimeFilter<"Education"> | Date | string
    enddate?: DateTimeFilter<"Education"> | Date | string
    description?: StringNullableFilter<"Education"> | string | null
    levelId?: StringNullableFilter<"Education"> | string | null
    cdId?: StringFilter<"Education"> | string
    levelEducation?: XOR<LevelEducationNullableScalarRelationFilter, LevelEducationWhereInput> | null
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    school?: SortOrder
    grade?: SortOrderInput | SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    description?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    cdId?: SortOrder
    levelEducation?: LevelEducationOrderByWithRelationInput
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: EducationOrderByRelevanceInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    school?: StringFilter<"Education"> | string
    grade?: StringNullableFilter<"Education"> | string | null
    startdate?: DateTimeFilter<"Education"> | Date | string
    enddate?: DateTimeFilter<"Education"> | Date | string
    description?: StringNullableFilter<"Education"> | string | null
    levelId?: StringNullableFilter<"Education"> | string | null
    cdId?: StringFilter<"Education"> | string
    levelEducation?: XOR<LevelEducationNullableScalarRelationFilter, LevelEducationWhereInput> | null
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    school?: SortOrder
    grade?: SortOrderInput | SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    description?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    cdId?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Education"> | string
    school?: StringWithAggregatesFilter<"Education"> | string
    grade?: StringNullableWithAggregatesFilter<"Education"> | string | null
    startdate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    enddate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Education"> | string | null
    levelId?: StringNullableWithAggregatesFilter<"Education"> | string | null
    cdId?: StringWithAggregatesFilter<"Education"> | string
  }

  export type SkillsWhereInput = {
    AND?: SkillsWhereInput | SkillsWhereInput[]
    OR?: SkillsWhereInput[]
    NOT?: SkillsWhereInput | SkillsWhereInput[]
    id?: StringFilter<"Skills"> | string
    skill?: StringFilter<"Skills"> | string
    level?: EnumSkillsLevelFilter<"Skills"> | $Enums.SkillsLevel
    cdId?: StringFilter<"Skills"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type SkillsOrderByWithRelationInput = {
    id?: SortOrder
    skill?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: SkillsOrderByRelevanceInput
  }

  export type SkillsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SkillsWhereInput | SkillsWhereInput[]
    OR?: SkillsWhereInput[]
    NOT?: SkillsWhereInput | SkillsWhereInput[]
    skill?: StringFilter<"Skills"> | string
    level?: EnumSkillsLevelFilter<"Skills"> | $Enums.SkillsLevel
    cdId?: StringFilter<"Skills"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type SkillsOrderByWithAggregationInput = {
    id?: SortOrder
    skill?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
    _count?: SkillsCountOrderByAggregateInput
    _max?: SkillsMaxOrderByAggregateInput
    _min?: SkillsMinOrderByAggregateInput
  }

  export type SkillsScalarWhereWithAggregatesInput = {
    AND?: SkillsScalarWhereWithAggregatesInput | SkillsScalarWhereWithAggregatesInput[]
    OR?: SkillsScalarWhereWithAggregatesInput[]
    NOT?: SkillsScalarWhereWithAggregatesInput | SkillsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Skills"> | string
    skill?: StringWithAggregatesFilter<"Skills"> | string
    level?: EnumSkillsLevelWithAggregatesFilter<"Skills"> | $Enums.SkillsLevel
    cdId?: StringWithAggregatesFilter<"Skills"> | string
  }

  export type ExperienceWhereInput = {
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    id?: StringFilter<"Experience"> | string
    company?: StringFilter<"Experience"> | string
    location?: StringNullableFilter<"Experience"> | string | null
    currently?: BoolFilter<"Experience"> | boolean
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringNullableFilter<"Experience"> | string | null
    contractTypeId?: StringNullableFilter<"Experience"> | string | null
    cdId?: StringFilter<"Experience"> | string
    contractTypeJob?: XOR<ContractTypeJobNullableScalarRelationFilter, ContractTypeJobWhereInput> | null
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type ExperienceOrderByWithRelationInput = {
    id?: SortOrder
    company?: SortOrder
    location?: SortOrderInput | SortOrder
    currently?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrderInput | SortOrder
    contractTypeId?: SortOrderInput | SortOrder
    cdId?: SortOrder
    contractTypeJob?: ContractTypeJobOrderByWithRelationInput
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: ExperienceOrderByRelevanceInput
  }

  export type ExperienceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    company?: StringFilter<"Experience"> | string
    location?: StringNullableFilter<"Experience"> | string | null
    currently?: BoolFilter<"Experience"> | boolean
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringNullableFilter<"Experience"> | string | null
    contractTypeId?: StringNullableFilter<"Experience"> | string | null
    cdId?: StringFilter<"Experience"> | string
    contractTypeJob?: XOR<ContractTypeJobNullableScalarRelationFilter, ContractTypeJobWhereInput> | null
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type ExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    company?: SortOrder
    location?: SortOrderInput | SortOrder
    currently?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrderInput | SortOrder
    contractTypeId?: SortOrderInput | SortOrder
    cdId?: SortOrder
    _count?: ExperienceCountOrderByAggregateInput
    _max?: ExperienceMaxOrderByAggregateInput
    _min?: ExperienceMinOrderByAggregateInput
  }

  export type ExperienceScalarWhereWithAggregatesInput = {
    AND?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    OR?: ExperienceScalarWhereWithAggregatesInput[]
    NOT?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Experience"> | string
    company?: StringWithAggregatesFilter<"Experience"> | string
    location?: StringNullableWithAggregatesFilter<"Experience"> | string | null
    currently?: BoolWithAggregatesFilter<"Experience"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Experience"> | string | null
    contractTypeId?: StringNullableWithAggregatesFilter<"Experience"> | string | null
    cdId?: StringWithAggregatesFilter<"Experience"> | string
  }

  export type LanguagesWhereInput = {
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    id?: StringFilter<"Languages"> | string
    language?: StringFilter<"Languages"> | string
    level?: EnumLanguageLevelFilter<"Languages"> | $Enums.LanguageLevel
    cdId?: StringFilter<"Languages"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type LanguagesOrderByWithRelationInput = {
    id?: SortOrder
    language?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: LanguagesOrderByRelevanceInput
  }

  export type LanguagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    language?: StringFilter<"Languages"> | string
    level?: EnumLanguageLevelFilter<"Languages"> | $Enums.LanguageLevel
    cdId?: StringFilter<"Languages"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type LanguagesOrderByWithAggregationInput = {
    id?: SortOrder
    language?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
    _count?: LanguagesCountOrderByAggregateInput
    _max?: LanguagesMaxOrderByAggregateInput
    _min?: LanguagesMinOrderByAggregateInput
  }

  export type LanguagesScalarWhereWithAggregatesInput = {
    AND?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    OR?: LanguagesScalarWhereWithAggregatesInput[]
    NOT?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Languages"> | string
    language?: StringWithAggregatesFilter<"Languages"> | string
    level?: EnumLanguageLevelWithAggregatesFilter<"Languages"> | $Enums.LanguageLevel
    cdId?: StringWithAggregatesFilter<"Languages"> | string
  }

  export type CoursesWhereInput = {
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    id?: StringFilter<"Courses"> | string
    course?: StringFilter<"Courses"> | string
    institution?: StringFilter<"Courses"> | string
    grade?: StringNullableFilter<"Courses"> | string | null
    startdate?: DateTimeFilter<"Courses"> | Date | string
    enddate?: DateTimeFilter<"Courses"> | Date | string
    cdId?: StringFilter<"Courses"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type CoursesOrderByWithRelationInput = {
    id?: SortOrder
    course?: SortOrder
    institution?: SortOrder
    grade?: SortOrderInput | SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    cdId?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: CoursesOrderByRelevanceInput
  }

  export type CoursesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    course?: StringFilter<"Courses"> | string
    institution?: StringFilter<"Courses"> | string
    grade?: StringNullableFilter<"Courses"> | string | null
    startdate?: DateTimeFilter<"Courses"> | Date | string
    enddate?: DateTimeFilter<"Courses"> | Date | string
    cdId?: StringFilter<"Courses"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type CoursesOrderByWithAggregationInput = {
    id?: SortOrder
    course?: SortOrder
    institution?: SortOrder
    grade?: SortOrderInput | SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    cdId?: SortOrder
    _count?: CoursesCountOrderByAggregateInput
    _max?: CoursesMaxOrderByAggregateInput
    _min?: CoursesMinOrderByAggregateInput
  }

  export type CoursesScalarWhereWithAggregatesInput = {
    AND?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    OR?: CoursesScalarWhereWithAggregatesInput[]
    NOT?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Courses"> | string
    course?: StringWithAggregatesFilter<"Courses"> | string
    institution?: StringWithAggregatesFilter<"Courses"> | string
    grade?: StringNullableWithAggregatesFilter<"Courses"> | string | null
    startdate?: DateTimeWithAggregatesFilter<"Courses"> | Date | string
    enddate?: DateTimeWithAggregatesFilter<"Courses"> | Date | string
    cdId?: StringWithAggregatesFilter<"Courses"> | string
  }

  export type HobbiesWhereInput = {
    AND?: HobbiesWhereInput | HobbiesWhereInput[]
    OR?: HobbiesWhereInput[]
    NOT?: HobbiesWhereInput | HobbiesWhereInput[]
    id?: StringFilter<"Hobbies"> | string
    hobbie?: StringFilter<"Hobbies"> | string
    cdId?: StringFilter<"Hobbies"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }

  export type HobbiesOrderByWithRelationInput = {
    id?: SortOrder
    hobbie?: SortOrder
    cdId?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    _relevance?: HobbiesOrderByRelevanceInput
  }

  export type HobbiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HobbiesWhereInput | HobbiesWhereInput[]
    OR?: HobbiesWhereInput[]
    NOT?: HobbiesWhereInput | HobbiesWhereInput[]
    hobbie?: StringFilter<"Hobbies"> | string
    cdId?: StringFilter<"Hobbies"> | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
  }, "id">

  export type HobbiesOrderByWithAggregationInput = {
    id?: SortOrder
    hobbie?: SortOrder
    cdId?: SortOrder
    _count?: HobbiesCountOrderByAggregateInput
    _max?: HobbiesMaxOrderByAggregateInput
    _min?: HobbiesMinOrderByAggregateInput
  }

  export type HobbiesScalarWhereWithAggregatesInput = {
    AND?: HobbiesScalarWhereWithAggregatesInput | HobbiesScalarWhereWithAggregatesInput[]
    OR?: HobbiesScalarWhereWithAggregatesInput[]
    NOT?: HobbiesScalarWhereWithAggregatesInput | HobbiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Hobbies"> | string
    hobbie?: StringWithAggregatesFilter<"Hobbies"> | string
    cdId?: StringWithAggregatesFilter<"Hobbies"> | string
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    reviewerId?: StringFilter<"Rating"> | string
    rating?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    _relevance?: RatingOrderByRelevanceInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_reviewerId?: RatingUserIdReviewerIdCompoundUniqueInput
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    userId?: StringFilter<"Rating"> | string
    reviewerId?: StringFilter<"Rating"> | string
    rating?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_reviewerId">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rating"> | string
    userId?: StringWithAggregatesFilter<"Rating"> | string
    reviewerId?: StringWithAggregatesFilter<"Rating"> | string
    rating?: IntWithAggregatesFilter<"Rating"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
  }

  export type AgencyDataWhereInput = {
    AND?: AgencyDataWhereInput | AgencyDataWhereInput[]
    OR?: AgencyDataWhereInput[]
    NOT?: AgencyDataWhereInput | AgencyDataWhereInput[]
    id?: StringFilter<"AgencyData"> | string
    agency_name?: StringFilter<"AgencyData"> | string
    slug?: StringFilter<"AgencyData"> | string
    address?: StringFilter<"AgencyData"> | string
    phone?: StringFilter<"AgencyData"> | string
    p_iva_c_f?: StringFilter<"AgencyData"> | string
    createdAt?: DateTimeFilter<"AgencyData"> | Date | string
    updatedAt?: DateTimeFilter<"AgencyData"> | Date | string
    userId?: StringFilter<"AgencyData"> | string
    about?: StringFilter<"AgencyData"> | string
    logo?: StringNullableListFilter<"AgencyData">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: BranchListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }

  export type AgencyDataOrderByWithRelationInput = {
    id?: SortOrder
    agency_name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    p_iva_c_f?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    about?: SortOrder
    logo?: SortOrder
    user?: UserOrderByWithRelationInput
    branch?: BranchOrderByRelationAggregateInput
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: AgencyDataOrderByRelevanceInput
  }

  export type AgencyDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    userId?: string
    AND?: AgencyDataWhereInput | AgencyDataWhereInput[]
    OR?: AgencyDataWhereInput[]
    NOT?: AgencyDataWhereInput | AgencyDataWhereInput[]
    agency_name?: StringFilter<"AgencyData"> | string
    address?: StringFilter<"AgencyData"> | string
    phone?: StringFilter<"AgencyData"> | string
    p_iva_c_f?: StringFilter<"AgencyData"> | string
    createdAt?: DateTimeFilter<"AgencyData"> | Date | string
    updatedAt?: DateTimeFilter<"AgencyData"> | Date | string
    about?: StringFilter<"AgencyData"> | string
    logo?: StringNullableListFilter<"AgencyData">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: BranchListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }, "id" | "slug" | "userId">

  export type AgencyDataOrderByWithAggregationInput = {
    id?: SortOrder
    agency_name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    p_iva_c_f?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    about?: SortOrder
    logo?: SortOrder
    _count?: AgencyDataCountOrderByAggregateInput
    _max?: AgencyDataMaxOrderByAggregateInput
    _min?: AgencyDataMinOrderByAggregateInput
  }

  export type AgencyDataScalarWhereWithAggregatesInput = {
    AND?: AgencyDataScalarWhereWithAggregatesInput | AgencyDataScalarWhereWithAggregatesInput[]
    OR?: AgencyDataScalarWhereWithAggregatesInput[]
    NOT?: AgencyDataScalarWhereWithAggregatesInput | AgencyDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgencyData"> | string
    agency_name?: StringWithAggregatesFilter<"AgencyData"> | string
    slug?: StringWithAggregatesFilter<"AgencyData"> | string
    address?: StringWithAggregatesFilter<"AgencyData"> | string
    phone?: StringWithAggregatesFilter<"AgencyData"> | string
    p_iva_c_f?: StringWithAggregatesFilter<"AgencyData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AgencyData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AgencyData"> | Date | string
    userId?: StringWithAggregatesFilter<"AgencyData"> | string
    about?: StringWithAggregatesFilter<"AgencyData"> | string
    logo?: StringNullableListFilter<"AgencyData">
  }

  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    email?: StringFilter<"Branch"> | string
    phone?: StringFilter<"Branch"> | string
    fax?: StringNullableFilter<"Branch"> | string | null
    address?: StringFilter<"Branch"> | string
    location?: StringFilter<"Branch"> | string
    region?: StringFilter<"Branch"> | string
    logo?: StringNullableFilter<"Branch"> | string | null
    about_branch?: StringNullableFilter<"Branch"> | string | null
    adId?: StringFilter<"Branch"> | string
    agency?: XOR<AgencyDataScalarRelationFilter, AgencyDataWhereInput>
    jobOffers?: JobOffersListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    fax?: SortOrderInput | SortOrder
    address?: SortOrder
    location?: SortOrder
    region?: SortOrder
    logo?: SortOrderInput | SortOrder
    about_branch?: SortOrderInput | SortOrder
    adId?: SortOrder
    agency?: AgencyDataOrderByWithRelationInput
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: BranchOrderByRelevanceInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    email?: StringFilter<"Branch"> | string
    phone?: StringFilter<"Branch"> | string
    fax?: StringNullableFilter<"Branch"> | string | null
    address?: StringFilter<"Branch"> | string
    location?: StringFilter<"Branch"> | string
    region?: StringFilter<"Branch"> | string
    logo?: StringNullableFilter<"Branch"> | string | null
    about_branch?: StringNullableFilter<"Branch"> | string | null
    adId?: StringFilter<"Branch"> | string
    agency?: XOR<AgencyDataScalarRelationFilter, AgencyDataWhereInput>
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type BranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    fax?: SortOrderInput | SortOrder
    address?: SortOrder
    location?: SortOrder
    region?: SortOrder
    logo?: SortOrderInput | SortOrder
    about_branch?: SortOrderInput | SortOrder
    adId?: SortOrder
    _count?: BranchCountOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Branch"> | string
    name?: StringWithAggregatesFilter<"Branch"> | string
    email?: StringWithAggregatesFilter<"Branch"> | string
    phone?: StringWithAggregatesFilter<"Branch"> | string
    fax?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    address?: StringWithAggregatesFilter<"Branch"> | string
    location?: StringWithAggregatesFilter<"Branch"> | string
    region?: StringWithAggregatesFilter<"Branch"> | string
    logo?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    about_branch?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    adId?: StringWithAggregatesFilter<"Branch"> | string
  }

  export type jobOffersWhereInput = {
    AND?: jobOffersWhereInput | jobOffersWhereInput[]
    OR?: jobOffersWhereInput[]
    NOT?: jobOffersWhereInput | jobOffersWhereInput[]
    id?: StringFilter<"jobOffers"> | string
    title?: StringFilter<"jobOffers"> | string
    slug?: StringFilter<"jobOffers"> | string
    description?: StringFilter<"jobOffers"> | string
    region?: StringFilter<"jobOffers"> | string
    province?: StringFilter<"jobOffers"> | string
    location?: StringFilter<"jobOffers"> | string
    reallyUpTo?: DateTimeNullableFilter<"jobOffers"> | Date | string | null
    createdAt?: DateTimeFilter<"jobOffers"> | Date | string
    updatedAt?: DateTimeFilter<"jobOffers"> | Date | string
    isValidate?: BoolFilter<"jobOffers"> | boolean
    views?: IntFilter<"jobOffers"> | number
    categoryId?: StringFilter<"jobOffers"> | string
    contratId?: StringNullableFilter<"jobOffers"> | string | null
    experienceId?: StringNullableFilter<"jobOffers"> | string | null
    modeId?: StringNullableFilter<"jobOffers"> | string | null
    workingTimeId?: StringNullableFilter<"jobOffers"> | string | null
    levelId?: StringNullableFilter<"jobOffers"> | string | null
    agencyId?: StringFilter<"jobOffers"> | string
    branchId?: StringNullableFilter<"jobOffers"> | string | null
    agency?: XOR<AgencyDataScalarRelationFilter, AgencyDataWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    categories?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    contractType?: XOR<ContractTypeJobNullableScalarRelationFilter, ContractTypeJobWhereInput> | null
    experienceMinimalJob?: XOR<ExperienceMinimalJobNullableScalarRelationFilter, ExperienceMinimalJobWhereInput> | null
    levelEducation?: XOR<LevelEducationNullableScalarRelationFilter, LevelEducationWhereInput> | null
    modeJob?: XOR<ModeJobNullableScalarRelationFilter, ModeJobWhereInput> | null
    workingTimeJob?: XOR<WorkingTimeJobNullableScalarRelationFilter, WorkingTimeJobWhereInput> | null
    sectors?: SectorsListRelationFilter
    tags?: JobTagsListRelationFilter
    savedBy?: SavedJobsListRelationFilter
    sendCandidature?: SendCandidatureListRelationFilter
  }

  export type jobOffersOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    region?: SortOrder
    province?: SortOrder
    location?: SortOrder
    reallyUpTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isValidate?: SortOrder
    views?: SortOrder
    categoryId?: SortOrder
    contratId?: SortOrderInput | SortOrder
    experienceId?: SortOrderInput | SortOrder
    modeId?: SortOrderInput | SortOrder
    workingTimeId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    agency?: AgencyDataOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    categories?: CategoryOrderByWithRelationInput
    contractType?: ContractTypeJobOrderByWithRelationInput
    experienceMinimalJob?: ExperienceMinimalJobOrderByWithRelationInput
    levelEducation?: LevelEducationOrderByWithRelationInput
    modeJob?: ModeJobOrderByWithRelationInput
    workingTimeJob?: WorkingTimeJobOrderByWithRelationInput
    sectors?: SectorsOrderByRelationAggregateInput
    tags?: jobTagsOrderByRelationAggregateInput
    savedBy?: SavedJobsOrderByRelationAggregateInput
    sendCandidature?: SendCandidatureOrderByRelationAggregateInput
    _relevance?: jobOffersOrderByRelevanceInput
  }

  export type jobOffersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: jobOffersWhereInput | jobOffersWhereInput[]
    OR?: jobOffersWhereInput[]
    NOT?: jobOffersWhereInput | jobOffersWhereInput[]
    title?: StringFilter<"jobOffers"> | string
    description?: StringFilter<"jobOffers"> | string
    region?: StringFilter<"jobOffers"> | string
    province?: StringFilter<"jobOffers"> | string
    location?: StringFilter<"jobOffers"> | string
    reallyUpTo?: DateTimeNullableFilter<"jobOffers"> | Date | string | null
    createdAt?: DateTimeFilter<"jobOffers"> | Date | string
    updatedAt?: DateTimeFilter<"jobOffers"> | Date | string
    isValidate?: BoolFilter<"jobOffers"> | boolean
    views?: IntFilter<"jobOffers"> | number
    categoryId?: StringFilter<"jobOffers"> | string
    contratId?: StringNullableFilter<"jobOffers"> | string | null
    experienceId?: StringNullableFilter<"jobOffers"> | string | null
    modeId?: StringNullableFilter<"jobOffers"> | string | null
    workingTimeId?: StringNullableFilter<"jobOffers"> | string | null
    levelId?: StringNullableFilter<"jobOffers"> | string | null
    agencyId?: StringFilter<"jobOffers"> | string
    branchId?: StringNullableFilter<"jobOffers"> | string | null
    agency?: XOR<AgencyDataScalarRelationFilter, AgencyDataWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    categories?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    contractType?: XOR<ContractTypeJobNullableScalarRelationFilter, ContractTypeJobWhereInput> | null
    experienceMinimalJob?: XOR<ExperienceMinimalJobNullableScalarRelationFilter, ExperienceMinimalJobWhereInput> | null
    levelEducation?: XOR<LevelEducationNullableScalarRelationFilter, LevelEducationWhereInput> | null
    modeJob?: XOR<ModeJobNullableScalarRelationFilter, ModeJobWhereInput> | null
    workingTimeJob?: XOR<WorkingTimeJobNullableScalarRelationFilter, WorkingTimeJobWhereInput> | null
    sectors?: SectorsListRelationFilter
    tags?: JobTagsListRelationFilter
    savedBy?: SavedJobsListRelationFilter
    sendCandidature?: SendCandidatureListRelationFilter
  }, "id" | "slug">

  export type jobOffersOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    region?: SortOrder
    province?: SortOrder
    location?: SortOrder
    reallyUpTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isValidate?: SortOrder
    views?: SortOrder
    categoryId?: SortOrder
    contratId?: SortOrderInput | SortOrder
    experienceId?: SortOrderInput | SortOrder
    modeId?: SortOrderInput | SortOrder
    workingTimeId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    _count?: jobOffersCountOrderByAggregateInput
    _avg?: jobOffersAvgOrderByAggregateInput
    _max?: jobOffersMaxOrderByAggregateInput
    _min?: jobOffersMinOrderByAggregateInput
    _sum?: jobOffersSumOrderByAggregateInput
  }

  export type jobOffersScalarWhereWithAggregatesInput = {
    AND?: jobOffersScalarWhereWithAggregatesInput | jobOffersScalarWhereWithAggregatesInput[]
    OR?: jobOffersScalarWhereWithAggregatesInput[]
    NOT?: jobOffersScalarWhereWithAggregatesInput | jobOffersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"jobOffers"> | string
    title?: StringWithAggregatesFilter<"jobOffers"> | string
    slug?: StringWithAggregatesFilter<"jobOffers"> | string
    description?: StringWithAggregatesFilter<"jobOffers"> | string
    region?: StringWithAggregatesFilter<"jobOffers"> | string
    province?: StringWithAggregatesFilter<"jobOffers"> | string
    location?: StringWithAggregatesFilter<"jobOffers"> | string
    reallyUpTo?: DateTimeNullableWithAggregatesFilter<"jobOffers"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"jobOffers"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"jobOffers"> | Date | string
    isValidate?: BoolWithAggregatesFilter<"jobOffers"> | boolean
    views?: IntWithAggregatesFilter<"jobOffers"> | number
    categoryId?: StringWithAggregatesFilter<"jobOffers"> | string
    contratId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
    experienceId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
    modeId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
    workingTimeId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
    levelId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
    agencyId?: StringWithAggregatesFilter<"jobOffers"> | string
    branchId?: StringNullableWithAggregatesFilter<"jobOffers"> | string | null
  }

  export type SavedJobsWhereInput = {
    AND?: SavedJobsWhereInput | SavedJobsWhereInput[]
    OR?: SavedJobsWhereInput[]
    NOT?: SavedJobsWhereInput | SavedJobsWhereInput[]
    id?: StringFilter<"SavedJobs"> | string
    candidateId?: StringFilter<"SavedJobs"> | string
    jobOfferId?: StringFilter<"SavedJobs"> | string
    savedAt?: DateTimeFilter<"SavedJobs"> | Date | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
    jobOffer?: XOR<JobOffersScalarRelationFilter, jobOffersWhereInput>
  }

  export type SavedJobsOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    jobOffer?: jobOffersOrderByWithRelationInput
    _relevance?: SavedJobsOrderByRelevanceInput
  }

  export type SavedJobsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    candidateId_jobOfferId?: SavedJobsCandidateIdJobOfferIdCompoundUniqueInput
    AND?: SavedJobsWhereInput | SavedJobsWhereInput[]
    OR?: SavedJobsWhereInput[]
    NOT?: SavedJobsWhereInput | SavedJobsWhereInput[]
    candidateId?: StringFilter<"SavedJobs"> | string
    jobOfferId?: StringFilter<"SavedJobs"> | string
    savedAt?: DateTimeFilter<"SavedJobs"> | Date | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
    jobOffer?: XOR<JobOffersScalarRelationFilter, jobOffersWhereInput>
  }, "id" | "candidateId_jobOfferId">

  export type SavedJobsOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
    _count?: SavedJobsCountOrderByAggregateInput
    _max?: SavedJobsMaxOrderByAggregateInput
    _min?: SavedJobsMinOrderByAggregateInput
  }

  export type SavedJobsScalarWhereWithAggregatesInput = {
    AND?: SavedJobsScalarWhereWithAggregatesInput | SavedJobsScalarWhereWithAggregatesInput[]
    OR?: SavedJobsScalarWhereWithAggregatesInput[]
    NOT?: SavedJobsScalarWhereWithAggregatesInput | SavedJobsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SavedJobs"> | string
    candidateId?: StringWithAggregatesFilter<"SavedJobs"> | string
    jobOfferId?: StringWithAggregatesFilter<"SavedJobs"> | string
    savedAt?: DateTimeWithAggregatesFilter<"SavedJobs"> | Date | string
  }

  export type SendCandidatureWhereInput = {
    AND?: SendCandidatureWhereInput | SendCandidatureWhereInput[]
    OR?: SendCandidatureWhereInput[]
    NOT?: SendCandidatureWhereInput | SendCandidatureWhereInput[]
    id?: StringFilter<"SendCandidature"> | string
    candidateId?: StringFilter<"SendCandidature"> | string
    jobOfferId?: StringFilter<"SendCandidature"> | string
    savedAt?: DateTimeFilter<"SendCandidature"> | Date | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
    jobOffer?: XOR<JobOffersScalarRelationFilter, jobOffersWhereInput>
  }

  export type SendCandidatureOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
    candidate?: CandidatDataOrderByWithRelationInput
    jobOffer?: jobOffersOrderByWithRelationInput
    _relevance?: SendCandidatureOrderByRelevanceInput
  }

  export type SendCandidatureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    candidateId_jobOfferId?: SendCandidatureCandidateIdJobOfferIdCompoundUniqueInput
    AND?: SendCandidatureWhereInput | SendCandidatureWhereInput[]
    OR?: SendCandidatureWhereInput[]
    NOT?: SendCandidatureWhereInput | SendCandidatureWhereInput[]
    candidateId?: StringFilter<"SendCandidature"> | string
    jobOfferId?: StringFilter<"SendCandidature"> | string
    savedAt?: DateTimeFilter<"SendCandidature"> | Date | string
    candidate?: XOR<CandidatDataScalarRelationFilter, CandidatDataWhereInput>
    jobOffer?: XOR<JobOffersScalarRelationFilter, jobOffersWhereInput>
  }, "id" | "candidateId_jobOfferId">

  export type SendCandidatureOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
    _count?: SendCandidatureCountOrderByAggregateInput
    _max?: SendCandidatureMaxOrderByAggregateInput
    _min?: SendCandidatureMinOrderByAggregateInput
  }

  export type SendCandidatureScalarWhereWithAggregatesInput = {
    AND?: SendCandidatureScalarWhereWithAggregatesInput | SendCandidatureScalarWhereWithAggregatesInput[]
    OR?: SendCandidatureScalarWhereWithAggregatesInput[]
    NOT?: SendCandidatureScalarWhereWithAggregatesInput | SendCandidatureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SendCandidature"> | string
    candidateId?: StringWithAggregatesFilter<"SendCandidature"> | string
    jobOfferId?: StringWithAggregatesFilter<"SendCandidature"> | string
    savedAt?: DateTimeWithAggregatesFilter<"SendCandidature"> | Date | string
  }

  export type ContractTypeJobWhereInput = {
    AND?: ContractTypeJobWhereInput | ContractTypeJobWhereInput[]
    OR?: ContractTypeJobWhereInput[]
    NOT?: ContractTypeJobWhereInput | ContractTypeJobWhereInput[]
    id?: StringFilter<"ContractTypeJob"> | string
    name?: StringFilter<"ContractTypeJob"> | string
    experience?: ExperienceListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }

  export type ContractTypeJobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    experience?: ExperienceOrderByRelationAggregateInput
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: ContractTypeJobOrderByRelevanceInput
  }

  export type ContractTypeJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractTypeJobWhereInput | ContractTypeJobWhereInput[]
    OR?: ContractTypeJobWhereInput[]
    NOT?: ContractTypeJobWhereInput | ContractTypeJobWhereInput[]
    name?: StringFilter<"ContractTypeJob"> | string
    experience?: ExperienceListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type ContractTypeJobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ContractTypeJobCountOrderByAggregateInput
    _max?: ContractTypeJobMaxOrderByAggregateInput
    _min?: ContractTypeJobMinOrderByAggregateInput
  }

  export type ContractTypeJobScalarWhereWithAggregatesInput = {
    AND?: ContractTypeJobScalarWhereWithAggregatesInput | ContractTypeJobScalarWhereWithAggregatesInput[]
    OR?: ContractTypeJobScalarWhereWithAggregatesInput[]
    NOT?: ContractTypeJobScalarWhereWithAggregatesInput | ContractTypeJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractTypeJob"> | string
    name?: StringWithAggregatesFilter<"ContractTypeJob"> | string
  }

  export type ExperienceMinimalJobWhereInput = {
    AND?: ExperienceMinimalJobWhereInput | ExperienceMinimalJobWhereInput[]
    OR?: ExperienceMinimalJobWhereInput[]
    NOT?: ExperienceMinimalJobWhereInput | ExperienceMinimalJobWhereInput[]
    id?: StringFilter<"ExperienceMinimalJob"> | string
    name?: StringFilter<"ExperienceMinimalJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }

  export type ExperienceMinimalJobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: ExperienceMinimalJobOrderByRelevanceInput
  }

  export type ExperienceMinimalJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExperienceMinimalJobWhereInput | ExperienceMinimalJobWhereInput[]
    OR?: ExperienceMinimalJobWhereInput[]
    NOT?: ExperienceMinimalJobWhereInput | ExperienceMinimalJobWhereInput[]
    name?: StringFilter<"ExperienceMinimalJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type ExperienceMinimalJobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ExperienceMinimalJobCountOrderByAggregateInput
    _max?: ExperienceMinimalJobMaxOrderByAggregateInput
    _min?: ExperienceMinimalJobMinOrderByAggregateInput
  }

  export type ExperienceMinimalJobScalarWhereWithAggregatesInput = {
    AND?: ExperienceMinimalJobScalarWhereWithAggregatesInput | ExperienceMinimalJobScalarWhereWithAggregatesInput[]
    OR?: ExperienceMinimalJobScalarWhereWithAggregatesInput[]
    NOT?: ExperienceMinimalJobScalarWhereWithAggregatesInput | ExperienceMinimalJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExperienceMinimalJob"> | string
    name?: StringWithAggregatesFilter<"ExperienceMinimalJob"> | string
  }

  export type ModeJobWhereInput = {
    AND?: ModeJobWhereInput | ModeJobWhereInput[]
    OR?: ModeJobWhereInput[]
    NOT?: ModeJobWhereInput | ModeJobWhereInput[]
    id?: StringFilter<"ModeJob"> | string
    name?: StringFilter<"ModeJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }

  export type ModeJobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: ModeJobOrderByRelevanceInput
  }

  export type ModeJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ModeJobWhereInput | ModeJobWhereInput[]
    OR?: ModeJobWhereInput[]
    NOT?: ModeJobWhereInput | ModeJobWhereInput[]
    name?: StringFilter<"ModeJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type ModeJobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ModeJobCountOrderByAggregateInput
    _max?: ModeJobMaxOrderByAggregateInput
    _min?: ModeJobMinOrderByAggregateInput
  }

  export type ModeJobScalarWhereWithAggregatesInput = {
    AND?: ModeJobScalarWhereWithAggregatesInput | ModeJobScalarWhereWithAggregatesInput[]
    OR?: ModeJobScalarWhereWithAggregatesInput[]
    NOT?: ModeJobScalarWhereWithAggregatesInput | ModeJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ModeJob"> | string
    name?: StringWithAggregatesFilter<"ModeJob"> | string
  }

  export type WorkingTimeJobWhereInput = {
    AND?: WorkingTimeJobWhereInput | WorkingTimeJobWhereInput[]
    OR?: WorkingTimeJobWhereInput[]
    NOT?: WorkingTimeJobWhereInput | WorkingTimeJobWhereInput[]
    id?: StringFilter<"WorkingTimeJob"> | string
    name?: StringFilter<"WorkingTimeJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }

  export type WorkingTimeJobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: WorkingTimeJobOrderByRelevanceInput
  }

  export type WorkingTimeJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkingTimeJobWhereInput | WorkingTimeJobWhereInput[]
    OR?: WorkingTimeJobWhereInput[]
    NOT?: WorkingTimeJobWhereInput | WorkingTimeJobWhereInput[]
    name?: StringFilter<"WorkingTimeJob"> | string
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type WorkingTimeJobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: WorkingTimeJobCountOrderByAggregateInput
    _max?: WorkingTimeJobMaxOrderByAggregateInput
    _min?: WorkingTimeJobMinOrderByAggregateInput
  }

  export type WorkingTimeJobScalarWhereWithAggregatesInput = {
    AND?: WorkingTimeJobScalarWhereWithAggregatesInput | WorkingTimeJobScalarWhereWithAggregatesInput[]
    OR?: WorkingTimeJobScalarWhereWithAggregatesInput[]
    NOT?: WorkingTimeJobScalarWhereWithAggregatesInput | WorkingTimeJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkingTimeJob"> | string
    name?: StringWithAggregatesFilter<"WorkingTimeJob"> | string
  }

  export type LevelEducationWhereInput = {
    AND?: LevelEducationWhereInput | LevelEducationWhereInput[]
    OR?: LevelEducationWhereInput[]
    NOT?: LevelEducationWhereInput | LevelEducationWhereInput[]
    id?: StringFilter<"LevelEducation"> | string
    name?: StringFilter<"LevelEducation"> | string
    education?: EducationListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }

  export type LevelEducationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    education?: EducationOrderByRelationAggregateInput
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: LevelEducationOrderByRelevanceInput
  }

  export type LevelEducationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelEducationWhereInput | LevelEducationWhereInput[]
    OR?: LevelEducationWhereInput[]
    NOT?: LevelEducationWhereInput | LevelEducationWhereInput[]
    name?: StringFilter<"LevelEducation"> | string
    education?: EducationListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type LevelEducationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: LevelEducationCountOrderByAggregateInput
    _max?: LevelEducationMaxOrderByAggregateInput
    _min?: LevelEducationMinOrderByAggregateInput
  }

  export type LevelEducationScalarWhereWithAggregatesInput = {
    AND?: LevelEducationScalarWhereWithAggregatesInput | LevelEducationScalarWhereWithAggregatesInput[]
    OR?: LevelEducationScalarWhereWithAggregatesInput[]
    NOT?: LevelEducationScalarWhereWithAggregatesInput | LevelEducationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LevelEducation"> | string
    name?: StringWithAggregatesFilter<"LevelEducation"> | string
  }

  export type jobTagsWhereInput = {
    AND?: jobTagsWhereInput | jobTagsWhereInput[]
    OR?: jobTagsWhereInput[]
    NOT?: jobTagsWhereInput | jobTagsWhereInput[]
    id?: StringFilter<"jobTags"> | string
    name?: StringFilter<"jobTags"> | string
    slug?: StringFilter<"jobTags"> | string
    jobOffers?: JobOffersListRelationFilter
  }

  export type jobTagsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: jobTagsOrderByRelevanceInput
  }

  export type jobTagsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: jobTagsWhereInput | jobTagsWhereInput[]
    OR?: jobTagsWhereInput[]
    NOT?: jobTagsWhereInput | jobTagsWhereInput[]
    name?: StringFilter<"jobTags"> | string
    slug?: StringFilter<"jobTags"> | string
    jobOffers?: JobOffersListRelationFilter
  }, "id">

  export type jobTagsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    _count?: jobTagsCountOrderByAggregateInput
    _max?: jobTagsMaxOrderByAggregateInput
    _min?: jobTagsMinOrderByAggregateInput
  }

  export type jobTagsScalarWhereWithAggregatesInput = {
    AND?: jobTagsScalarWhereWithAggregatesInput | jobTagsScalarWhereWithAggregatesInput[]
    OR?: jobTagsScalarWhereWithAggregatesInput[]
    NOT?: jobTagsScalarWhereWithAggregatesInput | jobTagsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"jobTags"> | string
    name?: StringWithAggregatesFilter<"jobTags"> | string
    slug?: StringWithAggregatesFilter<"jobTags"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    level?: IntNullableFilter<"Category"> | number | null
    parentId?: StringNullableFilter<"Category"> | string | null
    sectors?: SectorsListRelationFilter
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    level?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    sectors?: SectorsOrderByRelationAggregateInput
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    jobOffers?: jobOffersOrderByRelationAggregateInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringFilter<"Category"> | string
    level?: IntNullableFilter<"Category"> | number | null
    parentId?: StringNullableFilter<"Category"> | string | null
    sectors?: SectorsListRelationFilter
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    jobOffers?: JobOffersListRelationFilter
  }, "id" | "name" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    level?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    description?: StringWithAggregatesFilter<"Category"> | string
    level?: IntNullableWithAggregatesFilter<"Category"> | number | null
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type SectorsWhereInput = {
    AND?: SectorsWhereInput | SectorsWhereInput[]
    OR?: SectorsWhereInput[]
    NOT?: SectorsWhereInput | SectorsWhereInput[]
    id?: StringFilter<"Sectors"> | string
    name?: StringFilter<"Sectors"> | string
    slug?: StringFilter<"Sectors"> | string
    categoryId?: StringFilter<"Sectors"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    jobOffer?: JobOffersListRelationFilter
  }

  export type SectorsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    jobOffer?: jobOffersOrderByRelationAggregateInput
    _relevance?: SectorsOrderByRelevanceInput
  }

  export type SectorsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: SectorsWhereInput | SectorsWhereInput[]
    OR?: SectorsWhereInput[]
    NOT?: SectorsWhereInput | SectorsWhereInput[]
    categoryId?: StringFilter<"Sectors"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    jobOffer?: JobOffersListRelationFilter
  }, "id" | "name" | "slug">

  export type SectorsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
    _count?: SectorsCountOrderByAggregateInput
    _max?: SectorsMaxOrderByAggregateInput
    _min?: SectorsMinOrderByAggregateInput
  }

  export type SectorsScalarWhereWithAggregatesInput = {
    AND?: SectorsScalarWhereWithAggregatesInput | SectorsScalarWhereWithAggregatesInput[]
    OR?: SectorsScalarWhereWithAggregatesInput[]
    NOT?: SectorsScalarWhereWithAggregatesInput | SectorsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sectors"> | string
    name?: StringWithAggregatesFilter<"Sectors"> | string
    slug?: StringWithAggregatesFilter<"Sectors"> | string
    categoryId?: StringWithAggregatesFilter<"Sectors"> | string
  }

  export type AuthAccountWhereInput = {
    AND?: AuthAccountWhereInput | AuthAccountWhereInput[]
    OR?: AuthAccountWhereInput[]
    NOT?: AuthAccountWhereInput | AuthAccountWhereInput[]
    id?: StringFilter<"AuthAccount"> | string
    type?: StringFilter<"AuthAccount"> | string
    provide?: StringFilter<"AuthAccount"> | string
    refreshToken?: StringNullableFilter<"AuthAccount"> | string | null
    accessToken?: StringNullableFilter<"AuthAccount"> | string | null
    expiresAt?: IntFilter<"AuthAccount"> | number
    createdAt?: DateTimeFilter<"AuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"AuthAccount"> | Date | string
    userId?: StringNullableFilter<"AuthAccount"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuthAccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    provide?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuthAccountOrderByRelevanceInput
  }

  export type AuthAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthAccountWhereInput | AuthAccountWhereInput[]
    OR?: AuthAccountWhereInput[]
    NOT?: AuthAccountWhereInput | AuthAccountWhereInput[]
    type?: StringFilter<"AuthAccount"> | string
    provide?: StringFilter<"AuthAccount"> | string
    refreshToken?: StringNullableFilter<"AuthAccount"> | string | null
    accessToken?: StringNullableFilter<"AuthAccount"> | string | null
    expiresAt?: IntFilter<"AuthAccount"> | number
    createdAt?: DateTimeFilter<"AuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"AuthAccount"> | Date | string
    userId?: StringNullableFilter<"AuthAccount"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuthAccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    provide?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AuthAccountCountOrderByAggregateInput
    _avg?: AuthAccountAvgOrderByAggregateInput
    _max?: AuthAccountMaxOrderByAggregateInput
    _min?: AuthAccountMinOrderByAggregateInput
    _sum?: AuthAccountSumOrderByAggregateInput
  }

  export type AuthAccountScalarWhereWithAggregatesInput = {
    AND?: AuthAccountScalarWhereWithAggregatesInput | AuthAccountScalarWhereWithAggregatesInput[]
    OR?: AuthAccountScalarWhereWithAggregatesInput[]
    NOT?: AuthAccountScalarWhereWithAggregatesInput | AuthAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthAccount"> | string
    type?: StringWithAggregatesFilter<"AuthAccount"> | string
    provide?: StringWithAggregatesFilter<"AuthAccount"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"AuthAccount"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"AuthAccount"> | string | null
    expiresAt?: IntWithAggregatesFilter<"AuthAccount"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AuthAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AuthAccount"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"AuthAccount"> | string | null
  }

  export type TokensWhereInput = {
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    id?: StringFilter<"Tokens"> | string
    email?: StringFilter<"Tokens"> | string
    token?: StringFilter<"Tokens"> | string
    type?: EnumTokenTypeFilter<"Tokens"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Tokens"> | Date | string
    createdAt?: DateTimeFilter<"Tokens"> | Date | string
  }

  export type TokensOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
    _relevance?: TokensOrderByRelevanceInput
  }

  export type TokensWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    email?: StringFilter<"Tokens"> | string
    type?: EnumTokenTypeFilter<"Tokens"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Tokens"> | Date | string
    createdAt?: DateTimeFilter<"Tokens"> | Date | string
  }, "id" | "token">

  export type TokensOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
    _count?: TokensCountOrderByAggregateInput
    _max?: TokensMaxOrderByAggregateInput
    _min?: TokensMinOrderByAggregateInput
  }

  export type TokensScalarWhereWithAggregatesInput = {
    AND?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    OR?: TokensScalarWhereWithAggregatesInput[]
    NOT?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tokens"> | string
    email?: StringWithAggregatesFilter<"Tokens"> | string
    token?: StringWithAggregatesFilter<"Tokens"> | string
    type?: EnumTokenTypeWithAggregatesFilter<"Tokens"> | $Enums.TokenType
    expiresIn?: DateTimeWithAggregatesFilter<"Tokens"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Tokens"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    social?: UserSocialCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    social?: UserSocialUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatDataCreateInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataCreateManyInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
  }

  export type CandidatDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
  }

  export type CandidatDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
  }

  export type CandidatLifeStateCreateInput = {
    id?: string
    availabilityTransport?: boolean
    maritalStatus?: $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
    candidate: CandidatDataCreateNestedOneWithoutCandidatLifeStateInput
  }

  export type CandidatLifeStateUncheckedCreateInput = {
    id?: string
    availabilityTransport?: boolean
    maritalStatus?: $Enums.MaritalStatus
    cdId: string
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
    candidate?: CandidatDataUpdateOneRequiredWithoutCandidatLifeStateNestedInput
  }

  export type CandidatLifeStateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    cdId?: StringFieldUpdateOperationsInput | string
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateCreateManyInput = {
    id?: string
    availabilityTransport?: boolean
    maritalStatus?: $Enums.MaritalStatus
    cdId: string
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    cdId?: StringFieldUpdateOperationsInput | string
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSocialCreateInput = {
    id?: string
    socialLink: string
    user: UserCreateNestedOneWithoutSocialInput
  }

  export type UserSocialUncheckedCreateInput = {
    id?: string
    usId: string
    socialLink: string
  }

  export type UserSocialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSocialNestedInput
  }

  export type UserSocialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usId?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type UserSocialCreateManyInput = {
    id?: string
    usId: string
    socialLink: string
  }

  export type UserSocialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type UserSocialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usId?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelEducation?: LevelEducationCreateNestedOneWithoutEducationInput
    candidate: CandidatDataCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelId?: string | null
    cdId: string
  }

  export type EducationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelEducation?: LevelEducationUpdateOneWithoutEducationNestedInput
    candidate?: CandidatDataUpdateOneRequiredWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateManyInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelId?: string | null
    cdId: string
  }

  export type EducationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsCreateInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
    candidate: CandidatDataCreateNestedOneWithoutSkillsInput
  }

  export type SkillsUncheckedCreateInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
    cdId: string
  }

  export type SkillsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
    candidate?: CandidatDataUpdateOneRequiredWithoutSkillsNestedInput
  }

  export type SkillsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type SkillsCreateManyInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
    cdId: string
  }

  export type SkillsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
  }

  export type SkillsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeJob?: ContractTypeJobCreateNestedOneWithoutExperienceInput
    candidate: CandidatDataCreateNestedOneWithoutExperienceInput
  }

  export type ExperienceUncheckedCreateInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeId?: string | null
    cdId: string
  }

  export type ExperienceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeJob?: ContractTypeJobUpdateOneWithoutExperienceNestedInput
    candidate?: CandidatDataUpdateOneRequiredWithoutExperienceNestedInput
  }

  export type ExperienceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateManyInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeId?: string | null
    cdId: string
  }

  export type ExperienceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperienceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesCreateInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
    candidate: CandidatDataCreateNestedOneWithoutLanguagesInput
  }

  export type LanguagesUncheckedCreateInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
    cdId: string
  }

  export type LanguagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    candidate?: CandidatDataUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesCreateManyInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
    cdId: string
  }

  export type LanguagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
  }

  export type LanguagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type CoursesCreateInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    candidate: CandidatDataCreateNestedOneWithoutCoursesInput
  }

  export type CoursesUncheckedCreateInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    cdId: string
  }

  export type CoursesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatDataUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CoursesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type CoursesCreateManyInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    cdId: string
  }

  export type CoursesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type HobbiesCreateInput = {
    id?: string
    hobbie: string
    candidate: CandidatDataCreateNestedOneWithoutHobbiesInput
  }

  export type HobbiesUncheckedCreateInput = {
    id?: string
    hobbie: string
    cdId: string
  }

  export type HobbiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
    candidate?: CandidatDataUpdateOneRequiredWithoutHobbiesNestedInput
  }

  export type HobbiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type HobbiesCreateManyInput = {
    id?: string
    hobbie: string
    cdId: string
  }

  export type HobbiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
  }

  export type HobbiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateInput = {
    id?: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
    reviewer: UserCreateNestedOneWithoutReviewsInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    userId: string
    reviewerId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateManyInput = {
    id?: string
    userId: string
    reviewerId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyDataCreateInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    user: UserCreateNestedOneWithoutAgencydataInput
    branch?: BranchCreateNestedManyWithoutAgencyInput
    jobOffers?: jobOffersCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataUncheckedCreateInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    branch?: BranchUncheckedCreateNestedManyWithoutAgencyInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    user?: UserUpdateOneRequiredWithoutAgencydataNestedInput
    branch?: BranchUpdateManyWithoutAgencyNestedInput
    jobOffers?: jobOffersUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    branch?: BranchUncheckedUpdateManyWithoutAgencyNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyDataCreateManyInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
  }

  export type AgencyDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
  }

  export type AgencyDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
  }

  export type BranchCreateInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    agency: AgencyDataCreateNestedOneWithoutBranchInput
    jobOffers?: jobOffersCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    adId: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyDataUpdateOneRequiredWithoutBranchNestedInput
    jobOffers?: jobOffersUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    adId?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    adId: string
  }

  export type BranchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BranchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    adId?: StringFieldUpdateOperationsInput | string
  }

  export type jobOffersCreateInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersCreateManyInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type jobOffersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
  }

  export type jobOffersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedJobsCreateInput = {
    id?: string
    savedAt?: Date | string
    candidate: CandidatDataCreateNestedOneWithoutSavedJobsInput
    jobOffer: jobOffersCreateNestedOneWithoutSavedByInput
  }

  export type SavedJobsUncheckedCreateInput = {
    id?: string
    candidateId: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SavedJobsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatDataUpdateOneRequiredWithoutSavedJobsNestedInput
    jobOffer?: jobOffersUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedJobsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobsCreateManyInput = {
    id?: string
    candidateId: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SavedJobsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureCreateInput = {
    id?: string
    savedAt?: Date | string
    candidate: CandidatDataCreateNestedOneWithoutSendCandidatureInput
    jobOffer: jobOffersCreateNestedOneWithoutSendCandidatureInput
  }

  export type SendCandidatureUncheckedCreateInput = {
    id?: string
    candidateId: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SendCandidatureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatDataUpdateOneRequiredWithoutSendCandidatureNestedInput
    jobOffer?: jobOffersUpdateOneRequiredWithoutSendCandidatureNestedInput
  }

  export type SendCandidatureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureCreateManyInput = {
    id?: string
    candidateId: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SendCandidatureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractTypeJobCreateInput = {
    id?: string
    name: string
    experience?: ExperienceCreateNestedManyWithoutContractTypeJobInput
    jobOffers?: jobOffersCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeJobUncheckedCreateInput = {
    id?: string
    name: string
    experience?: ExperienceUncheckedCreateNestedManyWithoutContractTypeJobInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    experience?: ExperienceUpdateManyWithoutContractTypeJobNestedInput
    jobOffers?: jobOffersUpdateManyWithoutContractTypeNestedInput
  }

  export type ContractTypeJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    experience?: ExperienceUncheckedUpdateManyWithoutContractTypeJobNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutContractTypeNestedInput
  }

  export type ContractTypeJobCreateManyInput = {
    id?: string
    name: string
  }

  export type ContractTypeJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ContractTypeJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceMinimalJobCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersCreateNestedManyWithoutExperienceMinimalJobInput
  }

  export type ExperienceMinimalJobUncheckedCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutExperienceMinimalJobInput
  }

  export type ExperienceMinimalJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutExperienceMinimalJobNestedInput
  }

  export type ExperienceMinimalJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutExperienceMinimalJobNestedInput
  }

  export type ExperienceMinimalJobCreateManyInput = {
    id?: string
    name: string
  }

  export type ExperienceMinimalJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceMinimalJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ModeJobCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersCreateNestedManyWithoutModeJobInput
  }

  export type ModeJobUncheckedCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutModeJobInput
  }

  export type ModeJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutModeJobNestedInput
  }

  export type ModeJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutModeJobNestedInput
  }

  export type ModeJobCreateManyInput = {
    id?: string
    name: string
  }

  export type ModeJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ModeJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingTimeJobCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersCreateNestedManyWithoutWorkingTimeJobInput
  }

  export type WorkingTimeJobUncheckedCreateInput = {
    id?: string
    name: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutWorkingTimeJobInput
  }

  export type WorkingTimeJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutWorkingTimeJobNestedInput
  }

  export type WorkingTimeJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutWorkingTimeJobNestedInput
  }

  export type WorkingTimeJobCreateManyInput = {
    id?: string
    name: string
  }

  export type WorkingTimeJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingTimeJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LevelEducationCreateInput = {
    id?: string
    name: string
    education?: EducationCreateNestedManyWithoutLevelEducationInput
    jobOffers?: jobOffersCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationUncheckedCreateInput = {
    id?: string
    name: string
    education?: EducationUncheckedCreateNestedManyWithoutLevelEducationInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    education?: EducationUpdateManyWithoutLevelEducationNestedInput
    jobOffers?: jobOffersUpdateManyWithoutLevelEducationNestedInput
  }

  export type LevelEducationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutLevelEducationNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutLevelEducationNestedInput
  }

  export type LevelEducationCreateManyInput = {
    id?: string
    name: string
  }

  export type LevelEducationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LevelEducationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type jobTagsCreateInput = {
    id?: string
    name: string
    slug: string
    jobOffers?: jobOffersCreateNestedManyWithoutTagsInput
  }

  export type jobTagsUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutTagsInput
  }

  export type jobTagsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutTagsNestedInput
  }

  export type jobTagsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type jobTagsCreateManyInput = {
    id?: string
    name: string
    slug: string
  }

  export type jobTagsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type jobTagsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    sectors?: SectorsCreateNestedManyWithoutCategoryInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parentId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    sectors?: SectorsUpdateManyWithoutCategoryNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parentId?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectorsCreateInput = {
    id?: string
    name: string
    slug: string
    category: CategoryCreateNestedOneWithoutSectorsInput
    jobOffer?: jobOffersCreateNestedManyWithoutSectorsInput
  }

  export type SectorsUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    categoryId: string
    jobOffer?: jobOffersUncheckedCreateNestedManyWithoutSectorsInput
  }

  export type SectorsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutSectorsNestedInput
    jobOffer?: jobOffersUpdateManyWithoutSectorsNestedInput
  }

  export type SectorsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    jobOffer?: jobOffersUncheckedUpdateManyWithoutSectorsNestedInput
  }

  export type SectorsCreateManyInput = {
    id?: string
    name: string
    slug: string
    categoryId: string
  }

  export type SectorsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SectorsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type AuthAccountCreateInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutAuthAccountsInput
  }

  export type AuthAccountUncheckedCreateInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AuthAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuthAccountsNestedInput
  }

  export type AuthAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthAccountCreateManyInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AuthAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TokensCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokensUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokensUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensCreateManyInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokensUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AgencyDataNullableScalarRelationFilter = {
    is?: AgencyDataWhereInput | null
    isNot?: AgencyDataWhereInput | null
  }

  export type UserSocialListRelationFilter = {
    every?: UserSocialWhereInput
    some?: UserSocialWhereInput
    none?: UserSocialWhereInput
  }

  export type AuthAccountListRelationFilter = {
    every?: AuthAccountWhereInput
    some?: AuthAccountWhereInput
    none?: AuthAccountWhereInput
  }

  export type CandidatDataNullableScalarRelationFilter = {
    is?: CandidatDataWhereInput | null
    isNot?: CandidatDataWhereInput | null
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type UserSocialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CoursesListRelationFilter = {
    every?: CoursesWhereInput
    some?: CoursesWhereInput
    none?: CoursesWhereInput
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type ExperienceListRelationFilter = {
    every?: ExperienceWhereInput
    some?: ExperienceWhereInput
    none?: ExperienceWhereInput
  }

  export type HobbiesListRelationFilter = {
    every?: HobbiesWhereInput
    some?: HobbiesWhereInput
    none?: HobbiesWhereInput
  }

  export type LanguagesListRelationFilter = {
    every?: LanguagesWhereInput
    some?: LanguagesWhereInput
    none?: LanguagesWhereInput
  }

  export type SkillsListRelationFilter = {
    every?: SkillsWhereInput
    some?: SkillsWhereInput
    none?: SkillsWhereInput
  }

  export type SavedJobsListRelationFilter = {
    every?: SavedJobsWhereInput
    some?: SavedJobsWhereInput
    none?: SavedJobsWhereInput
  }

  export type SendCandidatureListRelationFilter = {
    every?: SendCandidatureWhereInput
    some?: SendCandidatureWhereInput
    none?: SendCandidatureWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CandidatLifeStateNullableScalarRelationFilter = {
    is?: CandidatLifeStateWhereInput | null
    isNot?: CandidatLifeStateWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CoursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HobbiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedJobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SendCandidatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidatDataOrderByRelevanceInput = {
    fields: CandidatDataOrderByRelevanceFieldEnum | CandidatDataOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CandidatDataCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    resident?: SortOrder
    about_my?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
  }

  export type CandidatDataMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    resident?: SortOrder
    about_my?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CandidatDataMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    resident?: SortOrder
    about_my?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumMaritalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaritalStatusFilter<$PrismaModel> | $Enums.MaritalStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CandidatDataScalarRelationFilter = {
    is?: CandidatDataWhereInput
    isNot?: CandidatDataWhereInput
  }

  export type CandidatLifeStateOrderByRelevanceInput = {
    fields: CandidatLifeStateOrderByRelevanceFieldEnum | CandidatLifeStateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CandidatLifeStateCountOrderByAggregateInput = {
    id?: SortOrder
    availabilityTransport?: SortOrder
    maritalStatus?: SortOrder
    cdId?: SortOrder
    driverCategory?: SortOrder
  }

  export type CandidatLifeStateMaxOrderByAggregateInput = {
    id?: SortOrder
    availabilityTransport?: SortOrder
    maritalStatus?: SortOrder
    cdId?: SortOrder
  }

  export type CandidatLifeStateMinOrderByAggregateInput = {
    id?: SortOrder
    availabilityTransport?: SortOrder
    maritalStatus?: SortOrder
    cdId?: SortOrder
  }

  export type EnumMaritalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaritalStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserSocialOrderByRelevanceInput = {
    fields: UserSocialOrderByRelevanceFieldEnum | UserSocialOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserSocialCountOrderByAggregateInput = {
    id?: SortOrder
    usId?: SortOrder
    socialLink?: SortOrder
  }

  export type UserSocialMaxOrderByAggregateInput = {
    id?: SortOrder
    usId?: SortOrder
    socialLink?: SortOrder
  }

  export type UserSocialMinOrderByAggregateInput = {
    id?: SortOrder
    usId?: SortOrder
    socialLink?: SortOrder
  }

  export type LevelEducationNullableScalarRelationFilter = {
    is?: LevelEducationWhereInput | null
    isNot?: LevelEducationWhereInput | null
  }

  export type EducationOrderByRelevanceInput = {
    fields: EducationOrderByRelevanceFieldEnum | EducationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    school?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    description?: SortOrder
    levelId?: SortOrder
    cdId?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    school?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    description?: SortOrder
    levelId?: SortOrder
    cdId?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    school?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    description?: SortOrder
    levelId?: SortOrder
    cdId?: SortOrder
  }

  export type EnumSkillsLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillsLevel | EnumSkillsLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillsLevelFilter<$PrismaModel> | $Enums.SkillsLevel
  }

  export type SkillsOrderByRelevanceInput = {
    fields: SkillsOrderByRelevanceFieldEnum | SkillsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SkillsCountOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type SkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type SkillsMinOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type EnumSkillsLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillsLevel | EnumSkillsLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillsLevelWithAggregatesFilter<$PrismaModel> | $Enums.SkillsLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkillsLevelFilter<$PrismaModel>
    _max?: NestedEnumSkillsLevelFilter<$PrismaModel>
  }

  export type ContractTypeJobNullableScalarRelationFilter = {
    is?: ContractTypeJobWhereInput | null
    isNot?: ContractTypeJobWhereInput | null
  }

  export type ExperienceOrderByRelevanceInput = {
    fields: ExperienceOrderByRelevanceFieldEnum | ExperienceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    location?: SortOrder
    currently?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    contractTypeId?: SortOrder
    cdId?: SortOrder
  }

  export type ExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    location?: SortOrder
    currently?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    contractTypeId?: SortOrder
    cdId?: SortOrder
  }

  export type ExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    location?: SortOrder
    currently?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    contractTypeId?: SortOrder
    cdId?: SortOrder
  }

  export type EnumLanguageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelFilter<$PrismaModel> | $Enums.LanguageLevel
  }

  export type LanguagesOrderByRelevanceInput = {
    fields: LanguagesOrderByRelevanceFieldEnum | LanguagesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LanguagesCountOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type LanguagesMaxOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type LanguagesMinOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    level?: SortOrder
    cdId?: SortOrder
  }

  export type EnumLanguageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel> | $Enums.LanguageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageLevelFilter<$PrismaModel>
    _max?: NestedEnumLanguageLevelFilter<$PrismaModel>
  }

  export type CoursesOrderByRelevanceInput = {
    fields: CoursesOrderByRelevanceFieldEnum | CoursesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CoursesCountOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    institution?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    cdId?: SortOrder
  }

  export type CoursesMaxOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    institution?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    cdId?: SortOrder
  }

  export type CoursesMinOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    institution?: SortOrder
    grade?: SortOrder
    startdate?: SortOrder
    enddate?: SortOrder
    cdId?: SortOrder
  }

  export type HobbiesOrderByRelevanceInput = {
    fields: HobbiesOrderByRelevanceFieldEnum | HobbiesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type HobbiesCountOrderByAggregateInput = {
    id?: SortOrder
    hobbie?: SortOrder
    cdId?: SortOrder
  }

  export type HobbiesMaxOrderByAggregateInput = {
    id?: SortOrder
    hobbie?: SortOrder
    cdId?: SortOrder
  }

  export type HobbiesMinOrderByAggregateInput = {
    id?: SortOrder
    hobbie?: SortOrder
    cdId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RatingOrderByRelevanceInput = {
    fields: RatingOrderByRelevanceFieldEnum | RatingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RatingUserIdReviewerIdCompoundUniqueInput = {
    userId: string
    reviewerId: string
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BranchListRelationFilter = {
    every?: BranchWhereInput
    some?: BranchWhereInput
    none?: BranchWhereInput
  }

  export type JobOffersListRelationFilter = {
    every?: jobOffersWhereInput
    some?: jobOffersWhereInput
    none?: jobOffersWhereInput
  }

  export type BranchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type jobOffersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgencyDataOrderByRelevanceInput = {
    fields: AgencyDataOrderByRelevanceFieldEnum | AgencyDataOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgencyDataCountOrderByAggregateInput = {
    id?: SortOrder
    agency_name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    p_iva_c_f?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    about?: SortOrder
    logo?: SortOrder
  }

  export type AgencyDataMaxOrderByAggregateInput = {
    id?: SortOrder
    agency_name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    p_iva_c_f?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    about?: SortOrder
  }

  export type AgencyDataMinOrderByAggregateInput = {
    id?: SortOrder
    agency_name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    p_iva_c_f?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    about?: SortOrder
  }

  export type AgencyDataScalarRelationFilter = {
    is?: AgencyDataWhereInput
    isNot?: AgencyDataWhereInput
  }

  export type BranchOrderByRelevanceInput = {
    fields: BranchOrderByRelevanceFieldEnum | BranchOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    fax?: SortOrder
    address?: SortOrder
    location?: SortOrder
    region?: SortOrder
    logo?: SortOrder
    about_branch?: SortOrder
    adId?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    fax?: SortOrder
    address?: SortOrder
    location?: SortOrder
    region?: SortOrder
    logo?: SortOrder
    about_branch?: SortOrder
    adId?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    fax?: SortOrder
    address?: SortOrder
    location?: SortOrder
    region?: SortOrder
    logo?: SortOrder
    about_branch?: SortOrder
    adId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BranchNullableScalarRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ExperienceMinimalJobNullableScalarRelationFilter = {
    is?: ExperienceMinimalJobWhereInput | null
    isNot?: ExperienceMinimalJobWhereInput | null
  }

  export type ModeJobNullableScalarRelationFilter = {
    is?: ModeJobWhereInput | null
    isNot?: ModeJobWhereInput | null
  }

  export type WorkingTimeJobNullableScalarRelationFilter = {
    is?: WorkingTimeJobWhereInput | null
    isNot?: WorkingTimeJobWhereInput | null
  }

  export type SectorsListRelationFilter = {
    every?: SectorsWhereInput
    some?: SectorsWhereInput
    none?: SectorsWhereInput
  }

  export type JobTagsListRelationFilter = {
    every?: jobTagsWhereInput
    some?: jobTagsWhereInput
    none?: jobTagsWhereInput
  }

  export type SectorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type jobTagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type jobOffersOrderByRelevanceInput = {
    fields: jobOffersOrderByRelevanceFieldEnum | jobOffersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type jobOffersCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    region?: SortOrder
    province?: SortOrder
    location?: SortOrder
    reallyUpTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isValidate?: SortOrder
    views?: SortOrder
    categoryId?: SortOrder
    contratId?: SortOrder
    experienceId?: SortOrder
    modeId?: SortOrder
    workingTimeId?: SortOrder
    levelId?: SortOrder
    agencyId?: SortOrder
    branchId?: SortOrder
  }

  export type jobOffersAvgOrderByAggregateInput = {
    views?: SortOrder
  }

  export type jobOffersMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    region?: SortOrder
    province?: SortOrder
    location?: SortOrder
    reallyUpTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isValidate?: SortOrder
    views?: SortOrder
    categoryId?: SortOrder
    contratId?: SortOrder
    experienceId?: SortOrder
    modeId?: SortOrder
    workingTimeId?: SortOrder
    levelId?: SortOrder
    agencyId?: SortOrder
    branchId?: SortOrder
  }

  export type jobOffersMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    region?: SortOrder
    province?: SortOrder
    location?: SortOrder
    reallyUpTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isValidate?: SortOrder
    views?: SortOrder
    categoryId?: SortOrder
    contratId?: SortOrder
    experienceId?: SortOrder
    modeId?: SortOrder
    workingTimeId?: SortOrder
    levelId?: SortOrder
    agencyId?: SortOrder
    branchId?: SortOrder
  }

  export type jobOffersSumOrderByAggregateInput = {
    views?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type JobOffersScalarRelationFilter = {
    is?: jobOffersWhereInput
    isNot?: jobOffersWhereInput
  }

  export type SavedJobsOrderByRelevanceInput = {
    fields: SavedJobsOrderByRelevanceFieldEnum | SavedJobsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SavedJobsCandidateIdJobOfferIdCompoundUniqueInput = {
    candidateId: string
    jobOfferId: string
  }

  export type SavedJobsCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedJobsMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedJobsMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type SendCandidatureOrderByRelevanceInput = {
    fields: SendCandidatureOrderByRelevanceFieldEnum | SendCandidatureOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SendCandidatureCandidateIdJobOfferIdCompoundUniqueInput = {
    candidateId: string
    jobOfferId: string
  }

  export type SendCandidatureCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type SendCandidatureMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type SendCandidatureMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    jobOfferId?: SortOrder
    savedAt?: SortOrder
  }

  export type ContractTypeJobOrderByRelevanceInput = {
    fields: ContractTypeJobOrderByRelevanceFieldEnum | ContractTypeJobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContractTypeJobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ContractTypeJobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ContractTypeJobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ExperienceMinimalJobOrderByRelevanceInput = {
    fields: ExperienceMinimalJobOrderByRelevanceFieldEnum | ExperienceMinimalJobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ExperienceMinimalJobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ExperienceMinimalJobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ExperienceMinimalJobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ModeJobOrderByRelevanceInput = {
    fields: ModeJobOrderByRelevanceFieldEnum | ModeJobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ModeJobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ModeJobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ModeJobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WorkingTimeJobOrderByRelevanceInput = {
    fields: WorkingTimeJobOrderByRelevanceFieldEnum | WorkingTimeJobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkingTimeJobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WorkingTimeJobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WorkingTimeJobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelEducationOrderByRelevanceInput = {
    fields: LevelEducationOrderByRelevanceFieldEnum | LevelEducationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LevelEducationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelEducationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelEducationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type jobTagsOrderByRelevanceInput = {
    fields: jobTagsOrderByRelevanceFieldEnum | jobTagsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type jobTagsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type jobTagsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type jobTagsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    level?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    level?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    level?: SortOrder
    parentId?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SectorsOrderByRelevanceInput = {
    fields: SectorsOrderByRelevanceFieldEnum | SectorsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SectorsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
  }

  export type SectorsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
  }

  export type SectorsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    categoryId?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuthAccountOrderByRelevanceInput = {
    fields: AuthAccountOrderByRelevanceFieldEnum | AuthAccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuthAccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provide?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AuthAccountAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type AuthAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provide?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AuthAccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provide?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AuthAccountSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type TokensOrderByRelevanceInput = {
    fields: TokensOrderByRelevanceFieldEnum | TokensOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TokensCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokensMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokensMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type AgencyDataCreateNestedOneWithoutUserInput = {
    create?: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutUserInput
    connect?: AgencyDataWhereUniqueInput
  }

  export type UserSocialCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput> | UserSocialCreateWithoutUserInput[] | UserSocialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialCreateOrConnectWithoutUserInput | UserSocialCreateOrConnectWithoutUserInput[]
    createMany?: UserSocialCreateManyUserInputEnvelope
    connect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
  }

  export type AuthAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput> | AuthAccountCreateWithoutUserInput[] | AuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthAccountCreateOrConnectWithoutUserInput | AuthAccountCreateOrConnectWithoutUserInput[]
    createMany?: AuthAccountCreateManyUserInputEnvelope
    connect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
  }

  export type CandidatDataCreateNestedOneWithoutUserInput = {
    create?: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutUserInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutReviewerInput = {
    create?: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput> | RatingCreateWithoutReviewerInput[] | RatingUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReviewerInput | RatingCreateOrConnectWithoutReviewerInput[]
    createMany?: RatingCreateManyReviewerInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type AgencyDataUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutUserInput
    connect?: AgencyDataWhereUniqueInput
  }

  export type UserSocialUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput> | UserSocialCreateWithoutUserInput[] | UserSocialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialCreateOrConnectWithoutUserInput | UserSocialCreateOrConnectWithoutUserInput[]
    createMany?: UserSocialCreateManyUserInputEnvelope
    connect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
  }

  export type AuthAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput> | AuthAccountCreateWithoutUserInput[] | AuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthAccountCreateOrConnectWithoutUserInput | AuthAccountCreateOrConnectWithoutUserInput[]
    createMany?: AuthAccountCreateManyUserInputEnvelope
    connect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
  }

  export type CandidatDataUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutUserInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput> | RatingCreateWithoutReviewerInput[] | RatingUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReviewerInput | RatingCreateOrConnectWithoutReviewerInput[]
    createMany?: RatingCreateManyReviewerInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumAuthMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthMethod
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AgencyDataUpdateOneWithoutUserNestedInput = {
    create?: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutUserInput
    upsert?: AgencyDataUpsertWithoutUserInput
    disconnect?: AgencyDataWhereInput | boolean
    delete?: AgencyDataWhereInput | boolean
    connect?: AgencyDataWhereUniqueInput
    update?: XOR<XOR<AgencyDataUpdateToOneWithWhereWithoutUserInput, AgencyDataUpdateWithoutUserInput>, AgencyDataUncheckedUpdateWithoutUserInput>
  }

  export type UserSocialUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput> | UserSocialCreateWithoutUserInput[] | UserSocialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialCreateOrConnectWithoutUserInput | UserSocialCreateOrConnectWithoutUserInput[]
    upsert?: UserSocialUpsertWithWhereUniqueWithoutUserInput | UserSocialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSocialCreateManyUserInputEnvelope
    set?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    disconnect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    delete?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    connect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    update?: UserSocialUpdateWithWhereUniqueWithoutUserInput | UserSocialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSocialUpdateManyWithWhereWithoutUserInput | UserSocialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSocialScalarWhereInput | UserSocialScalarWhereInput[]
  }

  export type AuthAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput> | AuthAccountCreateWithoutUserInput[] | AuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthAccountCreateOrConnectWithoutUserInput | AuthAccountCreateOrConnectWithoutUserInput[]
    upsert?: AuthAccountUpsertWithWhereUniqueWithoutUserInput | AuthAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthAccountCreateManyUserInputEnvelope
    set?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    disconnect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    delete?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    connect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    update?: AuthAccountUpdateWithWhereUniqueWithoutUserInput | AuthAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthAccountUpdateManyWithWhereWithoutUserInput | AuthAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthAccountScalarWhereInput | AuthAccountScalarWhereInput[]
  }

  export type CandidatDataUpdateOneWithoutUserNestedInput = {
    create?: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutUserInput
    upsert?: CandidatDataUpsertWithoutUserInput
    disconnect?: CandidatDataWhereInput | boolean
    delete?: CandidatDataWhereInput | boolean
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutUserInput, CandidatDataUpdateWithoutUserInput>, CandidatDataUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput> | RatingCreateWithoutReviewerInput[] | RatingUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReviewerInput | RatingCreateOrConnectWithoutReviewerInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutReviewerInput | RatingUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: RatingCreateManyReviewerInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutReviewerInput | RatingUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutReviewerInput | RatingUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type AgencyDataUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutUserInput
    upsert?: AgencyDataUpsertWithoutUserInput
    disconnect?: AgencyDataWhereInput | boolean
    delete?: AgencyDataWhereInput | boolean
    connect?: AgencyDataWhereUniqueInput
    update?: XOR<XOR<AgencyDataUpdateToOneWithWhereWithoutUserInput, AgencyDataUpdateWithoutUserInput>, AgencyDataUncheckedUpdateWithoutUserInput>
  }

  export type UserSocialUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput> | UserSocialCreateWithoutUserInput[] | UserSocialUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialCreateOrConnectWithoutUserInput | UserSocialCreateOrConnectWithoutUserInput[]
    upsert?: UserSocialUpsertWithWhereUniqueWithoutUserInput | UserSocialUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSocialCreateManyUserInputEnvelope
    set?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    disconnect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    delete?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    connect?: UserSocialWhereUniqueInput | UserSocialWhereUniqueInput[]
    update?: UserSocialUpdateWithWhereUniqueWithoutUserInput | UserSocialUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSocialUpdateManyWithWhereWithoutUserInput | UserSocialUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSocialScalarWhereInput | UserSocialScalarWhereInput[]
  }

  export type AuthAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput> | AuthAccountCreateWithoutUserInput[] | AuthAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthAccountCreateOrConnectWithoutUserInput | AuthAccountCreateOrConnectWithoutUserInput[]
    upsert?: AuthAccountUpsertWithWhereUniqueWithoutUserInput | AuthAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthAccountCreateManyUserInputEnvelope
    set?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    disconnect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    delete?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    connect?: AuthAccountWhereUniqueInput | AuthAccountWhereUniqueInput[]
    update?: AuthAccountUpdateWithWhereUniqueWithoutUserInput | AuthAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthAccountUpdateManyWithWhereWithoutUserInput | AuthAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthAccountScalarWhereInput | AuthAccountScalarWhereInput[]
  }

  export type CandidatDataUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutUserInput
    upsert?: CandidatDataUpsertWithoutUserInput
    disconnect?: CandidatDataWhereInput | boolean
    delete?: CandidatDataWhereInput | boolean
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutUserInput, CandidatDataUpdateWithoutUserInput>, CandidatDataUncheckedUpdateWithoutUserInput>
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput> | RatingCreateWithoutReviewerInput[] | RatingUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutReviewerInput | RatingCreateOrConnectWithoutReviewerInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutReviewerInput | RatingUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: RatingCreateManyReviewerInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutReviewerInput | RatingUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutReviewerInput | RatingUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type CandidatDataCreateavatarInput = {
    set: string[]
  }

  export type CoursesCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput> | CoursesCreateWithoutCandidateInput[] | CoursesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutCandidateInput | CoursesCreateOrConnectWithoutCandidateInput[]
    createMany?: CoursesCreateManyCandidateInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type EducationCreateNestedManyWithoutCandidateInput = {
    create?: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput> | EducationCreateWithoutCandidateInput[] | EducationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCandidateInput | EducationCreateOrConnectWithoutCandidateInput[]
    createMany?: EducationCreateManyCandidateInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ExperienceCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput> | ExperienceCreateWithoutCandidateInput[] | ExperienceUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCandidateInput | ExperienceCreateOrConnectWithoutCandidateInput[]
    createMany?: ExperienceCreateManyCandidateInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type HobbiesCreateNestedManyWithoutCandidateInput = {
    create?: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput> | HobbiesCreateWithoutCandidateInput[] | HobbiesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: HobbiesCreateOrConnectWithoutCandidateInput | HobbiesCreateOrConnectWithoutCandidateInput[]
    createMany?: HobbiesCreateManyCandidateInputEnvelope
    connect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
  }

  export type LanguagesCreateNestedManyWithoutCandidateInput = {
    create?: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput> | LanguagesCreateWithoutCandidateInput[] | LanguagesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutCandidateInput | LanguagesCreateOrConnectWithoutCandidateInput[]
    createMany?: LanguagesCreateManyCandidateInputEnvelope
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
  }

  export type SkillsCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput> | SkillsCreateWithoutCandidateInput[] | SkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidateInput | SkillsCreateOrConnectWithoutCandidateInput[]
    createMany?: SkillsCreateManyCandidateInputEnvelope
    connect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
  }

  export type SavedJobsCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput> | SavedJobsCreateWithoutCandidateInput[] | SavedJobsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutCandidateInput | SavedJobsCreateOrConnectWithoutCandidateInput[]
    createMany?: SavedJobsCreateManyCandidateInputEnvelope
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
  }

  export type SendCandidatureCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput> | SendCandidatureCreateWithoutCandidateInput[] | SendCandidatureUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutCandidateInput | SendCandidatureCreateOrConnectWithoutCandidateInput[]
    createMany?: SendCandidatureCreateManyCandidateInputEnvelope
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCandidatdataInput = {
    create?: XOR<UserCreateWithoutCandidatdataInput, UserUncheckedCreateWithoutCandidatdataInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatdataInput
    connect?: UserWhereUniqueInput
  }

  export type CandidatLifeStateCreateNestedOneWithoutCandidateInput = {
    create?: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: CandidatLifeStateCreateOrConnectWithoutCandidateInput
    connect?: CandidatLifeStateWhereUniqueInput
  }

  export type CoursesUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput> | CoursesCreateWithoutCandidateInput[] | CoursesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutCandidateInput | CoursesCreateOrConnectWithoutCandidateInput[]
    createMany?: CoursesCreateManyCandidateInputEnvelope
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput> | EducationCreateWithoutCandidateInput[] | EducationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCandidateInput | EducationCreateOrConnectWithoutCandidateInput[]
    createMany?: EducationCreateManyCandidateInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput> | ExperienceCreateWithoutCandidateInput[] | ExperienceUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCandidateInput | ExperienceCreateOrConnectWithoutCandidateInput[]
    createMany?: ExperienceCreateManyCandidateInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type HobbiesUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput> | HobbiesCreateWithoutCandidateInput[] | HobbiesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: HobbiesCreateOrConnectWithoutCandidateInput | HobbiesCreateOrConnectWithoutCandidateInput[]
    createMany?: HobbiesCreateManyCandidateInputEnvelope
    connect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
  }

  export type LanguagesUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput> | LanguagesCreateWithoutCandidateInput[] | LanguagesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutCandidateInput | LanguagesCreateOrConnectWithoutCandidateInput[]
    createMany?: LanguagesCreateManyCandidateInputEnvelope
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
  }

  export type SkillsUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput> | SkillsCreateWithoutCandidateInput[] | SkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidateInput | SkillsCreateOrConnectWithoutCandidateInput[]
    createMany?: SkillsCreateManyCandidateInputEnvelope
    connect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
  }

  export type SavedJobsUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput> | SavedJobsCreateWithoutCandidateInput[] | SavedJobsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutCandidateInput | SavedJobsCreateOrConnectWithoutCandidateInput[]
    createMany?: SavedJobsCreateManyCandidateInputEnvelope
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
  }

  export type SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput> | SendCandidatureCreateWithoutCandidateInput[] | SendCandidatureUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutCandidateInput | SendCandidatureCreateOrConnectWithoutCandidateInput[]
    createMany?: SendCandidatureCreateManyCandidateInputEnvelope
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
  }

  export type CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput = {
    create?: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: CandidatLifeStateCreateOrConnectWithoutCandidateInput
    connect?: CandidatLifeStateWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CandidatDataUpdateavatarInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CoursesUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput> | CoursesCreateWithoutCandidateInput[] | CoursesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutCandidateInput | CoursesCreateOrConnectWithoutCandidateInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutCandidateInput | CoursesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CoursesCreateManyCandidateInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutCandidateInput | CoursesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutCandidateInput | CoursesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type EducationUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput> | EducationCreateWithoutCandidateInput[] | EducationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCandidateInput | EducationCreateOrConnectWithoutCandidateInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutCandidateInput | EducationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: EducationCreateManyCandidateInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutCandidateInput | EducationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutCandidateInput | EducationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ExperienceUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput> | ExperienceCreateWithoutCandidateInput[] | ExperienceUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCandidateInput | ExperienceCreateOrConnectWithoutCandidateInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCandidateInput | ExperienceUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ExperienceCreateManyCandidateInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCandidateInput | ExperienceUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCandidateInput | ExperienceUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type HobbiesUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput> | HobbiesCreateWithoutCandidateInput[] | HobbiesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: HobbiesCreateOrConnectWithoutCandidateInput | HobbiesCreateOrConnectWithoutCandidateInput[]
    upsert?: HobbiesUpsertWithWhereUniqueWithoutCandidateInput | HobbiesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: HobbiesCreateManyCandidateInputEnvelope
    set?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    disconnect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    delete?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    connect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    update?: HobbiesUpdateWithWhereUniqueWithoutCandidateInput | HobbiesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: HobbiesUpdateManyWithWhereWithoutCandidateInput | HobbiesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: HobbiesScalarWhereInput | HobbiesScalarWhereInput[]
  }

  export type LanguagesUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput> | LanguagesCreateWithoutCandidateInput[] | LanguagesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutCandidateInput | LanguagesCreateOrConnectWithoutCandidateInput[]
    upsert?: LanguagesUpsertWithWhereUniqueWithoutCandidateInput | LanguagesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: LanguagesCreateManyCandidateInputEnvelope
    set?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    disconnect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    delete?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    update?: LanguagesUpdateWithWhereUniqueWithoutCandidateInput | LanguagesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: LanguagesUpdateManyWithWhereWithoutCandidateInput | LanguagesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
  }

  export type SkillsUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput> | SkillsCreateWithoutCandidateInput[] | SkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidateInput | SkillsCreateOrConnectWithoutCandidateInput[]
    upsert?: SkillsUpsertWithWhereUniqueWithoutCandidateInput | SkillsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SkillsCreateManyCandidateInputEnvelope
    set?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    disconnect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    delete?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    connect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    update?: SkillsUpdateWithWhereUniqueWithoutCandidateInput | SkillsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SkillsUpdateManyWithWhereWithoutCandidateInput | SkillsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SkillsScalarWhereInput | SkillsScalarWhereInput[]
  }

  export type SavedJobsUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput> | SavedJobsCreateWithoutCandidateInput[] | SavedJobsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutCandidateInput | SavedJobsCreateOrConnectWithoutCandidateInput[]
    upsert?: SavedJobsUpsertWithWhereUniqueWithoutCandidateInput | SavedJobsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SavedJobsCreateManyCandidateInputEnvelope
    set?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    disconnect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    delete?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    update?: SavedJobsUpdateWithWhereUniqueWithoutCandidateInput | SavedJobsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SavedJobsUpdateManyWithWhereWithoutCandidateInput | SavedJobsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
  }

  export type SendCandidatureUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput> | SendCandidatureCreateWithoutCandidateInput[] | SendCandidatureUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutCandidateInput | SendCandidatureCreateOrConnectWithoutCandidateInput[]
    upsert?: SendCandidatureUpsertWithWhereUniqueWithoutCandidateInput | SendCandidatureUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SendCandidatureCreateManyCandidateInputEnvelope
    set?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    disconnect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    delete?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    update?: SendCandidatureUpdateWithWhereUniqueWithoutCandidateInput | SendCandidatureUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SendCandidatureUpdateManyWithWhereWithoutCandidateInput | SendCandidatureUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCandidatdataNestedInput = {
    create?: XOR<UserCreateWithoutCandidatdataInput, UserUncheckedCreateWithoutCandidatdataInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatdataInput
    upsert?: UserUpsertWithoutCandidatdataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCandidatdataInput, UserUpdateWithoutCandidatdataInput>, UserUncheckedUpdateWithoutCandidatdataInput>
  }

  export type CandidatLifeStateUpdateOneWithoutCandidateNestedInput = {
    create?: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: CandidatLifeStateCreateOrConnectWithoutCandidateInput
    upsert?: CandidatLifeStateUpsertWithoutCandidateInput
    disconnect?: CandidatLifeStateWhereInput | boolean
    delete?: CandidatLifeStateWhereInput | boolean
    connect?: CandidatLifeStateWhereUniqueInput
    update?: XOR<XOR<CandidatLifeStateUpdateToOneWithWhereWithoutCandidateInput, CandidatLifeStateUpdateWithoutCandidateInput>, CandidatLifeStateUncheckedUpdateWithoutCandidateInput>
  }

  export type CoursesUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput> | CoursesCreateWithoutCandidateInput[] | CoursesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CoursesCreateOrConnectWithoutCandidateInput | CoursesCreateOrConnectWithoutCandidateInput[]
    upsert?: CoursesUpsertWithWhereUniqueWithoutCandidateInput | CoursesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CoursesCreateManyCandidateInputEnvelope
    set?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    disconnect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    delete?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    connect?: CoursesWhereUniqueInput | CoursesWhereUniqueInput[]
    update?: CoursesUpdateWithWhereUniqueWithoutCandidateInput | CoursesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CoursesUpdateManyWithWhereWithoutCandidateInput | CoursesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput> | EducationCreateWithoutCandidateInput[] | EducationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCandidateInput | EducationCreateOrConnectWithoutCandidateInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutCandidateInput | EducationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: EducationCreateManyCandidateInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutCandidateInput | EducationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutCandidateInput | EducationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput> | ExperienceCreateWithoutCandidateInput[] | ExperienceUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCandidateInput | ExperienceCreateOrConnectWithoutCandidateInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCandidateInput | ExperienceUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ExperienceCreateManyCandidateInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCandidateInput | ExperienceUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCandidateInput | ExperienceUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type HobbiesUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput> | HobbiesCreateWithoutCandidateInput[] | HobbiesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: HobbiesCreateOrConnectWithoutCandidateInput | HobbiesCreateOrConnectWithoutCandidateInput[]
    upsert?: HobbiesUpsertWithWhereUniqueWithoutCandidateInput | HobbiesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: HobbiesCreateManyCandidateInputEnvelope
    set?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    disconnect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    delete?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    connect?: HobbiesWhereUniqueInput | HobbiesWhereUniqueInput[]
    update?: HobbiesUpdateWithWhereUniqueWithoutCandidateInput | HobbiesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: HobbiesUpdateManyWithWhereWithoutCandidateInput | HobbiesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: HobbiesScalarWhereInput | HobbiesScalarWhereInput[]
  }

  export type LanguagesUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput> | LanguagesCreateWithoutCandidateInput[] | LanguagesUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutCandidateInput | LanguagesCreateOrConnectWithoutCandidateInput[]
    upsert?: LanguagesUpsertWithWhereUniqueWithoutCandidateInput | LanguagesUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: LanguagesCreateManyCandidateInputEnvelope
    set?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    disconnect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    delete?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    update?: LanguagesUpdateWithWhereUniqueWithoutCandidateInput | LanguagesUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: LanguagesUpdateManyWithWhereWithoutCandidateInput | LanguagesUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
  }

  export type SkillsUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput> | SkillsCreateWithoutCandidateInput[] | SkillsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SkillsCreateOrConnectWithoutCandidateInput | SkillsCreateOrConnectWithoutCandidateInput[]
    upsert?: SkillsUpsertWithWhereUniqueWithoutCandidateInput | SkillsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SkillsCreateManyCandidateInputEnvelope
    set?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    disconnect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    delete?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    connect?: SkillsWhereUniqueInput | SkillsWhereUniqueInput[]
    update?: SkillsUpdateWithWhereUniqueWithoutCandidateInput | SkillsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SkillsUpdateManyWithWhereWithoutCandidateInput | SkillsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SkillsScalarWhereInput | SkillsScalarWhereInput[]
  }

  export type SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput> | SavedJobsCreateWithoutCandidateInput[] | SavedJobsUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutCandidateInput | SavedJobsCreateOrConnectWithoutCandidateInput[]
    upsert?: SavedJobsUpsertWithWhereUniqueWithoutCandidateInput | SavedJobsUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SavedJobsCreateManyCandidateInputEnvelope
    set?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    disconnect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    delete?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    update?: SavedJobsUpdateWithWhereUniqueWithoutCandidateInput | SavedJobsUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SavedJobsUpdateManyWithWhereWithoutCandidateInput | SavedJobsUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
  }

  export type SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput> | SendCandidatureCreateWithoutCandidateInput[] | SendCandidatureUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutCandidateInput | SendCandidatureCreateOrConnectWithoutCandidateInput[]
    upsert?: SendCandidatureUpsertWithWhereUniqueWithoutCandidateInput | SendCandidatureUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: SendCandidatureCreateManyCandidateInputEnvelope
    set?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    disconnect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    delete?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    update?: SendCandidatureUpdateWithWhereUniqueWithoutCandidateInput | SendCandidatureUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: SendCandidatureUpdateManyWithWhereWithoutCandidateInput | SendCandidatureUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
  }

  export type CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput = {
    create?: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: CandidatLifeStateCreateOrConnectWithoutCandidateInput
    upsert?: CandidatLifeStateUpsertWithoutCandidateInput
    disconnect?: CandidatLifeStateWhereInput | boolean
    delete?: CandidatLifeStateWhereInput | boolean
    connect?: CandidatLifeStateWhereUniqueInput
    update?: XOR<XOR<CandidatLifeStateUpdateToOneWithWhereWithoutCandidateInput, CandidatLifeStateUpdateWithoutCandidateInput>, CandidatLifeStateUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidatDataCreateNestedOneWithoutCandidatLifeStateInput = {
    create?: XOR<CandidatDataCreateWithoutCandidatLifeStateInput, CandidatDataUncheckedCreateWithoutCandidatLifeStateInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutCandidatLifeStateInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type EnumMaritalStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaritalStatus
  }

  export type CandidatDataUpdateOneRequiredWithoutCandidatLifeStateNestedInput = {
    create?: XOR<CandidatDataCreateWithoutCandidatLifeStateInput, CandidatDataUncheckedCreateWithoutCandidatLifeStateInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutCandidatLifeStateInput
    upsert?: CandidatDataUpsertWithoutCandidatLifeStateInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutCandidatLifeStateInput, CandidatDataUpdateWithoutCandidatLifeStateInput>, CandidatDataUncheckedUpdateWithoutCandidatLifeStateInput>
  }

  export type UserCreateNestedOneWithoutSocialInput = {
    create?: XOR<UserCreateWithoutSocialInput, UserUncheckedCreateWithoutSocialInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSocialNestedInput = {
    create?: XOR<UserCreateWithoutSocialInput, UserUncheckedCreateWithoutSocialInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialInput
    upsert?: UserUpsertWithoutSocialInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSocialInput, UserUpdateWithoutSocialInput>, UserUncheckedUpdateWithoutSocialInput>
  }

  export type LevelEducationCreateNestedOneWithoutEducationInput = {
    create?: XOR<LevelEducationCreateWithoutEducationInput, LevelEducationUncheckedCreateWithoutEducationInput>
    connectOrCreate?: LevelEducationCreateOrConnectWithoutEducationInput
    connect?: LevelEducationWhereUniqueInput
  }

  export type CandidatDataCreateNestedOneWithoutEducationInput = {
    create?: XOR<CandidatDataCreateWithoutEducationInput, CandidatDataUncheckedCreateWithoutEducationInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutEducationInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type LevelEducationUpdateOneWithoutEducationNestedInput = {
    create?: XOR<LevelEducationCreateWithoutEducationInput, LevelEducationUncheckedCreateWithoutEducationInput>
    connectOrCreate?: LevelEducationCreateOrConnectWithoutEducationInput
    upsert?: LevelEducationUpsertWithoutEducationInput
    disconnect?: LevelEducationWhereInput | boolean
    delete?: LevelEducationWhereInput | boolean
    connect?: LevelEducationWhereUniqueInput
    update?: XOR<XOR<LevelEducationUpdateToOneWithWhereWithoutEducationInput, LevelEducationUpdateWithoutEducationInput>, LevelEducationUncheckedUpdateWithoutEducationInput>
  }

  export type CandidatDataUpdateOneRequiredWithoutEducationNestedInput = {
    create?: XOR<CandidatDataCreateWithoutEducationInput, CandidatDataUncheckedCreateWithoutEducationInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutEducationInput
    upsert?: CandidatDataUpsertWithoutEducationInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutEducationInput, CandidatDataUpdateWithoutEducationInput>, CandidatDataUncheckedUpdateWithoutEducationInput>
  }

  export type CandidatDataCreateNestedOneWithoutSkillsInput = {
    create?: XOR<CandidatDataCreateWithoutSkillsInput, CandidatDataUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSkillsInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type EnumSkillsLevelFieldUpdateOperationsInput = {
    set?: $Enums.SkillsLevel
  }

  export type CandidatDataUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<CandidatDataCreateWithoutSkillsInput, CandidatDataUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSkillsInput
    upsert?: CandidatDataUpsertWithoutSkillsInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutSkillsInput, CandidatDataUpdateWithoutSkillsInput>, CandidatDataUncheckedUpdateWithoutSkillsInput>
  }

  export type ContractTypeJobCreateNestedOneWithoutExperienceInput = {
    create?: XOR<ContractTypeJobCreateWithoutExperienceInput, ContractTypeJobUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: ContractTypeJobCreateOrConnectWithoutExperienceInput
    connect?: ContractTypeJobWhereUniqueInput
  }

  export type CandidatDataCreateNestedOneWithoutExperienceInput = {
    create?: XOR<CandidatDataCreateWithoutExperienceInput, CandidatDataUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutExperienceInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type ContractTypeJobUpdateOneWithoutExperienceNestedInput = {
    create?: XOR<ContractTypeJobCreateWithoutExperienceInput, ContractTypeJobUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: ContractTypeJobCreateOrConnectWithoutExperienceInput
    upsert?: ContractTypeJobUpsertWithoutExperienceInput
    disconnect?: ContractTypeJobWhereInput | boolean
    delete?: ContractTypeJobWhereInput | boolean
    connect?: ContractTypeJobWhereUniqueInput
    update?: XOR<XOR<ContractTypeJobUpdateToOneWithWhereWithoutExperienceInput, ContractTypeJobUpdateWithoutExperienceInput>, ContractTypeJobUncheckedUpdateWithoutExperienceInput>
  }

  export type CandidatDataUpdateOneRequiredWithoutExperienceNestedInput = {
    create?: XOR<CandidatDataCreateWithoutExperienceInput, CandidatDataUncheckedCreateWithoutExperienceInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutExperienceInput
    upsert?: CandidatDataUpsertWithoutExperienceInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutExperienceInput, CandidatDataUpdateWithoutExperienceInput>, CandidatDataUncheckedUpdateWithoutExperienceInput>
  }

  export type CandidatDataCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<CandidatDataCreateWithoutLanguagesInput, CandidatDataUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutLanguagesInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type EnumLanguageLevelFieldUpdateOperationsInput = {
    set?: $Enums.LanguageLevel
  }

  export type CandidatDataUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<CandidatDataCreateWithoutLanguagesInput, CandidatDataUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutLanguagesInput
    upsert?: CandidatDataUpsertWithoutLanguagesInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutLanguagesInput, CandidatDataUpdateWithoutLanguagesInput>, CandidatDataUncheckedUpdateWithoutLanguagesInput>
  }

  export type CandidatDataCreateNestedOneWithoutCoursesInput = {
    create?: XOR<CandidatDataCreateWithoutCoursesInput, CandidatDataUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutCoursesInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type CandidatDataUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<CandidatDataCreateWithoutCoursesInput, CandidatDataUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutCoursesInput
    upsert?: CandidatDataUpsertWithoutCoursesInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutCoursesInput, CandidatDataUpdateWithoutCoursesInput>, CandidatDataUncheckedUpdateWithoutCoursesInput>
  }

  export type CandidatDataCreateNestedOneWithoutHobbiesInput = {
    create?: XOR<CandidatDataCreateWithoutHobbiesInput, CandidatDataUncheckedCreateWithoutHobbiesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutHobbiesInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type CandidatDataUpdateOneRequiredWithoutHobbiesNestedInput = {
    create?: XOR<CandidatDataCreateWithoutHobbiesInput, CandidatDataUncheckedCreateWithoutHobbiesInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutHobbiesInput
    upsert?: CandidatDataUpsertWithoutHobbiesInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutHobbiesInput, CandidatDataUpdateWithoutHobbiesInput>, CandidatDataUncheckedUpdateWithoutHobbiesInput>
  }

  export type UserCreateNestedOneWithoutRatingsInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    upsert?: UserUpsertWithoutRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingsInput, UserUpdateWithoutRatingsInput>, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type AgencyDataCreatelogoInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutAgencydataInput = {
    create?: XOR<UserCreateWithoutAgencydataInput, UserUncheckedCreateWithoutAgencydataInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgencydataInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedManyWithoutAgencyInput = {
    create?: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput> | BranchCreateWithoutAgencyInput[] | BranchUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutAgencyInput | BranchCreateOrConnectWithoutAgencyInput[]
    createMany?: BranchCreateManyAgencyInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type jobOffersCreateNestedManyWithoutAgencyInput = {
    create?: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput> | jobOffersCreateWithoutAgencyInput[] | jobOffersUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutAgencyInput | jobOffersCreateOrConnectWithoutAgencyInput[]
    createMany?: jobOffersCreateManyAgencyInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput> | BranchCreateWithoutAgencyInput[] | BranchUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutAgencyInput | BranchCreateOrConnectWithoutAgencyInput[]
    createMany?: BranchCreateManyAgencyInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput> | jobOffersCreateWithoutAgencyInput[] | jobOffersUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutAgencyInput | jobOffersCreateOrConnectWithoutAgencyInput[]
    createMany?: jobOffersCreateManyAgencyInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type AgencyDataUpdatelogoInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutAgencydataNestedInput = {
    create?: XOR<UserCreateWithoutAgencydataInput, UserUncheckedCreateWithoutAgencydataInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgencydataInput
    upsert?: UserUpsertWithoutAgencydataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAgencydataInput, UserUpdateWithoutAgencydataInput>, UserUncheckedUpdateWithoutAgencydataInput>
  }

  export type BranchUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput> | BranchCreateWithoutAgencyInput[] | BranchUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutAgencyInput | BranchCreateOrConnectWithoutAgencyInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutAgencyInput | BranchUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: BranchCreateManyAgencyInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutAgencyInput | BranchUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutAgencyInput | BranchUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type jobOffersUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput> | jobOffersCreateWithoutAgencyInput[] | jobOffersUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutAgencyInput | jobOffersCreateOrConnectWithoutAgencyInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutAgencyInput | jobOffersUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: jobOffersCreateManyAgencyInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutAgencyInput | jobOffersUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutAgencyInput | jobOffersUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type BranchUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput> | BranchCreateWithoutAgencyInput[] | BranchUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutAgencyInput | BranchCreateOrConnectWithoutAgencyInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutAgencyInput | BranchUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: BranchCreateManyAgencyInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutAgencyInput | BranchUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutAgencyInput | BranchUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput> | jobOffersCreateWithoutAgencyInput[] | jobOffersUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutAgencyInput | jobOffersCreateOrConnectWithoutAgencyInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutAgencyInput | jobOffersUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: jobOffersCreateManyAgencyInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutAgencyInput | jobOffersUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutAgencyInput | jobOffersUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type AgencyDataCreateNestedOneWithoutBranchInput = {
    create?: XOR<AgencyDataCreateWithoutBranchInput, AgencyDataUncheckedCreateWithoutBranchInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutBranchInput
    connect?: AgencyDataWhereUniqueInput
  }

  export type jobOffersCreateNestedManyWithoutBranchInput = {
    create?: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput> | jobOffersCreateWithoutBranchInput[] | jobOffersUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutBranchInput | jobOffersCreateOrConnectWithoutBranchInput[]
    createMany?: jobOffersCreateManyBranchInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput> | jobOffersCreateWithoutBranchInput[] | jobOffersUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutBranchInput | jobOffersCreateOrConnectWithoutBranchInput[]
    createMany?: jobOffersCreateManyBranchInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type AgencyDataUpdateOneRequiredWithoutBranchNestedInput = {
    create?: XOR<AgencyDataCreateWithoutBranchInput, AgencyDataUncheckedCreateWithoutBranchInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutBranchInput
    upsert?: AgencyDataUpsertWithoutBranchInput
    connect?: AgencyDataWhereUniqueInput
    update?: XOR<XOR<AgencyDataUpdateToOneWithWhereWithoutBranchInput, AgencyDataUpdateWithoutBranchInput>, AgencyDataUncheckedUpdateWithoutBranchInput>
  }

  export type jobOffersUpdateManyWithoutBranchNestedInput = {
    create?: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput> | jobOffersCreateWithoutBranchInput[] | jobOffersUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutBranchInput | jobOffersCreateOrConnectWithoutBranchInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutBranchInput | jobOffersUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: jobOffersCreateManyBranchInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutBranchInput | jobOffersUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutBranchInput | jobOffersUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput> | jobOffersCreateWithoutBranchInput[] | jobOffersUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutBranchInput | jobOffersCreateOrConnectWithoutBranchInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutBranchInput | jobOffersUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: jobOffersCreateManyBranchInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutBranchInput | jobOffersUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutBranchInput | jobOffersUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type AgencyDataCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<AgencyDataCreateWithoutJobOffersInput, AgencyDataUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutJobOffersInput
    connect?: AgencyDataWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<BranchCreateWithoutJobOffersInput, BranchUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutJobOffersInput
    connect?: BranchWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<CategoryCreateWithoutJobOffersInput, CategoryUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutJobOffersInput
    connect?: CategoryWhereUniqueInput
  }

  export type ContractTypeJobCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<ContractTypeJobCreateWithoutJobOffersInput, ContractTypeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ContractTypeJobCreateOrConnectWithoutJobOffersInput
    connect?: ContractTypeJobWhereUniqueInput
  }

  export type ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<ExperienceMinimalJobCreateWithoutJobOffersInput, ExperienceMinimalJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ExperienceMinimalJobCreateOrConnectWithoutJobOffersInput
    connect?: ExperienceMinimalJobWhereUniqueInput
  }

  export type LevelEducationCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<LevelEducationCreateWithoutJobOffersInput, LevelEducationUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: LevelEducationCreateOrConnectWithoutJobOffersInput
    connect?: LevelEducationWhereUniqueInput
  }

  export type ModeJobCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<ModeJobCreateWithoutJobOffersInput, ModeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ModeJobCreateOrConnectWithoutJobOffersInput
    connect?: ModeJobWhereUniqueInput
  }

  export type WorkingTimeJobCreateNestedOneWithoutJobOffersInput = {
    create?: XOR<WorkingTimeJobCreateWithoutJobOffersInput, WorkingTimeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: WorkingTimeJobCreateOrConnectWithoutJobOffersInput
    connect?: WorkingTimeJobWhereUniqueInput
  }

  export type SectorsCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput> | SectorsCreateWithoutJobOfferInput[] | SectorsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutJobOfferInput | SectorsCreateOrConnectWithoutJobOfferInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
  }

  export type jobTagsCreateNestedManyWithoutJobOffersInput = {
    create?: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput> | jobTagsCreateWithoutJobOffersInput[] | jobTagsUncheckedCreateWithoutJobOffersInput[]
    connectOrCreate?: jobTagsCreateOrConnectWithoutJobOffersInput | jobTagsCreateOrConnectWithoutJobOffersInput[]
    connect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
  }

  export type SavedJobsCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput> | SavedJobsCreateWithoutJobOfferInput[] | SavedJobsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutJobOfferInput | SavedJobsCreateOrConnectWithoutJobOfferInput[]
    createMany?: SavedJobsCreateManyJobOfferInputEnvelope
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
  }

  export type SendCandidatureCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput> | SendCandidatureCreateWithoutJobOfferInput[] | SendCandidatureUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutJobOfferInput | SendCandidatureCreateOrConnectWithoutJobOfferInput[]
    createMany?: SendCandidatureCreateManyJobOfferInputEnvelope
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
  }

  export type SectorsUncheckedCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput> | SectorsCreateWithoutJobOfferInput[] | SectorsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutJobOfferInput | SectorsCreateOrConnectWithoutJobOfferInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
  }

  export type jobTagsUncheckedCreateNestedManyWithoutJobOffersInput = {
    create?: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput> | jobTagsCreateWithoutJobOffersInput[] | jobTagsUncheckedCreateWithoutJobOffersInput[]
    connectOrCreate?: jobTagsCreateOrConnectWithoutJobOffersInput | jobTagsCreateOrConnectWithoutJobOffersInput[]
    connect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
  }

  export type SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput> | SavedJobsCreateWithoutJobOfferInput[] | SavedJobsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutJobOfferInput | SavedJobsCreateOrConnectWithoutJobOfferInput[]
    createMany?: SavedJobsCreateManyJobOfferInputEnvelope
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
  }

  export type SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput = {
    create?: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput> | SendCandidatureCreateWithoutJobOfferInput[] | SendCandidatureUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutJobOfferInput | SendCandidatureCreateOrConnectWithoutJobOfferInput[]
    createMany?: SendCandidatureCreateManyJobOfferInputEnvelope
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput = {
    create?: XOR<AgencyDataCreateWithoutJobOffersInput, AgencyDataUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: AgencyDataCreateOrConnectWithoutJobOffersInput
    upsert?: AgencyDataUpsertWithoutJobOffersInput
    connect?: AgencyDataWhereUniqueInput
    update?: XOR<XOR<AgencyDataUpdateToOneWithWhereWithoutJobOffersInput, AgencyDataUpdateWithoutJobOffersInput>, AgencyDataUncheckedUpdateWithoutJobOffersInput>
  }

  export type BranchUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<BranchCreateWithoutJobOffersInput, BranchUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutJobOffersInput
    upsert?: BranchUpsertWithoutJobOffersInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutJobOffersInput, BranchUpdateWithoutJobOffersInput>, BranchUncheckedUpdateWithoutJobOffersInput>
  }

  export type CategoryUpdateOneRequiredWithoutJobOffersNestedInput = {
    create?: XOR<CategoryCreateWithoutJobOffersInput, CategoryUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutJobOffersInput
    upsert?: CategoryUpsertWithoutJobOffersInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutJobOffersInput, CategoryUpdateWithoutJobOffersInput>, CategoryUncheckedUpdateWithoutJobOffersInput>
  }

  export type ContractTypeJobUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<ContractTypeJobCreateWithoutJobOffersInput, ContractTypeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ContractTypeJobCreateOrConnectWithoutJobOffersInput
    upsert?: ContractTypeJobUpsertWithoutJobOffersInput
    disconnect?: ContractTypeJobWhereInput | boolean
    delete?: ContractTypeJobWhereInput | boolean
    connect?: ContractTypeJobWhereUniqueInput
    update?: XOR<XOR<ContractTypeJobUpdateToOneWithWhereWithoutJobOffersInput, ContractTypeJobUpdateWithoutJobOffersInput>, ContractTypeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<ExperienceMinimalJobCreateWithoutJobOffersInput, ExperienceMinimalJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ExperienceMinimalJobCreateOrConnectWithoutJobOffersInput
    upsert?: ExperienceMinimalJobUpsertWithoutJobOffersInput
    disconnect?: ExperienceMinimalJobWhereInput | boolean
    delete?: ExperienceMinimalJobWhereInput | boolean
    connect?: ExperienceMinimalJobWhereUniqueInput
    update?: XOR<XOR<ExperienceMinimalJobUpdateToOneWithWhereWithoutJobOffersInput, ExperienceMinimalJobUpdateWithoutJobOffersInput>, ExperienceMinimalJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type LevelEducationUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<LevelEducationCreateWithoutJobOffersInput, LevelEducationUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: LevelEducationCreateOrConnectWithoutJobOffersInput
    upsert?: LevelEducationUpsertWithoutJobOffersInput
    disconnect?: LevelEducationWhereInput | boolean
    delete?: LevelEducationWhereInput | boolean
    connect?: LevelEducationWhereUniqueInput
    update?: XOR<XOR<LevelEducationUpdateToOneWithWhereWithoutJobOffersInput, LevelEducationUpdateWithoutJobOffersInput>, LevelEducationUncheckedUpdateWithoutJobOffersInput>
  }

  export type ModeJobUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<ModeJobCreateWithoutJobOffersInput, ModeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: ModeJobCreateOrConnectWithoutJobOffersInput
    upsert?: ModeJobUpsertWithoutJobOffersInput
    disconnect?: ModeJobWhereInput | boolean
    delete?: ModeJobWhereInput | boolean
    connect?: ModeJobWhereUniqueInput
    update?: XOR<XOR<ModeJobUpdateToOneWithWhereWithoutJobOffersInput, ModeJobUpdateWithoutJobOffersInput>, ModeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type WorkingTimeJobUpdateOneWithoutJobOffersNestedInput = {
    create?: XOR<WorkingTimeJobCreateWithoutJobOffersInput, WorkingTimeJobUncheckedCreateWithoutJobOffersInput>
    connectOrCreate?: WorkingTimeJobCreateOrConnectWithoutJobOffersInput
    upsert?: WorkingTimeJobUpsertWithoutJobOffersInput
    disconnect?: WorkingTimeJobWhereInput | boolean
    delete?: WorkingTimeJobWhereInput | boolean
    connect?: WorkingTimeJobWhereUniqueInput
    update?: XOR<XOR<WorkingTimeJobUpdateToOneWithWhereWithoutJobOffersInput, WorkingTimeJobUpdateWithoutJobOffersInput>, WorkingTimeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type SectorsUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput> | SectorsCreateWithoutJobOfferInput[] | SectorsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutJobOfferInput | SectorsCreateOrConnectWithoutJobOfferInput[]
    upsert?: SectorsUpsertWithWhereUniqueWithoutJobOfferInput | SectorsUpsertWithWhereUniqueWithoutJobOfferInput[]
    set?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    disconnect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    delete?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    update?: SectorsUpdateWithWhereUniqueWithoutJobOfferInput | SectorsUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SectorsUpdateManyWithWhereWithoutJobOfferInput | SectorsUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
  }

  export type jobTagsUpdateManyWithoutJobOffersNestedInput = {
    create?: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput> | jobTagsCreateWithoutJobOffersInput[] | jobTagsUncheckedCreateWithoutJobOffersInput[]
    connectOrCreate?: jobTagsCreateOrConnectWithoutJobOffersInput | jobTagsCreateOrConnectWithoutJobOffersInput[]
    upsert?: jobTagsUpsertWithWhereUniqueWithoutJobOffersInput | jobTagsUpsertWithWhereUniqueWithoutJobOffersInput[]
    set?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    disconnect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    delete?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    connect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    update?: jobTagsUpdateWithWhereUniqueWithoutJobOffersInput | jobTagsUpdateWithWhereUniqueWithoutJobOffersInput[]
    updateMany?: jobTagsUpdateManyWithWhereWithoutJobOffersInput | jobTagsUpdateManyWithWhereWithoutJobOffersInput[]
    deleteMany?: jobTagsScalarWhereInput | jobTagsScalarWhereInput[]
  }

  export type SavedJobsUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput> | SavedJobsCreateWithoutJobOfferInput[] | SavedJobsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutJobOfferInput | SavedJobsCreateOrConnectWithoutJobOfferInput[]
    upsert?: SavedJobsUpsertWithWhereUniqueWithoutJobOfferInput | SavedJobsUpsertWithWhereUniqueWithoutJobOfferInput[]
    createMany?: SavedJobsCreateManyJobOfferInputEnvelope
    set?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    disconnect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    delete?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    update?: SavedJobsUpdateWithWhereUniqueWithoutJobOfferInput | SavedJobsUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SavedJobsUpdateManyWithWhereWithoutJobOfferInput | SavedJobsUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
  }

  export type SendCandidatureUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput> | SendCandidatureCreateWithoutJobOfferInput[] | SendCandidatureUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutJobOfferInput | SendCandidatureCreateOrConnectWithoutJobOfferInput[]
    upsert?: SendCandidatureUpsertWithWhereUniqueWithoutJobOfferInput | SendCandidatureUpsertWithWhereUniqueWithoutJobOfferInput[]
    createMany?: SendCandidatureCreateManyJobOfferInputEnvelope
    set?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    disconnect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    delete?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    update?: SendCandidatureUpdateWithWhereUniqueWithoutJobOfferInput | SendCandidatureUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SendCandidatureUpdateManyWithWhereWithoutJobOfferInput | SendCandidatureUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
  }

  export type SectorsUncheckedUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput> | SectorsCreateWithoutJobOfferInput[] | SectorsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutJobOfferInput | SectorsCreateOrConnectWithoutJobOfferInput[]
    upsert?: SectorsUpsertWithWhereUniqueWithoutJobOfferInput | SectorsUpsertWithWhereUniqueWithoutJobOfferInput[]
    set?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    disconnect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    delete?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    update?: SectorsUpdateWithWhereUniqueWithoutJobOfferInput | SectorsUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SectorsUpdateManyWithWhereWithoutJobOfferInput | SectorsUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
  }

  export type jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput = {
    create?: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput> | jobTagsCreateWithoutJobOffersInput[] | jobTagsUncheckedCreateWithoutJobOffersInput[]
    connectOrCreate?: jobTagsCreateOrConnectWithoutJobOffersInput | jobTagsCreateOrConnectWithoutJobOffersInput[]
    upsert?: jobTagsUpsertWithWhereUniqueWithoutJobOffersInput | jobTagsUpsertWithWhereUniqueWithoutJobOffersInput[]
    set?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    disconnect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    delete?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    connect?: jobTagsWhereUniqueInput | jobTagsWhereUniqueInput[]
    update?: jobTagsUpdateWithWhereUniqueWithoutJobOffersInput | jobTagsUpdateWithWhereUniqueWithoutJobOffersInput[]
    updateMany?: jobTagsUpdateManyWithWhereWithoutJobOffersInput | jobTagsUpdateManyWithWhereWithoutJobOffersInput[]
    deleteMany?: jobTagsScalarWhereInput | jobTagsScalarWhereInput[]
  }

  export type SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput> | SavedJobsCreateWithoutJobOfferInput[] | SavedJobsUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SavedJobsCreateOrConnectWithoutJobOfferInput | SavedJobsCreateOrConnectWithoutJobOfferInput[]
    upsert?: SavedJobsUpsertWithWhereUniqueWithoutJobOfferInput | SavedJobsUpsertWithWhereUniqueWithoutJobOfferInput[]
    createMany?: SavedJobsCreateManyJobOfferInputEnvelope
    set?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    disconnect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    delete?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    connect?: SavedJobsWhereUniqueInput | SavedJobsWhereUniqueInput[]
    update?: SavedJobsUpdateWithWhereUniqueWithoutJobOfferInput | SavedJobsUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SavedJobsUpdateManyWithWhereWithoutJobOfferInput | SavedJobsUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
  }

  export type SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput = {
    create?: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput> | SendCandidatureCreateWithoutJobOfferInput[] | SendCandidatureUncheckedCreateWithoutJobOfferInput[]
    connectOrCreate?: SendCandidatureCreateOrConnectWithoutJobOfferInput | SendCandidatureCreateOrConnectWithoutJobOfferInput[]
    upsert?: SendCandidatureUpsertWithWhereUniqueWithoutJobOfferInput | SendCandidatureUpsertWithWhereUniqueWithoutJobOfferInput[]
    createMany?: SendCandidatureCreateManyJobOfferInputEnvelope
    set?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    disconnect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    delete?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    connect?: SendCandidatureWhereUniqueInput | SendCandidatureWhereUniqueInput[]
    update?: SendCandidatureUpdateWithWhereUniqueWithoutJobOfferInput | SendCandidatureUpdateWithWhereUniqueWithoutJobOfferInput[]
    updateMany?: SendCandidatureUpdateManyWithWhereWithoutJobOfferInput | SendCandidatureUpdateManyWithWhereWithoutJobOfferInput[]
    deleteMany?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
  }

  export type CandidatDataCreateNestedOneWithoutSavedJobsInput = {
    create?: XOR<CandidatDataCreateWithoutSavedJobsInput, CandidatDataUncheckedCreateWithoutSavedJobsInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSavedJobsInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type jobOffersCreateNestedOneWithoutSavedByInput = {
    create?: XOR<jobOffersCreateWithoutSavedByInput, jobOffersUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: jobOffersCreateOrConnectWithoutSavedByInput
    connect?: jobOffersWhereUniqueInput
  }

  export type CandidatDataUpdateOneRequiredWithoutSavedJobsNestedInput = {
    create?: XOR<CandidatDataCreateWithoutSavedJobsInput, CandidatDataUncheckedCreateWithoutSavedJobsInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSavedJobsInput
    upsert?: CandidatDataUpsertWithoutSavedJobsInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutSavedJobsInput, CandidatDataUpdateWithoutSavedJobsInput>, CandidatDataUncheckedUpdateWithoutSavedJobsInput>
  }

  export type jobOffersUpdateOneRequiredWithoutSavedByNestedInput = {
    create?: XOR<jobOffersCreateWithoutSavedByInput, jobOffersUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: jobOffersCreateOrConnectWithoutSavedByInput
    upsert?: jobOffersUpsertWithoutSavedByInput
    connect?: jobOffersWhereUniqueInput
    update?: XOR<XOR<jobOffersUpdateToOneWithWhereWithoutSavedByInput, jobOffersUpdateWithoutSavedByInput>, jobOffersUncheckedUpdateWithoutSavedByInput>
  }

  export type CandidatDataCreateNestedOneWithoutSendCandidatureInput = {
    create?: XOR<CandidatDataCreateWithoutSendCandidatureInput, CandidatDataUncheckedCreateWithoutSendCandidatureInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSendCandidatureInput
    connect?: CandidatDataWhereUniqueInput
  }

  export type jobOffersCreateNestedOneWithoutSendCandidatureInput = {
    create?: XOR<jobOffersCreateWithoutSendCandidatureInput, jobOffersUncheckedCreateWithoutSendCandidatureInput>
    connectOrCreate?: jobOffersCreateOrConnectWithoutSendCandidatureInput
    connect?: jobOffersWhereUniqueInput
  }

  export type CandidatDataUpdateOneRequiredWithoutSendCandidatureNestedInput = {
    create?: XOR<CandidatDataCreateWithoutSendCandidatureInput, CandidatDataUncheckedCreateWithoutSendCandidatureInput>
    connectOrCreate?: CandidatDataCreateOrConnectWithoutSendCandidatureInput
    upsert?: CandidatDataUpsertWithoutSendCandidatureInput
    connect?: CandidatDataWhereUniqueInput
    update?: XOR<XOR<CandidatDataUpdateToOneWithWhereWithoutSendCandidatureInput, CandidatDataUpdateWithoutSendCandidatureInput>, CandidatDataUncheckedUpdateWithoutSendCandidatureInput>
  }

  export type jobOffersUpdateOneRequiredWithoutSendCandidatureNestedInput = {
    create?: XOR<jobOffersCreateWithoutSendCandidatureInput, jobOffersUncheckedCreateWithoutSendCandidatureInput>
    connectOrCreate?: jobOffersCreateOrConnectWithoutSendCandidatureInput
    upsert?: jobOffersUpsertWithoutSendCandidatureInput
    connect?: jobOffersWhereUniqueInput
    update?: XOR<XOR<jobOffersUpdateToOneWithWhereWithoutSendCandidatureInput, jobOffersUpdateWithoutSendCandidatureInput>, jobOffersUncheckedUpdateWithoutSendCandidatureInput>
  }

  export type ExperienceCreateNestedManyWithoutContractTypeJobInput = {
    create?: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput> | ExperienceCreateWithoutContractTypeJobInput[] | ExperienceUncheckedCreateWithoutContractTypeJobInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutContractTypeJobInput | ExperienceCreateOrConnectWithoutContractTypeJobInput[]
    createMany?: ExperienceCreateManyContractTypeJobInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type jobOffersCreateNestedManyWithoutContractTypeInput = {
    create?: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput> | jobOffersCreateWithoutContractTypeInput[] | jobOffersUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutContractTypeInput | jobOffersCreateOrConnectWithoutContractTypeInput[]
    createMany?: jobOffersCreateManyContractTypeInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutContractTypeJobInput = {
    create?: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput> | ExperienceCreateWithoutContractTypeJobInput[] | ExperienceUncheckedCreateWithoutContractTypeJobInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutContractTypeJobInput | ExperienceCreateOrConnectWithoutContractTypeJobInput[]
    createMany?: ExperienceCreateManyContractTypeJobInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutContractTypeInput = {
    create?: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput> | jobOffersCreateWithoutContractTypeInput[] | jobOffersUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutContractTypeInput | jobOffersCreateOrConnectWithoutContractTypeInput[]
    createMany?: jobOffersCreateManyContractTypeInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type ExperienceUpdateManyWithoutContractTypeJobNestedInput = {
    create?: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput> | ExperienceCreateWithoutContractTypeJobInput[] | ExperienceUncheckedCreateWithoutContractTypeJobInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutContractTypeJobInput | ExperienceCreateOrConnectWithoutContractTypeJobInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutContractTypeJobInput | ExperienceUpsertWithWhereUniqueWithoutContractTypeJobInput[]
    createMany?: ExperienceCreateManyContractTypeJobInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutContractTypeJobInput | ExperienceUpdateWithWhereUniqueWithoutContractTypeJobInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutContractTypeJobInput | ExperienceUpdateManyWithWhereWithoutContractTypeJobInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type jobOffersUpdateManyWithoutContractTypeNestedInput = {
    create?: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput> | jobOffersCreateWithoutContractTypeInput[] | jobOffersUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutContractTypeInput | jobOffersCreateOrConnectWithoutContractTypeInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutContractTypeInput | jobOffersUpsertWithWhereUniqueWithoutContractTypeInput[]
    createMany?: jobOffersCreateManyContractTypeInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutContractTypeInput | jobOffersUpdateWithWhereUniqueWithoutContractTypeInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutContractTypeInput | jobOffersUpdateManyWithWhereWithoutContractTypeInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutContractTypeJobNestedInput = {
    create?: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput> | ExperienceCreateWithoutContractTypeJobInput[] | ExperienceUncheckedCreateWithoutContractTypeJobInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutContractTypeJobInput | ExperienceCreateOrConnectWithoutContractTypeJobInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutContractTypeJobInput | ExperienceUpsertWithWhereUniqueWithoutContractTypeJobInput[]
    createMany?: ExperienceCreateManyContractTypeJobInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutContractTypeJobInput | ExperienceUpdateWithWhereUniqueWithoutContractTypeJobInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutContractTypeJobInput | ExperienceUpdateManyWithWhereWithoutContractTypeJobInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutContractTypeNestedInput = {
    create?: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput> | jobOffersCreateWithoutContractTypeInput[] | jobOffersUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutContractTypeInput | jobOffersCreateOrConnectWithoutContractTypeInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutContractTypeInput | jobOffersUpsertWithWhereUniqueWithoutContractTypeInput[]
    createMany?: jobOffersCreateManyContractTypeInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutContractTypeInput | jobOffersUpdateWithWhereUniqueWithoutContractTypeInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutContractTypeInput | jobOffersUpdateManyWithWhereWithoutContractTypeInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersCreateNestedManyWithoutExperienceMinimalJobInput = {
    create?: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput> | jobOffersCreateWithoutExperienceMinimalJobInput[] | jobOffersUncheckedCreateWithoutExperienceMinimalJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutExperienceMinimalJobInput | jobOffersCreateOrConnectWithoutExperienceMinimalJobInput[]
    createMany?: jobOffersCreateManyExperienceMinimalJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutExperienceMinimalJobInput = {
    create?: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput> | jobOffersCreateWithoutExperienceMinimalJobInput[] | jobOffersUncheckedCreateWithoutExperienceMinimalJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutExperienceMinimalJobInput | jobOffersCreateOrConnectWithoutExperienceMinimalJobInput[]
    createMany?: jobOffersCreateManyExperienceMinimalJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUpdateManyWithoutExperienceMinimalJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput> | jobOffersCreateWithoutExperienceMinimalJobInput[] | jobOffersUncheckedCreateWithoutExperienceMinimalJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutExperienceMinimalJobInput | jobOffersCreateOrConnectWithoutExperienceMinimalJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutExperienceMinimalJobInput | jobOffersUpsertWithWhereUniqueWithoutExperienceMinimalJobInput[]
    createMany?: jobOffersCreateManyExperienceMinimalJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutExperienceMinimalJobInput | jobOffersUpdateWithWhereUniqueWithoutExperienceMinimalJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutExperienceMinimalJobInput | jobOffersUpdateManyWithWhereWithoutExperienceMinimalJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutExperienceMinimalJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput> | jobOffersCreateWithoutExperienceMinimalJobInput[] | jobOffersUncheckedCreateWithoutExperienceMinimalJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutExperienceMinimalJobInput | jobOffersCreateOrConnectWithoutExperienceMinimalJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutExperienceMinimalJobInput | jobOffersUpsertWithWhereUniqueWithoutExperienceMinimalJobInput[]
    createMany?: jobOffersCreateManyExperienceMinimalJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutExperienceMinimalJobInput | jobOffersUpdateWithWhereUniqueWithoutExperienceMinimalJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutExperienceMinimalJobInput | jobOffersUpdateManyWithWhereWithoutExperienceMinimalJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersCreateNestedManyWithoutModeJobInput = {
    create?: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput> | jobOffersCreateWithoutModeJobInput[] | jobOffersUncheckedCreateWithoutModeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutModeJobInput | jobOffersCreateOrConnectWithoutModeJobInput[]
    createMany?: jobOffersCreateManyModeJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutModeJobInput = {
    create?: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput> | jobOffersCreateWithoutModeJobInput[] | jobOffersUncheckedCreateWithoutModeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutModeJobInput | jobOffersCreateOrConnectWithoutModeJobInput[]
    createMany?: jobOffersCreateManyModeJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUpdateManyWithoutModeJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput> | jobOffersCreateWithoutModeJobInput[] | jobOffersUncheckedCreateWithoutModeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutModeJobInput | jobOffersCreateOrConnectWithoutModeJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutModeJobInput | jobOffersUpsertWithWhereUniqueWithoutModeJobInput[]
    createMany?: jobOffersCreateManyModeJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutModeJobInput | jobOffersUpdateWithWhereUniqueWithoutModeJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutModeJobInput | jobOffersUpdateManyWithWhereWithoutModeJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutModeJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput> | jobOffersCreateWithoutModeJobInput[] | jobOffersUncheckedCreateWithoutModeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutModeJobInput | jobOffersCreateOrConnectWithoutModeJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutModeJobInput | jobOffersUpsertWithWhereUniqueWithoutModeJobInput[]
    createMany?: jobOffersCreateManyModeJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutModeJobInput | jobOffersUpdateWithWhereUniqueWithoutModeJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutModeJobInput | jobOffersUpdateManyWithWhereWithoutModeJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersCreateNestedManyWithoutWorkingTimeJobInput = {
    create?: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput> | jobOffersCreateWithoutWorkingTimeJobInput[] | jobOffersUncheckedCreateWithoutWorkingTimeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutWorkingTimeJobInput | jobOffersCreateOrConnectWithoutWorkingTimeJobInput[]
    createMany?: jobOffersCreateManyWorkingTimeJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutWorkingTimeJobInput = {
    create?: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput> | jobOffersCreateWithoutWorkingTimeJobInput[] | jobOffersUncheckedCreateWithoutWorkingTimeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutWorkingTimeJobInput | jobOffersCreateOrConnectWithoutWorkingTimeJobInput[]
    createMany?: jobOffersCreateManyWorkingTimeJobInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUpdateManyWithoutWorkingTimeJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput> | jobOffersCreateWithoutWorkingTimeJobInput[] | jobOffersUncheckedCreateWithoutWorkingTimeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutWorkingTimeJobInput | jobOffersCreateOrConnectWithoutWorkingTimeJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutWorkingTimeJobInput | jobOffersUpsertWithWhereUniqueWithoutWorkingTimeJobInput[]
    createMany?: jobOffersCreateManyWorkingTimeJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutWorkingTimeJobInput | jobOffersUpdateWithWhereUniqueWithoutWorkingTimeJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutWorkingTimeJobInput | jobOffersUpdateManyWithWhereWithoutWorkingTimeJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutWorkingTimeJobNestedInput = {
    create?: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput> | jobOffersCreateWithoutWorkingTimeJobInput[] | jobOffersUncheckedCreateWithoutWorkingTimeJobInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutWorkingTimeJobInput | jobOffersCreateOrConnectWithoutWorkingTimeJobInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutWorkingTimeJobInput | jobOffersUpsertWithWhereUniqueWithoutWorkingTimeJobInput[]
    createMany?: jobOffersCreateManyWorkingTimeJobInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutWorkingTimeJobInput | jobOffersUpdateWithWhereUniqueWithoutWorkingTimeJobInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutWorkingTimeJobInput | jobOffersUpdateManyWithWhereWithoutWorkingTimeJobInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type EducationCreateNestedManyWithoutLevelEducationInput = {
    create?: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput> | EducationCreateWithoutLevelEducationInput[] | EducationUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutLevelEducationInput | EducationCreateOrConnectWithoutLevelEducationInput[]
    createMany?: EducationCreateManyLevelEducationInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type jobOffersCreateNestedManyWithoutLevelEducationInput = {
    create?: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput> | jobOffersCreateWithoutLevelEducationInput[] | jobOffersUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutLevelEducationInput | jobOffersCreateOrConnectWithoutLevelEducationInput[]
    createMany?: jobOffersCreateManyLevelEducationInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutLevelEducationInput = {
    create?: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput> | EducationCreateWithoutLevelEducationInput[] | EducationUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutLevelEducationInput | EducationCreateOrConnectWithoutLevelEducationInput[]
    createMany?: EducationCreateManyLevelEducationInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutLevelEducationInput = {
    create?: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput> | jobOffersCreateWithoutLevelEducationInput[] | jobOffersUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutLevelEducationInput | jobOffersCreateOrConnectWithoutLevelEducationInput[]
    createMany?: jobOffersCreateManyLevelEducationInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type EducationUpdateManyWithoutLevelEducationNestedInput = {
    create?: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput> | EducationCreateWithoutLevelEducationInput[] | EducationUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutLevelEducationInput | EducationCreateOrConnectWithoutLevelEducationInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutLevelEducationInput | EducationUpsertWithWhereUniqueWithoutLevelEducationInput[]
    createMany?: EducationCreateManyLevelEducationInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutLevelEducationInput | EducationUpdateWithWhereUniqueWithoutLevelEducationInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutLevelEducationInput | EducationUpdateManyWithWhereWithoutLevelEducationInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type jobOffersUpdateManyWithoutLevelEducationNestedInput = {
    create?: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput> | jobOffersCreateWithoutLevelEducationInput[] | jobOffersUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutLevelEducationInput | jobOffersCreateOrConnectWithoutLevelEducationInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutLevelEducationInput | jobOffersUpsertWithWhereUniqueWithoutLevelEducationInput[]
    createMany?: jobOffersCreateManyLevelEducationInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutLevelEducationInput | jobOffersUpdateWithWhereUniqueWithoutLevelEducationInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutLevelEducationInput | jobOffersUpdateManyWithWhereWithoutLevelEducationInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutLevelEducationNestedInput = {
    create?: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput> | EducationCreateWithoutLevelEducationInput[] | EducationUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutLevelEducationInput | EducationCreateOrConnectWithoutLevelEducationInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutLevelEducationInput | EducationUpsertWithWhereUniqueWithoutLevelEducationInput[]
    createMany?: EducationCreateManyLevelEducationInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutLevelEducationInput | EducationUpdateWithWhereUniqueWithoutLevelEducationInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutLevelEducationInput | EducationUpdateManyWithWhereWithoutLevelEducationInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutLevelEducationNestedInput = {
    create?: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput> | jobOffersCreateWithoutLevelEducationInput[] | jobOffersUncheckedCreateWithoutLevelEducationInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutLevelEducationInput | jobOffersCreateOrConnectWithoutLevelEducationInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutLevelEducationInput | jobOffersUpsertWithWhereUniqueWithoutLevelEducationInput[]
    createMany?: jobOffersCreateManyLevelEducationInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutLevelEducationInput | jobOffersUpdateWithWhereUniqueWithoutLevelEducationInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutLevelEducationInput | jobOffersUpdateManyWithWhereWithoutLevelEducationInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersCreateNestedManyWithoutTagsInput = {
    create?: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput> | jobOffersCreateWithoutTagsInput[] | jobOffersUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutTagsInput | jobOffersCreateOrConnectWithoutTagsInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput> | jobOffersCreateWithoutTagsInput[] | jobOffersUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutTagsInput | jobOffersCreateOrConnectWithoutTagsInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUpdateManyWithoutTagsNestedInput = {
    create?: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput> | jobOffersCreateWithoutTagsInput[] | jobOffersUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutTagsInput | jobOffersCreateOrConnectWithoutTagsInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutTagsInput | jobOffersUpsertWithWhereUniqueWithoutTagsInput[]
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutTagsInput | jobOffersUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutTagsInput | jobOffersUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput> | jobOffersCreateWithoutTagsInput[] | jobOffersUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutTagsInput | jobOffersCreateOrConnectWithoutTagsInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutTagsInput | jobOffersUpsertWithWhereUniqueWithoutTagsInput[]
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutTagsInput | jobOffersUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutTagsInput | jobOffersUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type SectorsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput> | SectorsCreateWithoutCategoryInput[] | SectorsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutCategoryInput | SectorsCreateOrConnectWithoutCategoryInput[]
    createMany?: SectorsCreateManyCategoryInputEnvelope
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type jobOffersCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput> | jobOffersCreateWithoutCategoriesInput[] | jobOffersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutCategoriesInput | jobOffersCreateOrConnectWithoutCategoriesInput[]
    createMany?: jobOffersCreateManyCategoriesInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type SectorsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput> | SectorsCreateWithoutCategoryInput[] | SectorsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutCategoryInput | SectorsCreateOrConnectWithoutCategoryInput[]
    createMany?: SectorsCreateManyCategoryInputEnvelope
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput> | jobOffersCreateWithoutCategoriesInput[] | jobOffersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutCategoriesInput | jobOffersCreateOrConnectWithoutCategoriesInput[]
    createMany?: jobOffersCreateManyCategoriesInputEnvelope
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SectorsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput> | SectorsCreateWithoutCategoryInput[] | SectorsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutCategoryInput | SectorsCreateOrConnectWithoutCategoryInput[]
    upsert?: SectorsUpsertWithWhereUniqueWithoutCategoryInput | SectorsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SectorsCreateManyCategoryInputEnvelope
    set?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    disconnect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    delete?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    update?: SectorsUpdateWithWhereUniqueWithoutCategoryInput | SectorsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SectorsUpdateManyWithWhereWithoutCategoryInput | SectorsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type jobOffersUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput> | jobOffersCreateWithoutCategoriesInput[] | jobOffersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutCategoriesInput | jobOffersCreateOrConnectWithoutCategoriesInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutCategoriesInput | jobOffersUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: jobOffersCreateManyCategoriesInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutCategoriesInput | jobOffersUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutCategoriesInput | jobOffersUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type SectorsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput> | SectorsCreateWithoutCategoryInput[] | SectorsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SectorsCreateOrConnectWithoutCategoryInput | SectorsCreateOrConnectWithoutCategoryInput[]
    upsert?: SectorsUpsertWithWhereUniqueWithoutCategoryInput | SectorsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SectorsCreateManyCategoryInputEnvelope
    set?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    disconnect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    delete?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    connect?: SectorsWhereUniqueInput | SectorsWhereUniqueInput[]
    update?: SectorsUpdateWithWhereUniqueWithoutCategoryInput | SectorsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SectorsUpdateManyWithWhereWithoutCategoryInput | SectorsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput> | jobOffersCreateWithoutCategoriesInput[] | jobOffersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutCategoriesInput | jobOffersCreateOrConnectWithoutCategoriesInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutCategoriesInput | jobOffersUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: jobOffersCreateManyCategoriesInputEnvelope
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutCategoriesInput | jobOffersUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutCategoriesInput | jobOffersUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutSectorsInput = {
    create?: XOR<CategoryCreateWithoutSectorsInput, CategoryUncheckedCreateWithoutSectorsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSectorsInput
    connect?: CategoryWhereUniqueInput
  }

  export type jobOffersCreateNestedManyWithoutSectorsInput = {
    create?: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput> | jobOffersCreateWithoutSectorsInput[] | jobOffersUncheckedCreateWithoutSectorsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutSectorsInput | jobOffersCreateOrConnectWithoutSectorsInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type jobOffersUncheckedCreateNestedManyWithoutSectorsInput = {
    create?: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput> | jobOffersCreateWithoutSectorsInput[] | jobOffersUncheckedCreateWithoutSectorsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutSectorsInput | jobOffersCreateOrConnectWithoutSectorsInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutSectorsNestedInput = {
    create?: XOR<CategoryCreateWithoutSectorsInput, CategoryUncheckedCreateWithoutSectorsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSectorsInput
    upsert?: CategoryUpsertWithoutSectorsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSectorsInput, CategoryUpdateWithoutSectorsInput>, CategoryUncheckedUpdateWithoutSectorsInput>
  }

  export type jobOffersUpdateManyWithoutSectorsNestedInput = {
    create?: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput> | jobOffersCreateWithoutSectorsInput[] | jobOffersUncheckedCreateWithoutSectorsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutSectorsInput | jobOffersCreateOrConnectWithoutSectorsInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutSectorsInput | jobOffersUpsertWithWhereUniqueWithoutSectorsInput[]
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutSectorsInput | jobOffersUpdateWithWhereUniqueWithoutSectorsInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutSectorsInput | jobOffersUpdateManyWithWhereWithoutSectorsInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type jobOffersUncheckedUpdateManyWithoutSectorsNestedInput = {
    create?: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput> | jobOffersCreateWithoutSectorsInput[] | jobOffersUncheckedCreateWithoutSectorsInput[]
    connectOrCreate?: jobOffersCreateOrConnectWithoutSectorsInput | jobOffersCreateOrConnectWithoutSectorsInput[]
    upsert?: jobOffersUpsertWithWhereUniqueWithoutSectorsInput | jobOffersUpsertWithWhereUniqueWithoutSectorsInput[]
    set?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    disconnect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    delete?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    connect?: jobOffersWhereUniqueInput | jobOffersWhereUniqueInput[]
    update?: jobOffersUpdateWithWhereUniqueWithoutSectorsInput | jobOffersUpdateWithWhereUniqueWithoutSectorsInput[]
    updateMany?: jobOffersUpdateManyWithWhereWithoutSectorsInput | jobOffersUpdateManyWithWhereWithoutSectorsInput[]
    deleteMany?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuthAccountsInput = {
    create?: XOR<UserCreateWithoutAuthAccountsInput, UserUncheckedCreateWithoutAuthAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuthAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAuthAccountsInput, UserUncheckedCreateWithoutAuthAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthAccountsInput
    upsert?: UserUpsertWithoutAuthAccountsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthAccountsInput, UserUpdateWithoutAuthAccountsInput>, UserUncheckedUpdateWithoutAuthAccountsInput>
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMaritalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaritalStatusFilter<$PrismaModel> | $Enums.MaritalStatus
  }

  export type NestedEnumMaritalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaritalStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumSkillsLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillsLevel | EnumSkillsLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillsLevelFilter<$PrismaModel> | $Enums.SkillsLevel
  }

  export type NestedEnumSkillsLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillsLevel | EnumSkillsLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillsLevel[] | ListEnumSkillsLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillsLevelWithAggregatesFilter<$PrismaModel> | $Enums.SkillsLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkillsLevelFilter<$PrismaModel>
    _max?: NestedEnumSkillsLevelFilter<$PrismaModel>
  }

  export type NestedEnumLanguageLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelFilter<$PrismaModel> | $Enums.LanguageLevel
  }

  export type NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LanguageLevel | EnumLanguageLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LanguageLevel[] | ListEnumLanguageLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageLevelWithAggregatesFilter<$PrismaModel> | $Enums.LanguageLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageLevelFilter<$PrismaModel>
    _max?: NestedEnumLanguageLevelFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type AgencyDataCreateWithoutUserInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    branch?: BranchCreateNestedManyWithoutAgencyInput
    jobOffers?: jobOffersCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataUncheckedCreateWithoutUserInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    branch?: BranchUncheckedCreateNestedManyWithoutAgencyInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataCreateOrConnectWithoutUserInput = {
    where: AgencyDataWhereUniqueInput
    create: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
  }

  export type UserSocialCreateWithoutUserInput = {
    id?: string
    socialLink: string
  }

  export type UserSocialUncheckedCreateWithoutUserInput = {
    id?: string
    socialLink: string
  }

  export type UserSocialCreateOrConnectWithoutUserInput = {
    where: UserSocialWhereUniqueInput
    create: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput>
  }

  export type UserSocialCreateManyUserInputEnvelope = {
    data: UserSocialCreateManyUserInput | UserSocialCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthAccountCreateWithoutUserInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthAccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthAccountCreateOrConnectWithoutUserInput = {
    where: AuthAccountWhereUniqueInput
    create: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput>
  }

  export type AuthAccountCreateManyUserInputEnvelope = {
    data: AuthAccountCreateManyUserInput | AuthAccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CandidatDataCreateWithoutUserInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutUserInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutUserInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewer: UserCreateNestedOneWithoutReviewsInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    reviewerId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: RatingCreateManyUserInput | RatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutReviewerInput = {
    id?: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
  }

  export type RatingUncheckedCreateWithoutReviewerInput = {
    id?: string
    userId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutReviewerInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput>
  }

  export type RatingCreateManyReviewerInputEnvelope = {
    data: RatingCreateManyReviewerInput | RatingCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type AgencyDataUpsertWithoutUserInput = {
    update: XOR<AgencyDataUpdateWithoutUserInput, AgencyDataUncheckedUpdateWithoutUserInput>
    create: XOR<AgencyDataCreateWithoutUserInput, AgencyDataUncheckedCreateWithoutUserInput>
    where?: AgencyDataWhereInput
  }

  export type AgencyDataUpdateToOneWithWhereWithoutUserInput = {
    where?: AgencyDataWhereInput
    data: XOR<AgencyDataUpdateWithoutUserInput, AgencyDataUncheckedUpdateWithoutUserInput>
  }

  export type AgencyDataUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    branch?: BranchUpdateManyWithoutAgencyNestedInput
    jobOffers?: jobOffersUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyDataUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    branch?: BranchUncheckedUpdateManyWithoutAgencyNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserSocialUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSocialWhereUniqueInput
    update: XOR<UserSocialUpdateWithoutUserInput, UserSocialUncheckedUpdateWithoutUserInput>
    create: XOR<UserSocialCreateWithoutUserInput, UserSocialUncheckedCreateWithoutUserInput>
  }

  export type UserSocialUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSocialWhereUniqueInput
    data: XOR<UserSocialUpdateWithoutUserInput, UserSocialUncheckedUpdateWithoutUserInput>
  }

  export type UserSocialUpdateManyWithWhereWithoutUserInput = {
    where: UserSocialScalarWhereInput
    data: XOR<UserSocialUpdateManyMutationInput, UserSocialUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSocialScalarWhereInput = {
    AND?: UserSocialScalarWhereInput | UserSocialScalarWhereInput[]
    OR?: UserSocialScalarWhereInput[]
    NOT?: UserSocialScalarWhereInput | UserSocialScalarWhereInput[]
    id?: StringFilter<"UserSocial"> | string
    usId?: StringFilter<"UserSocial"> | string
    socialLink?: StringFilter<"UserSocial"> | string
  }

  export type AuthAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthAccountWhereUniqueInput
    update: XOR<AuthAccountUpdateWithoutUserInput, AuthAccountUncheckedUpdateWithoutUserInput>
    create: XOR<AuthAccountCreateWithoutUserInput, AuthAccountUncheckedCreateWithoutUserInput>
  }

  export type AuthAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthAccountWhereUniqueInput
    data: XOR<AuthAccountUpdateWithoutUserInput, AuthAccountUncheckedUpdateWithoutUserInput>
  }

  export type AuthAccountUpdateManyWithWhereWithoutUserInput = {
    where: AuthAccountScalarWhereInput
    data: XOR<AuthAccountUpdateManyMutationInput, AuthAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthAccountScalarWhereInput = {
    AND?: AuthAccountScalarWhereInput | AuthAccountScalarWhereInput[]
    OR?: AuthAccountScalarWhereInput[]
    NOT?: AuthAccountScalarWhereInput | AuthAccountScalarWhereInput[]
    id?: StringFilter<"AuthAccount"> | string
    type?: StringFilter<"AuthAccount"> | string
    provide?: StringFilter<"AuthAccount"> | string
    refreshToken?: StringNullableFilter<"AuthAccount"> | string | null
    accessToken?: StringNullableFilter<"AuthAccount"> | string | null
    expiresAt?: IntFilter<"AuthAccount"> | number
    createdAt?: DateTimeFilter<"AuthAccount"> | Date | string
    updatedAt?: DateTimeFilter<"AuthAccount"> | Date | string
    userId?: StringNullableFilter<"AuthAccount"> | string | null
  }

  export type CandidatDataUpsertWithoutUserInput = {
    update: XOR<CandidatDataUpdateWithoutUserInput, CandidatDataUncheckedUpdateWithoutUserInput>
    create: XOR<CandidatDataCreateWithoutUserInput, CandidatDataUncheckedCreateWithoutUserInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutUserInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutUserInput, CandidatDataUncheckedUpdateWithoutUserInput>
  }

  export type CandidatDataUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    reviewerId?: StringFilter<"Rating"> | string
    rating?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
  }

  export type RatingUpsertWithWhereUniqueWithoutReviewerInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutReviewerInput, RatingUncheckedUpdateWithoutReviewerInput>
    create: XOR<RatingCreateWithoutReviewerInput, RatingUncheckedCreateWithoutReviewerInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutReviewerInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutReviewerInput, RatingUncheckedUpdateWithoutReviewerInput>
  }

  export type RatingUpdateManyWithWhereWithoutReviewerInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutReviewerInput>
  }

  export type CoursesCreateWithoutCandidateInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
  }

  export type CoursesUncheckedCreateWithoutCandidateInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
  }

  export type CoursesCreateOrConnectWithoutCandidateInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput>
  }

  export type CoursesCreateManyCandidateInputEnvelope = {
    data: CoursesCreateManyCandidateInput | CoursesCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutCandidateInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelEducation?: LevelEducationCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutCandidateInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelId?: string | null
  }

  export type EducationCreateOrConnectWithoutCandidateInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput>
  }

  export type EducationCreateManyCandidateInputEnvelope = {
    data: EducationCreateManyCandidateInput | EducationCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ExperienceCreateWithoutCandidateInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeJob?: ContractTypeJobCreateNestedOneWithoutExperienceInput
  }

  export type ExperienceUncheckedCreateWithoutCandidateInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeId?: string | null
  }

  export type ExperienceCreateOrConnectWithoutCandidateInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput>
  }

  export type ExperienceCreateManyCandidateInputEnvelope = {
    data: ExperienceCreateManyCandidateInput | ExperienceCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type HobbiesCreateWithoutCandidateInput = {
    id?: string
    hobbie: string
  }

  export type HobbiesUncheckedCreateWithoutCandidateInput = {
    id?: string
    hobbie: string
  }

  export type HobbiesCreateOrConnectWithoutCandidateInput = {
    where: HobbiesWhereUniqueInput
    create: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput>
  }

  export type HobbiesCreateManyCandidateInputEnvelope = {
    data: HobbiesCreateManyCandidateInput | HobbiesCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type LanguagesCreateWithoutCandidateInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
  }

  export type LanguagesUncheckedCreateWithoutCandidateInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
  }

  export type LanguagesCreateOrConnectWithoutCandidateInput = {
    where: LanguagesWhereUniqueInput
    create: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput>
  }

  export type LanguagesCreateManyCandidateInputEnvelope = {
    data: LanguagesCreateManyCandidateInput | LanguagesCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type SkillsCreateWithoutCandidateInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
  }

  export type SkillsUncheckedCreateWithoutCandidateInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
  }

  export type SkillsCreateOrConnectWithoutCandidateInput = {
    where: SkillsWhereUniqueInput
    create: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput>
  }

  export type SkillsCreateManyCandidateInputEnvelope = {
    data: SkillsCreateManyCandidateInput | SkillsCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type SavedJobsCreateWithoutCandidateInput = {
    id?: string
    savedAt?: Date | string
    jobOffer: jobOffersCreateNestedOneWithoutSavedByInput
  }

  export type SavedJobsUncheckedCreateWithoutCandidateInput = {
    id?: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SavedJobsCreateOrConnectWithoutCandidateInput = {
    where: SavedJobsWhereUniqueInput
    create: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput>
  }

  export type SavedJobsCreateManyCandidateInputEnvelope = {
    data: SavedJobsCreateManyCandidateInput | SavedJobsCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type SendCandidatureCreateWithoutCandidateInput = {
    id?: string
    savedAt?: Date | string
    jobOffer: jobOffersCreateNestedOneWithoutSendCandidatureInput
  }

  export type SendCandidatureUncheckedCreateWithoutCandidateInput = {
    id?: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SendCandidatureCreateOrConnectWithoutCandidateInput = {
    where: SendCandidatureWhereUniqueInput
    create: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput>
  }

  export type SendCandidatureCreateManyCandidateInputEnvelope = {
    data: SendCandidatureCreateManyCandidateInput | SendCandidatureCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCandidatdataInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    social?: UserSocialCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutCandidatdataInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutCandidatdataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidatdataInput, UserUncheckedCreateWithoutCandidatdataInput>
  }

  export type CandidatLifeStateCreateWithoutCandidateInput = {
    id?: string
    availabilityTransport?: boolean
    maritalStatus?: $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateUncheckedCreateWithoutCandidateInput = {
    id?: string
    availabilityTransport?: boolean
    maritalStatus?: $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateCreateOrConnectWithoutCandidateInput = {
    where: CandidatLifeStateWhereUniqueInput
    create: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
  }

  export type CoursesUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CoursesWhereUniqueInput
    update: XOR<CoursesUpdateWithoutCandidateInput, CoursesUncheckedUpdateWithoutCandidateInput>
    create: XOR<CoursesCreateWithoutCandidateInput, CoursesUncheckedCreateWithoutCandidateInput>
  }

  export type CoursesUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CoursesWhereUniqueInput
    data: XOR<CoursesUpdateWithoutCandidateInput, CoursesUncheckedUpdateWithoutCandidateInput>
  }

  export type CoursesUpdateManyWithWhereWithoutCandidateInput = {
    where: CoursesScalarWhereInput
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CoursesScalarWhereInput = {
    AND?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
    OR?: CoursesScalarWhereInput[]
    NOT?: CoursesScalarWhereInput | CoursesScalarWhereInput[]
    id?: StringFilter<"Courses"> | string
    course?: StringFilter<"Courses"> | string
    institution?: StringFilter<"Courses"> | string
    grade?: StringNullableFilter<"Courses"> | string | null
    startdate?: DateTimeFilter<"Courses"> | Date | string
    enddate?: DateTimeFilter<"Courses"> | Date | string
    cdId?: StringFilter<"Courses"> | string
  }

  export type EducationUpsertWithWhereUniqueWithoutCandidateInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutCandidateInput, EducationUncheckedUpdateWithoutCandidateInput>
    create: XOR<EducationCreateWithoutCandidateInput, EducationUncheckedCreateWithoutCandidateInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutCandidateInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutCandidateInput, EducationUncheckedUpdateWithoutCandidateInput>
  }

  export type EducationUpdateManyWithWhereWithoutCandidateInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutCandidateInput>
  }

  export type EducationScalarWhereInput = {
    AND?: EducationScalarWhereInput | EducationScalarWhereInput[]
    OR?: EducationScalarWhereInput[]
    NOT?: EducationScalarWhereInput | EducationScalarWhereInput[]
    id?: StringFilter<"Education"> | string
    school?: StringFilter<"Education"> | string
    grade?: StringNullableFilter<"Education"> | string | null
    startdate?: DateTimeFilter<"Education"> | Date | string
    enddate?: DateTimeFilter<"Education"> | Date | string
    description?: StringNullableFilter<"Education"> | string | null
    levelId?: StringNullableFilter<"Education"> | string | null
    cdId?: StringFilter<"Education"> | string
  }

  export type ExperienceUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutCandidateInput, ExperienceUncheckedUpdateWithoutCandidateInput>
    create: XOR<ExperienceCreateWithoutCandidateInput, ExperienceUncheckedCreateWithoutCandidateInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutCandidateInput, ExperienceUncheckedUpdateWithoutCandidateInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutCandidateInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutCandidateInput>
  }

  export type ExperienceScalarWhereInput = {
    AND?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    OR?: ExperienceScalarWhereInput[]
    NOT?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    id?: StringFilter<"Experience"> | string
    company?: StringFilter<"Experience"> | string
    location?: StringNullableFilter<"Experience"> | string | null
    currently?: BoolFilter<"Experience"> | boolean
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeFilter<"Experience"> | Date | string
    description?: StringNullableFilter<"Experience"> | string | null
    contractTypeId?: StringNullableFilter<"Experience"> | string | null
    cdId?: StringFilter<"Experience"> | string
  }

  export type HobbiesUpsertWithWhereUniqueWithoutCandidateInput = {
    where: HobbiesWhereUniqueInput
    update: XOR<HobbiesUpdateWithoutCandidateInput, HobbiesUncheckedUpdateWithoutCandidateInput>
    create: XOR<HobbiesCreateWithoutCandidateInput, HobbiesUncheckedCreateWithoutCandidateInput>
  }

  export type HobbiesUpdateWithWhereUniqueWithoutCandidateInput = {
    where: HobbiesWhereUniqueInput
    data: XOR<HobbiesUpdateWithoutCandidateInput, HobbiesUncheckedUpdateWithoutCandidateInput>
  }

  export type HobbiesUpdateManyWithWhereWithoutCandidateInput = {
    where: HobbiesScalarWhereInput
    data: XOR<HobbiesUpdateManyMutationInput, HobbiesUncheckedUpdateManyWithoutCandidateInput>
  }

  export type HobbiesScalarWhereInput = {
    AND?: HobbiesScalarWhereInput | HobbiesScalarWhereInput[]
    OR?: HobbiesScalarWhereInput[]
    NOT?: HobbiesScalarWhereInput | HobbiesScalarWhereInput[]
    id?: StringFilter<"Hobbies"> | string
    hobbie?: StringFilter<"Hobbies"> | string
    cdId?: StringFilter<"Hobbies"> | string
  }

  export type LanguagesUpsertWithWhereUniqueWithoutCandidateInput = {
    where: LanguagesWhereUniqueInput
    update: XOR<LanguagesUpdateWithoutCandidateInput, LanguagesUncheckedUpdateWithoutCandidateInput>
    create: XOR<LanguagesCreateWithoutCandidateInput, LanguagesUncheckedCreateWithoutCandidateInput>
  }

  export type LanguagesUpdateWithWhereUniqueWithoutCandidateInput = {
    where: LanguagesWhereUniqueInput
    data: XOR<LanguagesUpdateWithoutCandidateInput, LanguagesUncheckedUpdateWithoutCandidateInput>
  }

  export type LanguagesUpdateManyWithWhereWithoutCandidateInput = {
    where: LanguagesScalarWhereInput
    data: XOR<LanguagesUpdateManyMutationInput, LanguagesUncheckedUpdateManyWithoutCandidateInput>
  }

  export type LanguagesScalarWhereInput = {
    AND?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
    OR?: LanguagesScalarWhereInput[]
    NOT?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
    id?: StringFilter<"Languages"> | string
    language?: StringFilter<"Languages"> | string
    level?: EnumLanguageLevelFilter<"Languages"> | $Enums.LanguageLevel
    cdId?: StringFilter<"Languages"> | string
  }

  export type SkillsUpsertWithWhereUniqueWithoutCandidateInput = {
    where: SkillsWhereUniqueInput
    update: XOR<SkillsUpdateWithoutCandidateInput, SkillsUncheckedUpdateWithoutCandidateInput>
    create: XOR<SkillsCreateWithoutCandidateInput, SkillsUncheckedCreateWithoutCandidateInput>
  }

  export type SkillsUpdateWithWhereUniqueWithoutCandidateInput = {
    where: SkillsWhereUniqueInput
    data: XOR<SkillsUpdateWithoutCandidateInput, SkillsUncheckedUpdateWithoutCandidateInput>
  }

  export type SkillsUpdateManyWithWhereWithoutCandidateInput = {
    where: SkillsScalarWhereInput
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyWithoutCandidateInput>
  }

  export type SkillsScalarWhereInput = {
    AND?: SkillsScalarWhereInput | SkillsScalarWhereInput[]
    OR?: SkillsScalarWhereInput[]
    NOT?: SkillsScalarWhereInput | SkillsScalarWhereInput[]
    id?: StringFilter<"Skills"> | string
    skill?: StringFilter<"Skills"> | string
    level?: EnumSkillsLevelFilter<"Skills"> | $Enums.SkillsLevel
    cdId?: StringFilter<"Skills"> | string
  }

  export type SavedJobsUpsertWithWhereUniqueWithoutCandidateInput = {
    where: SavedJobsWhereUniqueInput
    update: XOR<SavedJobsUpdateWithoutCandidateInput, SavedJobsUncheckedUpdateWithoutCandidateInput>
    create: XOR<SavedJobsCreateWithoutCandidateInput, SavedJobsUncheckedCreateWithoutCandidateInput>
  }

  export type SavedJobsUpdateWithWhereUniqueWithoutCandidateInput = {
    where: SavedJobsWhereUniqueInput
    data: XOR<SavedJobsUpdateWithoutCandidateInput, SavedJobsUncheckedUpdateWithoutCandidateInput>
  }

  export type SavedJobsUpdateManyWithWhereWithoutCandidateInput = {
    where: SavedJobsScalarWhereInput
    data: XOR<SavedJobsUpdateManyMutationInput, SavedJobsUncheckedUpdateManyWithoutCandidateInput>
  }

  export type SavedJobsScalarWhereInput = {
    AND?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
    OR?: SavedJobsScalarWhereInput[]
    NOT?: SavedJobsScalarWhereInput | SavedJobsScalarWhereInput[]
    id?: StringFilter<"SavedJobs"> | string
    candidateId?: StringFilter<"SavedJobs"> | string
    jobOfferId?: StringFilter<"SavedJobs"> | string
    savedAt?: DateTimeFilter<"SavedJobs"> | Date | string
  }

  export type SendCandidatureUpsertWithWhereUniqueWithoutCandidateInput = {
    where: SendCandidatureWhereUniqueInput
    update: XOR<SendCandidatureUpdateWithoutCandidateInput, SendCandidatureUncheckedUpdateWithoutCandidateInput>
    create: XOR<SendCandidatureCreateWithoutCandidateInput, SendCandidatureUncheckedCreateWithoutCandidateInput>
  }

  export type SendCandidatureUpdateWithWhereUniqueWithoutCandidateInput = {
    where: SendCandidatureWhereUniqueInput
    data: XOR<SendCandidatureUpdateWithoutCandidateInput, SendCandidatureUncheckedUpdateWithoutCandidateInput>
  }

  export type SendCandidatureUpdateManyWithWhereWithoutCandidateInput = {
    where: SendCandidatureScalarWhereInput
    data: XOR<SendCandidatureUpdateManyMutationInput, SendCandidatureUncheckedUpdateManyWithoutCandidateInput>
  }

  export type SendCandidatureScalarWhereInput = {
    AND?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
    OR?: SendCandidatureScalarWhereInput[]
    NOT?: SendCandidatureScalarWhereInput | SendCandidatureScalarWhereInput[]
    id?: StringFilter<"SendCandidature"> | string
    candidateId?: StringFilter<"SendCandidature"> | string
    jobOfferId?: StringFilter<"SendCandidature"> | string
    savedAt?: DateTimeFilter<"SendCandidature"> | Date | string
  }

  export type UserUpsertWithoutCandidatdataInput = {
    update: XOR<UserUpdateWithoutCandidatdataInput, UserUncheckedUpdateWithoutCandidatdataInput>
    create: XOR<UserCreateWithoutCandidatdataInput, UserUncheckedCreateWithoutCandidatdataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCandidatdataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCandidatdataInput, UserUncheckedUpdateWithoutCandidatdataInput>
  }

  export type UserUpdateWithoutCandidatdataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    social?: UserSocialUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutCandidatdataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type CandidatLifeStateUpsertWithoutCandidateInput = {
    update: XOR<CandidatLifeStateUpdateWithoutCandidateInput, CandidatLifeStateUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidatLifeStateCreateWithoutCandidateInput, CandidatLifeStateUncheckedCreateWithoutCandidateInput>
    where?: CandidatLifeStateWhereInput
  }

  export type CandidatLifeStateUpdateToOneWithWhereWithoutCandidateInput = {
    where?: CandidatLifeStateWhereInput
    data: XOR<CandidatLifeStateUpdateWithoutCandidateInput, CandidatLifeStateUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidatLifeStateUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatLifeStateUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    availabilityTransport?: BoolFieldUpdateOperationsInput | boolean
    maritalStatus?: EnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus
    driverCategory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CandidatDataCreateWithoutCandidatLifeStateInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
  }

  export type CandidatDataUncheckedCreateWithoutCandidatLifeStateInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutCandidatLifeStateInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutCandidatLifeStateInput, CandidatDataUncheckedCreateWithoutCandidatLifeStateInput>
  }

  export type CandidatDataUpsertWithoutCandidatLifeStateInput = {
    update: XOR<CandidatDataUpdateWithoutCandidatLifeStateInput, CandidatDataUncheckedUpdateWithoutCandidatLifeStateInput>
    create: XOR<CandidatDataCreateWithoutCandidatLifeStateInput, CandidatDataUncheckedCreateWithoutCandidatLifeStateInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutCandidatLifeStateInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutCandidatLifeStateInput, CandidatDataUncheckedUpdateWithoutCandidatLifeStateInput>
  }

  export type CandidatDataUpdateWithoutCandidatLifeStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutCandidatLifeStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type UserCreateWithoutSocialInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutSocialInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutSocialInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialInput, UserUncheckedCreateWithoutSocialInput>
  }

  export type UserUpsertWithoutSocialInput = {
    update: XOR<UserUpdateWithoutSocialInput, UserUncheckedUpdateWithoutSocialInput>
    create: XOR<UserCreateWithoutSocialInput, UserUncheckedCreateWithoutSocialInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSocialInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSocialInput, UserUncheckedUpdateWithoutSocialInput>
  }

  export type UserUpdateWithoutSocialInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type LevelEducationCreateWithoutEducationInput = {
    id?: string
    name: string
    jobOffers?: jobOffersCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationUncheckedCreateWithoutEducationInput = {
    id?: string
    name: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationCreateOrConnectWithoutEducationInput = {
    where: LevelEducationWhereUniqueInput
    create: XOR<LevelEducationCreateWithoutEducationInput, LevelEducationUncheckedCreateWithoutEducationInput>
  }

  export type CandidatDataCreateWithoutEducationInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutEducationInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutEducationInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutEducationInput, CandidatDataUncheckedCreateWithoutEducationInput>
  }

  export type LevelEducationUpsertWithoutEducationInput = {
    update: XOR<LevelEducationUpdateWithoutEducationInput, LevelEducationUncheckedUpdateWithoutEducationInput>
    create: XOR<LevelEducationCreateWithoutEducationInput, LevelEducationUncheckedCreateWithoutEducationInput>
    where?: LevelEducationWhereInput
  }

  export type LevelEducationUpdateToOneWithWhereWithoutEducationInput = {
    where?: LevelEducationWhereInput
    data: XOR<LevelEducationUpdateWithoutEducationInput, LevelEducationUncheckedUpdateWithoutEducationInput>
  }

  export type LevelEducationUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutLevelEducationNestedInput
  }

  export type LevelEducationUncheckedUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutLevelEducationNestedInput
  }

  export type CandidatDataUpsertWithoutEducationInput = {
    update: XOR<CandidatDataUpdateWithoutEducationInput, CandidatDataUncheckedUpdateWithoutEducationInput>
    create: XOR<CandidatDataCreateWithoutEducationInput, CandidatDataUncheckedCreateWithoutEducationInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutEducationInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutEducationInput, CandidatDataUncheckedUpdateWithoutEducationInput>
  }

  export type CandidatDataUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataCreateWithoutSkillsInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutSkillsInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutSkillsInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutSkillsInput, CandidatDataUncheckedCreateWithoutSkillsInput>
  }

  export type CandidatDataUpsertWithoutSkillsInput = {
    update: XOR<CandidatDataUpdateWithoutSkillsInput, CandidatDataUncheckedUpdateWithoutSkillsInput>
    create: XOR<CandidatDataCreateWithoutSkillsInput, CandidatDataUncheckedCreateWithoutSkillsInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutSkillsInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutSkillsInput, CandidatDataUncheckedUpdateWithoutSkillsInput>
  }

  export type CandidatDataUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type ContractTypeJobCreateWithoutExperienceInput = {
    id?: string
    name: string
    jobOffers?: jobOffersCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeJobUncheckedCreateWithoutExperienceInput = {
    id?: string
    name: string
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeJobCreateOrConnectWithoutExperienceInput = {
    where: ContractTypeJobWhereUniqueInput
    create: XOR<ContractTypeJobCreateWithoutExperienceInput, ContractTypeJobUncheckedCreateWithoutExperienceInput>
  }

  export type CandidatDataCreateWithoutExperienceInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutExperienceInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutExperienceInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutExperienceInput, CandidatDataUncheckedCreateWithoutExperienceInput>
  }

  export type ContractTypeJobUpsertWithoutExperienceInput = {
    update: XOR<ContractTypeJobUpdateWithoutExperienceInput, ContractTypeJobUncheckedUpdateWithoutExperienceInput>
    create: XOR<ContractTypeJobCreateWithoutExperienceInput, ContractTypeJobUncheckedCreateWithoutExperienceInput>
    where?: ContractTypeJobWhereInput
  }

  export type ContractTypeJobUpdateToOneWithWhereWithoutExperienceInput = {
    where?: ContractTypeJobWhereInput
    data: XOR<ContractTypeJobUpdateWithoutExperienceInput, ContractTypeJobUncheckedUpdateWithoutExperienceInput>
  }

  export type ContractTypeJobUpdateWithoutExperienceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUpdateManyWithoutContractTypeNestedInput
  }

  export type ContractTypeJobUncheckedUpdateWithoutExperienceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    jobOffers?: jobOffersUncheckedUpdateManyWithoutContractTypeNestedInput
  }

  export type CandidatDataUpsertWithoutExperienceInput = {
    update: XOR<CandidatDataUpdateWithoutExperienceInput, CandidatDataUncheckedUpdateWithoutExperienceInput>
    create: XOR<CandidatDataCreateWithoutExperienceInput, CandidatDataUncheckedCreateWithoutExperienceInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutExperienceInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutExperienceInput, CandidatDataUncheckedUpdateWithoutExperienceInput>
  }

  export type CandidatDataUpdateWithoutExperienceInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutExperienceInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataCreateWithoutLanguagesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutLanguagesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutLanguagesInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutLanguagesInput, CandidatDataUncheckedCreateWithoutLanguagesInput>
  }

  export type CandidatDataUpsertWithoutLanguagesInput = {
    update: XOR<CandidatDataUpdateWithoutLanguagesInput, CandidatDataUncheckedUpdateWithoutLanguagesInput>
    create: XOR<CandidatDataCreateWithoutLanguagesInput, CandidatDataUncheckedCreateWithoutLanguagesInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutLanguagesInput, CandidatDataUncheckedUpdateWithoutLanguagesInput>
  }

  export type CandidatDataUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataCreateWithoutCoursesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutCoursesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutCoursesInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutCoursesInput, CandidatDataUncheckedCreateWithoutCoursesInput>
  }

  export type CandidatDataUpsertWithoutCoursesInput = {
    update: XOR<CandidatDataUpdateWithoutCoursesInput, CandidatDataUncheckedUpdateWithoutCoursesInput>
    create: XOR<CandidatDataCreateWithoutCoursesInput, CandidatDataUncheckedCreateWithoutCoursesInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutCoursesInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutCoursesInput, CandidatDataUncheckedUpdateWithoutCoursesInput>
  }

  export type CandidatDataUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataCreateWithoutHobbiesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutHobbiesInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutHobbiesInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutHobbiesInput, CandidatDataUncheckedCreateWithoutHobbiesInput>
  }

  export type CandidatDataUpsertWithoutHobbiesInput = {
    update: XOR<CandidatDataUpdateWithoutHobbiesInput, CandidatDataUncheckedUpdateWithoutHobbiesInput>
    create: XOR<CandidatDataCreateWithoutHobbiesInput, CandidatDataUncheckedCreateWithoutHobbiesInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutHobbiesInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutHobbiesInput, CandidatDataUncheckedUpdateWithoutHobbiesInput>
  }

  export type CandidatDataUpdateWithoutHobbiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutHobbiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type UserCreateWithoutRatingsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    social?: UserSocialCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutRatingsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    social?: UserSocialCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutRatingsInput = {
    update: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    social?: UserSocialUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    social?: UserSocialUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAgencydataInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    social?: UserSocialCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutAgencydataInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    authAccounts?: AuthAccountUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutAgencydataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgencydataInput, UserUncheckedCreateWithoutAgencydataInput>
  }

  export type BranchCreateWithoutAgencyInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    jobOffers?: jobOffersCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutAgencyInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutAgencyInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput>
  }

  export type BranchCreateManyAgencyInputEnvelope = {
    data: BranchCreateManyAgencyInput | BranchCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersCreateWithoutAgencyInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutAgencyInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutAgencyInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput>
  }

  export type jobOffersCreateManyAgencyInputEnvelope = {
    data: jobOffersCreateManyAgencyInput | jobOffersCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAgencydataInput = {
    update: XOR<UserUpdateWithoutAgencydataInput, UserUncheckedUpdateWithoutAgencydataInput>
    create: XOR<UserCreateWithoutAgencydataInput, UserUncheckedCreateWithoutAgencydataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAgencydataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAgencydataInput, UserUncheckedUpdateWithoutAgencydataInput>
  }

  export type UserUpdateWithoutAgencydataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    social?: UserSocialUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutAgencydataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    authAccounts?: AuthAccountUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type BranchUpsertWithWhereUniqueWithoutAgencyInput = {
    where: BranchWhereUniqueInput
    update: XOR<BranchUpdateWithoutAgencyInput, BranchUncheckedUpdateWithoutAgencyInput>
    create: XOR<BranchCreateWithoutAgencyInput, BranchUncheckedCreateWithoutAgencyInput>
  }

  export type BranchUpdateWithWhereUniqueWithoutAgencyInput = {
    where: BranchWhereUniqueInput
    data: XOR<BranchUpdateWithoutAgencyInput, BranchUncheckedUpdateWithoutAgencyInput>
  }

  export type BranchUpdateManyWithWhereWithoutAgencyInput = {
    where: BranchScalarWhereInput
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyWithoutAgencyInput>
  }

  export type BranchScalarWhereInput = {
    AND?: BranchScalarWhereInput | BranchScalarWhereInput[]
    OR?: BranchScalarWhereInput[]
    NOT?: BranchScalarWhereInput | BranchScalarWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    email?: StringFilter<"Branch"> | string
    phone?: StringFilter<"Branch"> | string
    fax?: StringNullableFilter<"Branch"> | string | null
    address?: StringFilter<"Branch"> | string
    location?: StringFilter<"Branch"> | string
    region?: StringFilter<"Branch"> | string
    logo?: StringNullableFilter<"Branch"> | string | null
    about_branch?: StringNullableFilter<"Branch"> | string | null
    adId?: StringFilter<"Branch"> | string
  }

  export type jobOffersUpsertWithWhereUniqueWithoutAgencyInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutAgencyInput, jobOffersUncheckedUpdateWithoutAgencyInput>
    create: XOR<jobOffersCreateWithoutAgencyInput, jobOffersUncheckedCreateWithoutAgencyInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutAgencyInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutAgencyInput, jobOffersUncheckedUpdateWithoutAgencyInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutAgencyInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutAgencyInput>
  }

  export type jobOffersScalarWhereInput = {
    AND?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
    OR?: jobOffersScalarWhereInput[]
    NOT?: jobOffersScalarWhereInput | jobOffersScalarWhereInput[]
    id?: StringFilter<"jobOffers"> | string
    title?: StringFilter<"jobOffers"> | string
    slug?: StringFilter<"jobOffers"> | string
    description?: StringFilter<"jobOffers"> | string
    region?: StringFilter<"jobOffers"> | string
    province?: StringFilter<"jobOffers"> | string
    location?: StringFilter<"jobOffers"> | string
    reallyUpTo?: DateTimeNullableFilter<"jobOffers"> | Date | string | null
    createdAt?: DateTimeFilter<"jobOffers"> | Date | string
    updatedAt?: DateTimeFilter<"jobOffers"> | Date | string
    isValidate?: BoolFilter<"jobOffers"> | boolean
    views?: IntFilter<"jobOffers"> | number
    categoryId?: StringFilter<"jobOffers"> | string
    contratId?: StringNullableFilter<"jobOffers"> | string | null
    experienceId?: StringNullableFilter<"jobOffers"> | string | null
    modeId?: StringNullableFilter<"jobOffers"> | string | null
    workingTimeId?: StringNullableFilter<"jobOffers"> | string | null
    levelId?: StringNullableFilter<"jobOffers"> | string | null
    agencyId?: StringFilter<"jobOffers"> | string
    branchId?: StringNullableFilter<"jobOffers"> | string | null
  }

  export type AgencyDataCreateWithoutBranchInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    user: UserCreateNestedOneWithoutAgencydataInput
    jobOffers?: jobOffersCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataUncheckedCreateWithoutBranchInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataCreateOrConnectWithoutBranchInput = {
    where: AgencyDataWhereUniqueInput
    create: XOR<AgencyDataCreateWithoutBranchInput, AgencyDataUncheckedCreateWithoutBranchInput>
  }

  export type jobOffersCreateWithoutBranchInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutBranchInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutBranchInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput>
  }

  export type jobOffersCreateManyBranchInputEnvelope = {
    data: jobOffersCreateManyBranchInput | jobOffersCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type AgencyDataUpsertWithoutBranchInput = {
    update: XOR<AgencyDataUpdateWithoutBranchInput, AgencyDataUncheckedUpdateWithoutBranchInput>
    create: XOR<AgencyDataCreateWithoutBranchInput, AgencyDataUncheckedCreateWithoutBranchInput>
    where?: AgencyDataWhereInput
  }

  export type AgencyDataUpdateToOneWithWhereWithoutBranchInput = {
    where?: AgencyDataWhereInput
    data: XOR<AgencyDataUpdateWithoutBranchInput, AgencyDataUncheckedUpdateWithoutBranchInput>
  }

  export type AgencyDataUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    user?: UserUpdateOneRequiredWithoutAgencydataNestedInput
    jobOffers?: jobOffersUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyDataUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    jobOffers?: jobOffersUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type jobOffersUpsertWithWhereUniqueWithoutBranchInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutBranchInput, jobOffersUncheckedUpdateWithoutBranchInput>
    create: XOR<jobOffersCreateWithoutBranchInput, jobOffersUncheckedCreateWithoutBranchInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutBranchInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutBranchInput, jobOffersUncheckedUpdateWithoutBranchInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutBranchInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutBranchInput>
  }

  export type AgencyDataCreateWithoutJobOffersInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    user: UserCreateNestedOneWithoutAgencydataInput
    branch?: BranchCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataUncheckedCreateWithoutJobOffersInput = {
    id?: string
    agency_name: string
    slug: string
    address: string
    phone: string
    p_iva_c_f: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    about: string
    logo?: AgencyDataCreatelogoInput | string[]
    branch?: BranchUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyDataCreateOrConnectWithoutJobOffersInput = {
    where: AgencyDataWhereUniqueInput
    create: XOR<AgencyDataCreateWithoutJobOffersInput, AgencyDataUncheckedCreateWithoutJobOffersInput>
  }

  export type BranchCreateWithoutJobOffersInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    agency: AgencyDataCreateNestedOneWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
    adId: string
  }

  export type BranchCreateOrConnectWithoutJobOffersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutJobOffersInput, BranchUncheckedCreateWithoutJobOffersInput>
  }

  export type CategoryCreateWithoutJobOffersInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    sectors?: SectorsCreateNestedManyWithoutCategoryInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parentId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutJobOffersInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutJobOffersInput, CategoryUncheckedCreateWithoutJobOffersInput>
  }

  export type ContractTypeJobCreateWithoutJobOffersInput = {
    id?: string
    name: string
    experience?: ExperienceCreateNestedManyWithoutContractTypeJobInput
  }

  export type ContractTypeJobUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
    experience?: ExperienceUncheckedCreateNestedManyWithoutContractTypeJobInput
  }

  export type ContractTypeJobCreateOrConnectWithoutJobOffersInput = {
    where: ContractTypeJobWhereUniqueInput
    create: XOR<ContractTypeJobCreateWithoutJobOffersInput, ContractTypeJobUncheckedCreateWithoutJobOffersInput>
  }

  export type ExperienceMinimalJobCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type ExperienceMinimalJobUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type ExperienceMinimalJobCreateOrConnectWithoutJobOffersInput = {
    where: ExperienceMinimalJobWhereUniqueInput
    create: XOR<ExperienceMinimalJobCreateWithoutJobOffersInput, ExperienceMinimalJobUncheckedCreateWithoutJobOffersInput>
  }

  export type LevelEducationCreateWithoutJobOffersInput = {
    id?: string
    name: string
    education?: EducationCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
    education?: EducationUncheckedCreateNestedManyWithoutLevelEducationInput
  }

  export type LevelEducationCreateOrConnectWithoutJobOffersInput = {
    where: LevelEducationWhereUniqueInput
    create: XOR<LevelEducationCreateWithoutJobOffersInput, LevelEducationUncheckedCreateWithoutJobOffersInput>
  }

  export type ModeJobCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type ModeJobUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type ModeJobCreateOrConnectWithoutJobOffersInput = {
    where: ModeJobWhereUniqueInput
    create: XOR<ModeJobCreateWithoutJobOffersInput, ModeJobUncheckedCreateWithoutJobOffersInput>
  }

  export type WorkingTimeJobCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type WorkingTimeJobUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
  }

  export type WorkingTimeJobCreateOrConnectWithoutJobOffersInput = {
    where: WorkingTimeJobWhereUniqueInput
    create: XOR<WorkingTimeJobCreateWithoutJobOffersInput, WorkingTimeJobUncheckedCreateWithoutJobOffersInput>
  }

  export type SectorsCreateWithoutJobOfferInput = {
    id?: string
    name: string
    slug: string
    category: CategoryCreateNestedOneWithoutSectorsInput
  }

  export type SectorsUncheckedCreateWithoutJobOfferInput = {
    id?: string
    name: string
    slug: string
    categoryId: string
  }

  export type SectorsCreateOrConnectWithoutJobOfferInput = {
    where: SectorsWhereUniqueInput
    create: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput>
  }

  export type jobTagsCreateWithoutJobOffersInput = {
    id?: string
    name: string
    slug: string
  }

  export type jobTagsUncheckedCreateWithoutJobOffersInput = {
    id?: string
    name: string
    slug: string
  }

  export type jobTagsCreateOrConnectWithoutJobOffersInput = {
    where: jobTagsWhereUniqueInput
    create: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput>
  }

  export type SavedJobsCreateWithoutJobOfferInput = {
    id?: string
    savedAt?: Date | string
    candidate: CandidatDataCreateNestedOneWithoutSavedJobsInput
  }

  export type SavedJobsUncheckedCreateWithoutJobOfferInput = {
    id?: string
    candidateId: string
    savedAt?: Date | string
  }

  export type SavedJobsCreateOrConnectWithoutJobOfferInput = {
    where: SavedJobsWhereUniqueInput
    create: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput>
  }

  export type SavedJobsCreateManyJobOfferInputEnvelope = {
    data: SavedJobsCreateManyJobOfferInput | SavedJobsCreateManyJobOfferInput[]
    skipDuplicates?: boolean
  }

  export type SendCandidatureCreateWithoutJobOfferInput = {
    id?: string
    savedAt?: Date | string
    candidate: CandidatDataCreateNestedOneWithoutSendCandidatureInput
  }

  export type SendCandidatureUncheckedCreateWithoutJobOfferInput = {
    id?: string
    candidateId: string
    savedAt?: Date | string
  }

  export type SendCandidatureCreateOrConnectWithoutJobOfferInput = {
    where: SendCandidatureWhereUniqueInput
    create: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput>
  }

  export type SendCandidatureCreateManyJobOfferInputEnvelope = {
    data: SendCandidatureCreateManyJobOfferInput | SendCandidatureCreateManyJobOfferInput[]
    skipDuplicates?: boolean
  }

  export type AgencyDataUpsertWithoutJobOffersInput = {
    update: XOR<AgencyDataUpdateWithoutJobOffersInput, AgencyDataUncheckedUpdateWithoutJobOffersInput>
    create: XOR<AgencyDataCreateWithoutJobOffersInput, AgencyDataUncheckedCreateWithoutJobOffersInput>
    where?: AgencyDataWhereInput
  }

  export type AgencyDataUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: AgencyDataWhereInput
    data: XOR<AgencyDataUpdateWithoutJobOffersInput, AgencyDataUncheckedUpdateWithoutJobOffersInput>
  }

  export type AgencyDataUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    user?: UserUpdateOneRequiredWithoutAgencydataNestedInput
    branch?: BranchUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyDataUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agency_name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    p_iva_c_f?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    logo?: AgencyDataUpdatelogoInput | string[]
    branch?: BranchUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type BranchUpsertWithoutJobOffersInput = {
    update: XOR<BranchUpdateWithoutJobOffersInput, BranchUncheckedUpdateWithoutJobOffersInput>
    create: XOR<BranchCreateWithoutJobOffersInput, BranchUncheckedCreateWithoutJobOffersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutJobOffersInput, BranchUncheckedUpdateWithoutJobOffersInput>
  }

  export type BranchUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyDataUpdateOneRequiredWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    adId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUpsertWithoutJobOffersInput = {
    update: XOR<CategoryUpdateWithoutJobOffersInput, CategoryUncheckedUpdateWithoutJobOffersInput>
    create: XOR<CategoryCreateWithoutJobOffersInput, CategoryUncheckedCreateWithoutJobOffersInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutJobOffersInput, CategoryUncheckedUpdateWithoutJobOffersInput>
  }

  export type CategoryUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    sectors?: SectorsUpdateManyWithoutCategoryNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ContractTypeJobUpsertWithoutJobOffersInput = {
    update: XOR<ContractTypeJobUpdateWithoutJobOffersInput, ContractTypeJobUncheckedUpdateWithoutJobOffersInput>
    create: XOR<ContractTypeJobCreateWithoutJobOffersInput, ContractTypeJobUncheckedCreateWithoutJobOffersInput>
    where?: ContractTypeJobWhereInput
  }

  export type ContractTypeJobUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: ContractTypeJobWhereInput
    data: XOR<ContractTypeJobUpdateWithoutJobOffersInput, ContractTypeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type ContractTypeJobUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    experience?: ExperienceUpdateManyWithoutContractTypeJobNestedInput
  }

  export type ContractTypeJobUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    experience?: ExperienceUncheckedUpdateManyWithoutContractTypeJobNestedInput
  }

  export type ExperienceMinimalJobUpsertWithoutJobOffersInput = {
    update: XOR<ExperienceMinimalJobUpdateWithoutJobOffersInput, ExperienceMinimalJobUncheckedUpdateWithoutJobOffersInput>
    create: XOR<ExperienceMinimalJobCreateWithoutJobOffersInput, ExperienceMinimalJobUncheckedCreateWithoutJobOffersInput>
    where?: ExperienceMinimalJobWhereInput
  }

  export type ExperienceMinimalJobUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: ExperienceMinimalJobWhereInput
    data: XOR<ExperienceMinimalJobUpdateWithoutJobOffersInput, ExperienceMinimalJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type ExperienceMinimalJobUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceMinimalJobUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LevelEducationUpsertWithoutJobOffersInput = {
    update: XOR<LevelEducationUpdateWithoutJobOffersInput, LevelEducationUncheckedUpdateWithoutJobOffersInput>
    create: XOR<LevelEducationCreateWithoutJobOffersInput, LevelEducationUncheckedCreateWithoutJobOffersInput>
    where?: LevelEducationWhereInput
  }

  export type LevelEducationUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: LevelEducationWhereInput
    data: XOR<LevelEducationUpdateWithoutJobOffersInput, LevelEducationUncheckedUpdateWithoutJobOffersInput>
  }

  export type LevelEducationUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    education?: EducationUpdateManyWithoutLevelEducationNestedInput
  }

  export type LevelEducationUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    education?: EducationUncheckedUpdateManyWithoutLevelEducationNestedInput
  }

  export type ModeJobUpsertWithoutJobOffersInput = {
    update: XOR<ModeJobUpdateWithoutJobOffersInput, ModeJobUncheckedUpdateWithoutJobOffersInput>
    create: XOR<ModeJobCreateWithoutJobOffersInput, ModeJobUncheckedCreateWithoutJobOffersInput>
    where?: ModeJobWhereInput
  }

  export type ModeJobUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: ModeJobWhereInput
    data: XOR<ModeJobUpdateWithoutJobOffersInput, ModeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type ModeJobUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ModeJobUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingTimeJobUpsertWithoutJobOffersInput = {
    update: XOR<WorkingTimeJobUpdateWithoutJobOffersInput, WorkingTimeJobUncheckedUpdateWithoutJobOffersInput>
    create: XOR<WorkingTimeJobCreateWithoutJobOffersInput, WorkingTimeJobUncheckedCreateWithoutJobOffersInput>
    where?: WorkingTimeJobWhereInput
  }

  export type WorkingTimeJobUpdateToOneWithWhereWithoutJobOffersInput = {
    where?: WorkingTimeJobWhereInput
    data: XOR<WorkingTimeJobUpdateWithoutJobOffersInput, WorkingTimeJobUncheckedUpdateWithoutJobOffersInput>
  }

  export type WorkingTimeJobUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingTimeJobUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectorsUpsertWithWhereUniqueWithoutJobOfferInput = {
    where: SectorsWhereUniqueInput
    update: XOR<SectorsUpdateWithoutJobOfferInput, SectorsUncheckedUpdateWithoutJobOfferInput>
    create: XOR<SectorsCreateWithoutJobOfferInput, SectorsUncheckedCreateWithoutJobOfferInput>
  }

  export type SectorsUpdateWithWhereUniqueWithoutJobOfferInput = {
    where: SectorsWhereUniqueInput
    data: XOR<SectorsUpdateWithoutJobOfferInput, SectorsUncheckedUpdateWithoutJobOfferInput>
  }

  export type SectorsUpdateManyWithWhereWithoutJobOfferInput = {
    where: SectorsScalarWhereInput
    data: XOR<SectorsUpdateManyMutationInput, SectorsUncheckedUpdateManyWithoutJobOfferInput>
  }

  export type SectorsScalarWhereInput = {
    AND?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
    OR?: SectorsScalarWhereInput[]
    NOT?: SectorsScalarWhereInput | SectorsScalarWhereInput[]
    id?: StringFilter<"Sectors"> | string
    name?: StringFilter<"Sectors"> | string
    slug?: StringFilter<"Sectors"> | string
    categoryId?: StringFilter<"Sectors"> | string
  }

  export type jobTagsUpsertWithWhereUniqueWithoutJobOffersInput = {
    where: jobTagsWhereUniqueInput
    update: XOR<jobTagsUpdateWithoutJobOffersInput, jobTagsUncheckedUpdateWithoutJobOffersInput>
    create: XOR<jobTagsCreateWithoutJobOffersInput, jobTagsUncheckedCreateWithoutJobOffersInput>
  }

  export type jobTagsUpdateWithWhereUniqueWithoutJobOffersInput = {
    where: jobTagsWhereUniqueInput
    data: XOR<jobTagsUpdateWithoutJobOffersInput, jobTagsUncheckedUpdateWithoutJobOffersInput>
  }

  export type jobTagsUpdateManyWithWhereWithoutJobOffersInput = {
    where: jobTagsScalarWhereInput
    data: XOR<jobTagsUpdateManyMutationInput, jobTagsUncheckedUpdateManyWithoutJobOffersInput>
  }

  export type jobTagsScalarWhereInput = {
    AND?: jobTagsScalarWhereInput | jobTagsScalarWhereInput[]
    OR?: jobTagsScalarWhereInput[]
    NOT?: jobTagsScalarWhereInput | jobTagsScalarWhereInput[]
    id?: StringFilter<"jobTags"> | string
    name?: StringFilter<"jobTags"> | string
    slug?: StringFilter<"jobTags"> | string
  }

  export type SavedJobsUpsertWithWhereUniqueWithoutJobOfferInput = {
    where: SavedJobsWhereUniqueInput
    update: XOR<SavedJobsUpdateWithoutJobOfferInput, SavedJobsUncheckedUpdateWithoutJobOfferInput>
    create: XOR<SavedJobsCreateWithoutJobOfferInput, SavedJobsUncheckedCreateWithoutJobOfferInput>
  }

  export type SavedJobsUpdateWithWhereUniqueWithoutJobOfferInput = {
    where: SavedJobsWhereUniqueInput
    data: XOR<SavedJobsUpdateWithoutJobOfferInput, SavedJobsUncheckedUpdateWithoutJobOfferInput>
  }

  export type SavedJobsUpdateManyWithWhereWithoutJobOfferInput = {
    where: SavedJobsScalarWhereInput
    data: XOR<SavedJobsUpdateManyMutationInput, SavedJobsUncheckedUpdateManyWithoutJobOfferInput>
  }

  export type SendCandidatureUpsertWithWhereUniqueWithoutJobOfferInput = {
    where: SendCandidatureWhereUniqueInput
    update: XOR<SendCandidatureUpdateWithoutJobOfferInput, SendCandidatureUncheckedUpdateWithoutJobOfferInput>
    create: XOR<SendCandidatureCreateWithoutJobOfferInput, SendCandidatureUncheckedCreateWithoutJobOfferInput>
  }

  export type SendCandidatureUpdateWithWhereUniqueWithoutJobOfferInput = {
    where: SendCandidatureWhereUniqueInput
    data: XOR<SendCandidatureUpdateWithoutJobOfferInput, SendCandidatureUncheckedUpdateWithoutJobOfferInput>
  }

  export type SendCandidatureUpdateManyWithWhereWithoutJobOfferInput = {
    where: SendCandidatureScalarWhereInput
    data: XOR<SendCandidatureUpdateManyMutationInput, SendCandidatureUncheckedUpdateManyWithoutJobOfferInput>
  }

  export type CandidatDataCreateWithoutSavedJobsInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutSavedJobsInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutSavedJobsInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutSavedJobsInput, CandidatDataUncheckedCreateWithoutSavedJobsInput>
  }

  export type jobOffersCreateWithoutSavedByInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutSavedByInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutSavedByInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutSavedByInput, jobOffersUncheckedCreateWithoutSavedByInput>
  }

  export type CandidatDataUpsertWithoutSavedJobsInput = {
    update: XOR<CandidatDataUpdateWithoutSavedJobsInput, CandidatDataUncheckedUpdateWithoutSavedJobsInput>
    create: XOR<CandidatDataCreateWithoutSavedJobsInput, CandidatDataUncheckedCreateWithoutSavedJobsInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutSavedJobsInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutSavedJobsInput, CandidatDataUncheckedUpdateWithoutSavedJobsInput>
  }

  export type CandidatDataUpdateWithoutSavedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutSavedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type jobOffersUpsertWithoutSavedByInput = {
    update: XOR<jobOffersUpdateWithoutSavedByInput, jobOffersUncheckedUpdateWithoutSavedByInput>
    create: XOR<jobOffersCreateWithoutSavedByInput, jobOffersUncheckedCreateWithoutSavedByInput>
    where?: jobOffersWhereInput
  }

  export type jobOffersUpdateToOneWithWhereWithoutSavedByInput = {
    where?: jobOffersWhereInput
    data: XOR<jobOffersUpdateWithoutSavedByInput, jobOffersUncheckedUpdateWithoutSavedByInput>
  }

  export type jobOffersUpdateWithoutSavedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutSavedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type CandidatDataCreateWithoutSendCandidatureInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesCreateNestedManyWithoutCandidateInput
    education?: EducationCreateNestedManyWithoutCandidateInput
    experience?: ExperienceCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesCreateNestedManyWithoutCandidateInput
    languages?: LanguagesCreateNestedManyWithoutCandidateInput
    skills?: SkillsCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsCreateNestedManyWithoutCandidateInput
    user: UserCreateNestedOneWithoutCandidatdataInput
    candidatLifeState?: CandidatLifeStateCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataUncheckedCreateWithoutSendCandidatureInput = {
    id?: string
    firstname: string
    surname: string
    birthday: string
    phone?: string | null
    resident?: string | null
    about_my?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    avatar?: CandidatDataCreateavatarInput | string[]
    courses?: CoursesUncheckedCreateNestedManyWithoutCandidateInput
    education?: EducationUncheckedCreateNestedManyWithoutCandidateInput
    experience?: ExperienceUncheckedCreateNestedManyWithoutCandidateInput
    hobbies?: HobbiesUncheckedCreateNestedManyWithoutCandidateInput
    languages?: LanguagesUncheckedCreateNestedManyWithoutCandidateInput
    skills?: SkillsUncheckedCreateNestedManyWithoutCandidateInput
    savedJobs?: SavedJobsUncheckedCreateNestedManyWithoutCandidateInput
    candidatLifeState?: CandidatLifeStateUncheckedCreateNestedOneWithoutCandidateInput
  }

  export type CandidatDataCreateOrConnectWithoutSendCandidatureInput = {
    where: CandidatDataWhereUniqueInput
    create: XOR<CandidatDataCreateWithoutSendCandidatureInput, CandidatDataUncheckedCreateWithoutSendCandidatureInput>
  }

  export type jobOffersCreateWithoutSendCandidatureInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutSendCandidatureInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutSendCandidatureInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutSendCandidatureInput, jobOffersUncheckedCreateWithoutSendCandidatureInput>
  }

  export type CandidatDataUpsertWithoutSendCandidatureInput = {
    update: XOR<CandidatDataUpdateWithoutSendCandidatureInput, CandidatDataUncheckedUpdateWithoutSendCandidatureInput>
    create: XOR<CandidatDataCreateWithoutSendCandidatureInput, CandidatDataUncheckedCreateWithoutSendCandidatureInput>
    where?: CandidatDataWhereInput
  }

  export type CandidatDataUpdateToOneWithWhereWithoutSendCandidatureInput = {
    where?: CandidatDataWhereInput
    data: XOR<CandidatDataUpdateWithoutSendCandidatureInput, CandidatDataUncheckedUpdateWithoutSendCandidatureInput>
  }

  export type CandidatDataUpdateWithoutSendCandidatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUpdateManyWithoutCandidateNestedInput
    education?: EducationUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUpdateManyWithoutCandidateNestedInput
    user?: UserUpdateOneRequiredWithoutCandidatdataNestedInput
    candidatLifeState?: CandidatLifeStateUpdateOneWithoutCandidateNestedInput
  }

  export type CandidatDataUncheckedUpdateWithoutSendCandidatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    resident?: NullableStringFieldUpdateOperationsInput | string | null
    about_my?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    avatar?: CandidatDataUpdateavatarInput | string[]
    courses?: CoursesUncheckedUpdateManyWithoutCandidateNestedInput
    education?: EducationUncheckedUpdateManyWithoutCandidateNestedInput
    experience?: ExperienceUncheckedUpdateManyWithoutCandidateNestedInput
    hobbies?: HobbiesUncheckedUpdateManyWithoutCandidateNestedInput
    languages?: LanguagesUncheckedUpdateManyWithoutCandidateNestedInput
    skills?: SkillsUncheckedUpdateManyWithoutCandidateNestedInput
    savedJobs?: SavedJobsUncheckedUpdateManyWithoutCandidateNestedInput
    candidatLifeState?: CandidatLifeStateUncheckedUpdateOneWithoutCandidateNestedInput
  }

  export type jobOffersUpsertWithoutSendCandidatureInput = {
    update: XOR<jobOffersUpdateWithoutSendCandidatureInput, jobOffersUncheckedUpdateWithoutSendCandidatureInput>
    create: XOR<jobOffersCreateWithoutSendCandidatureInput, jobOffersUncheckedCreateWithoutSendCandidatureInput>
    where?: jobOffersWhereInput
  }

  export type jobOffersUpdateToOneWithWhereWithoutSendCandidatureInput = {
    where?: jobOffersWhereInput
    data: XOR<jobOffersUpdateWithoutSendCandidatureInput, jobOffersUncheckedUpdateWithoutSendCandidatureInput>
  }

  export type jobOffersUpdateWithoutSendCandidatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutSendCandidatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type ExperienceCreateWithoutContractTypeJobInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    candidate: CandidatDataCreateNestedOneWithoutExperienceInput
  }

  export type ExperienceUncheckedCreateWithoutContractTypeJobInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    cdId: string
  }

  export type ExperienceCreateOrConnectWithoutContractTypeJobInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput>
  }

  export type ExperienceCreateManyContractTypeJobInputEnvelope = {
    data: ExperienceCreateManyContractTypeJobInput | ExperienceCreateManyContractTypeJobInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersCreateWithoutContractTypeInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutContractTypeInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutContractTypeInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput>
  }

  export type jobOffersCreateManyContractTypeInputEnvelope = {
    data: jobOffersCreateManyContractTypeInput | jobOffersCreateManyContractTypeInput[]
    skipDuplicates?: boolean
  }

  export type ExperienceUpsertWithWhereUniqueWithoutContractTypeJobInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutContractTypeJobInput, ExperienceUncheckedUpdateWithoutContractTypeJobInput>
    create: XOR<ExperienceCreateWithoutContractTypeJobInput, ExperienceUncheckedCreateWithoutContractTypeJobInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutContractTypeJobInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutContractTypeJobInput, ExperienceUncheckedUpdateWithoutContractTypeJobInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutContractTypeJobInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutContractTypeJobInput>
  }

  export type jobOffersUpsertWithWhereUniqueWithoutContractTypeInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutContractTypeInput, jobOffersUncheckedUpdateWithoutContractTypeInput>
    create: XOR<jobOffersCreateWithoutContractTypeInput, jobOffersUncheckedCreateWithoutContractTypeInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutContractTypeInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutContractTypeInput, jobOffersUncheckedUpdateWithoutContractTypeInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutContractTypeInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutContractTypeInput>
  }

  export type jobOffersCreateWithoutExperienceMinimalJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutExperienceMinimalJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutExperienceMinimalJobInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput>
  }

  export type jobOffersCreateManyExperienceMinimalJobInputEnvelope = {
    data: jobOffersCreateManyExperienceMinimalJobInput | jobOffersCreateManyExperienceMinimalJobInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersUpsertWithWhereUniqueWithoutExperienceMinimalJobInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutExperienceMinimalJobInput, jobOffersUncheckedUpdateWithoutExperienceMinimalJobInput>
    create: XOR<jobOffersCreateWithoutExperienceMinimalJobInput, jobOffersUncheckedCreateWithoutExperienceMinimalJobInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutExperienceMinimalJobInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutExperienceMinimalJobInput, jobOffersUncheckedUpdateWithoutExperienceMinimalJobInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutExperienceMinimalJobInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutExperienceMinimalJobInput>
  }

  export type jobOffersCreateWithoutModeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutModeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutModeJobInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput>
  }

  export type jobOffersCreateManyModeJobInputEnvelope = {
    data: jobOffersCreateManyModeJobInput | jobOffersCreateManyModeJobInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersUpsertWithWhereUniqueWithoutModeJobInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutModeJobInput, jobOffersUncheckedUpdateWithoutModeJobInput>
    create: XOR<jobOffersCreateWithoutModeJobInput, jobOffersUncheckedCreateWithoutModeJobInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutModeJobInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutModeJobInput, jobOffersUncheckedUpdateWithoutModeJobInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutModeJobInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutModeJobInput>
  }

  export type jobOffersCreateWithoutWorkingTimeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutWorkingTimeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutWorkingTimeJobInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput>
  }

  export type jobOffersCreateManyWorkingTimeJobInputEnvelope = {
    data: jobOffersCreateManyWorkingTimeJobInput | jobOffersCreateManyWorkingTimeJobInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersUpsertWithWhereUniqueWithoutWorkingTimeJobInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutWorkingTimeJobInput, jobOffersUncheckedUpdateWithoutWorkingTimeJobInput>
    create: XOR<jobOffersCreateWithoutWorkingTimeJobInput, jobOffersUncheckedCreateWithoutWorkingTimeJobInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutWorkingTimeJobInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutWorkingTimeJobInput, jobOffersUncheckedUpdateWithoutWorkingTimeJobInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutWorkingTimeJobInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutWorkingTimeJobInput>
  }

  export type EducationCreateWithoutLevelEducationInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    candidate: CandidatDataCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutLevelEducationInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    cdId: string
  }

  export type EducationCreateOrConnectWithoutLevelEducationInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput>
  }

  export type EducationCreateManyLevelEducationInputEnvelope = {
    data: EducationCreateManyLevelEducationInput | EducationCreateManyLevelEducationInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersCreateWithoutLevelEducationInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutLevelEducationInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutLevelEducationInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput>
  }

  export type jobOffersCreateManyLevelEducationInputEnvelope = {
    data: jobOffersCreateManyLevelEducationInput | jobOffersCreateManyLevelEducationInput[]
    skipDuplicates?: boolean
  }

  export type EducationUpsertWithWhereUniqueWithoutLevelEducationInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutLevelEducationInput, EducationUncheckedUpdateWithoutLevelEducationInput>
    create: XOR<EducationCreateWithoutLevelEducationInput, EducationUncheckedCreateWithoutLevelEducationInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutLevelEducationInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutLevelEducationInput, EducationUncheckedUpdateWithoutLevelEducationInput>
  }

  export type EducationUpdateManyWithWhereWithoutLevelEducationInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutLevelEducationInput>
  }

  export type jobOffersUpsertWithWhereUniqueWithoutLevelEducationInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutLevelEducationInput, jobOffersUncheckedUpdateWithoutLevelEducationInput>
    create: XOR<jobOffersCreateWithoutLevelEducationInput, jobOffersUncheckedCreateWithoutLevelEducationInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutLevelEducationInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutLevelEducationInput, jobOffersUncheckedUpdateWithoutLevelEducationInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutLevelEducationInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutLevelEducationInput>
  }

  export type jobOffersCreateWithoutTagsInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutTagsInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutTagsInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput>
  }

  export type jobOffersUpsertWithWhereUniqueWithoutTagsInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutTagsInput, jobOffersUncheckedUpdateWithoutTagsInput>
    create: XOR<jobOffersCreateWithoutTagsInput, jobOffersUncheckedCreateWithoutTagsInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutTagsInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutTagsInput, jobOffersUncheckedUpdateWithoutTagsInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutTagsInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutTagsInput>
  }

  export type SectorsCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    jobOffer?: jobOffersCreateNestedManyWithoutSectorsInput
  }

  export type SectorsUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    jobOffer?: jobOffersUncheckedCreateNestedManyWithoutSectorsInput
  }

  export type SectorsCreateOrConnectWithoutCategoryInput = {
    where: SectorsWhereUniqueInput
    create: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput>
  }

  export type SectorsCreateManyCategoryInputEnvelope = {
    data: SectorsCreateManyCategoryInput | SectorsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    sectors?: SectorsCreateNestedManyWithoutCategoryInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    jobOffers?: jobOffersCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parentId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutCategoryInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    sectors?: SectorsCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type jobOffersCreateWithoutCategoriesInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    sectors?: SectorsCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutCategoriesInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    sectors?: SectorsUncheckedCreateNestedManyWithoutJobOfferInput
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutCategoriesInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput>
  }

  export type jobOffersCreateManyCategoriesInputEnvelope = {
    data: jobOffersCreateManyCategoriesInput | jobOffersCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type SectorsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SectorsWhereUniqueInput
    update: XOR<SectorsUpdateWithoutCategoryInput, SectorsUncheckedUpdateWithoutCategoryInput>
    create: XOR<SectorsCreateWithoutCategoryInput, SectorsUncheckedCreateWithoutCategoryInput>
  }

  export type SectorsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SectorsWhereUniqueInput
    data: XOR<SectorsUpdateWithoutCategoryInput, SectorsUncheckedUpdateWithoutCategoryInput>
  }

  export type SectorsUpdateManyWithWhereWithoutCategoryInput = {
    where: SectorsScalarWhereInput
    data: XOR<SectorsUpdateManyMutationInput, SectorsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    sectors?: SectorsUpdateManyWithoutCategoryNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    jobOffers?: jobOffersUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutCategoryNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    level?: IntNullableFilter<"Category"> | number | null
    parentId?: StringNullableFilter<"Category"> | string | null
  }

  export type jobOffersUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutCategoriesInput, jobOffersUncheckedUpdateWithoutCategoriesInput>
    create: XOR<jobOffersCreateWithoutCategoriesInput, jobOffersUncheckedCreateWithoutCategoriesInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutCategoriesInput, jobOffersUncheckedUpdateWithoutCategoriesInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutCategoriesInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutSectorsInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutSectorsInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    jobOffers?: jobOffersUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutSectorsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSectorsInput, CategoryUncheckedCreateWithoutSectorsInput>
  }

  export type jobOffersCreateWithoutSectorsInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    agency: AgencyDataCreateNestedOneWithoutJobOffersInput
    branch?: BranchCreateNestedOneWithoutJobOffersInput
    categories: CategoryCreateNestedOneWithoutJobOffersInput
    contractType?: ContractTypeJobCreateNestedOneWithoutJobOffersInput
    experienceMinimalJob?: ExperienceMinimalJobCreateNestedOneWithoutJobOffersInput
    levelEducation?: LevelEducationCreateNestedOneWithoutJobOffersInput
    modeJob?: ModeJobCreateNestedOneWithoutJobOffersInput
    workingTimeJob?: WorkingTimeJobCreateNestedOneWithoutJobOffersInput
    tags?: jobTagsCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersUncheckedCreateWithoutSectorsInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
    tags?: jobTagsUncheckedCreateNestedManyWithoutJobOffersInput
    savedBy?: SavedJobsUncheckedCreateNestedManyWithoutJobOfferInput
    sendCandidature?: SendCandidatureUncheckedCreateNestedManyWithoutJobOfferInput
  }

  export type jobOffersCreateOrConnectWithoutSectorsInput = {
    where: jobOffersWhereUniqueInput
    create: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput>
  }

  export type CategoryUpsertWithoutSectorsInput = {
    update: XOR<CategoryUpdateWithoutSectorsInput, CategoryUncheckedUpdateWithoutSectorsInput>
    create: XOR<CategoryCreateWithoutSectorsInput, CategoryUncheckedCreateWithoutSectorsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSectorsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSectorsInput, CategoryUncheckedUpdateWithoutSectorsInput>
  }

  export type CategoryUpdateWithoutSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type jobOffersUpsertWithWhereUniqueWithoutSectorsInput = {
    where: jobOffersWhereUniqueInput
    update: XOR<jobOffersUpdateWithoutSectorsInput, jobOffersUncheckedUpdateWithoutSectorsInput>
    create: XOR<jobOffersCreateWithoutSectorsInput, jobOffersUncheckedCreateWithoutSectorsInput>
  }

  export type jobOffersUpdateWithWhereUniqueWithoutSectorsInput = {
    where: jobOffersWhereUniqueInput
    data: XOR<jobOffersUpdateWithoutSectorsInput, jobOffersUncheckedUpdateWithoutSectorsInput>
  }

  export type jobOffersUpdateManyWithWhereWithoutSectorsInput = {
    where: jobOffersScalarWhereInput
    data: XOR<jobOffersUpdateManyMutationInput, jobOffersUncheckedUpdateManyWithoutSectorsInput>
  }

  export type UserCreateWithoutAuthAccountsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataCreateNestedOneWithoutUserInput
    social?: UserSocialCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataCreateNestedOneWithoutUserInput
    ratings?: RatingCreateNestedManyWithoutUserInput
    reviews?: RatingCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutAuthAccountsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    method: $Enums.AuthMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    agencydata?: AgencyDataUncheckedCreateNestedOneWithoutUserInput
    social?: UserSocialUncheckedCreateNestedManyWithoutUserInput
    candidatdata?: CandidatDataUncheckedCreateNestedOneWithoutUserInput
    ratings?: RatingUncheckedCreateNestedManyWithoutUserInput
    reviews?: RatingUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutAuthAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthAccountsInput, UserUncheckedCreateWithoutAuthAccountsInput>
  }

  export type UserUpsertWithoutAuthAccountsInput = {
    update: XOR<UserUpdateWithoutAuthAccountsInput, UserUncheckedUpdateWithoutAuthAccountsInput>
    create: XOR<UserCreateWithoutAuthAccountsInput, UserUncheckedCreateWithoutAuthAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthAccountsInput, UserUncheckedUpdateWithoutAuthAccountsInput>
  }

  export type UserUpdateWithoutAuthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUpdateOneWithoutUserNestedInput
    social?: UserSocialUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUpdateOneWithoutUserNestedInput
    ratings?: RatingUpdateManyWithoutUserNestedInput
    reviews?: RatingUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencydata?: AgencyDataUncheckedUpdateOneWithoutUserNestedInput
    social?: UserSocialUncheckedUpdateManyWithoutUserNestedInput
    candidatdata?: CandidatDataUncheckedUpdateOneWithoutUserNestedInput
    ratings?: RatingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: RatingUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserSocialCreateManyUserInput = {
    id?: string
    socialLink: string
  }

  export type AuthAccountCreateManyUserInput = {
    id?: string
    type: string
    provide: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyUserInput = {
    id?: string
    reviewerId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyReviewerInput = {
    id?: string
    userId: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSocialUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type UserSocialUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type UserSocialUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialLink?: StringFieldUpdateOperationsInput | string
  }

  export type AuthAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provide?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type RatingUncheckedUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesCreateManyCandidateInput = {
    id?: string
    course: string
    institution: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
  }

  export type EducationCreateManyCandidateInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    levelId?: string | null
  }

  export type ExperienceCreateManyCandidateInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    contractTypeId?: string | null
  }

  export type HobbiesCreateManyCandidateInput = {
    id?: string
    hobbie: string
  }

  export type LanguagesCreateManyCandidateInput = {
    id?: string
    language: string
    level?: $Enums.LanguageLevel
  }

  export type SkillsCreateManyCandidateInput = {
    id?: string
    skill: string
    level?: $Enums.SkillsLevel
  }

  export type SavedJobsCreateManyCandidateInput = {
    id?: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type SendCandidatureCreateManyCandidateInput = {
    id?: string
    jobOfferId: string
    savedAt?: Date | string
  }

  export type CoursesUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelEducation?: LevelEducationUpdateOneWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperienceUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeJob?: ContractTypeJobUpdateOneWithoutExperienceNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperienceUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HobbiesUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
  }

  export type HobbiesUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
  }

  export type HobbiesUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hobbie?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
  }

  export type LanguagesUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
  }

  export type LanguagesUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    level?: EnumLanguageLevelFieldUpdateOperationsInput | $Enums.LanguageLevel
  }

  export type SkillsUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
  }

  export type SkillsUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
  }

  export type SkillsUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    level?: EnumSkillsLevelFieldUpdateOperationsInput | $Enums.SkillsLevel
  }

  export type SavedJobsUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobOffer?: jobOffersUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedJobsUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobsUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobOffer?: jobOffersUpdateOneRequiredWithoutSendCandidatureNestedInput
  }

  export type SendCandidatureUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobOfferId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchCreateManyAgencyInput = {
    id?: string
    name: string
    email: string
    phone: string
    fax?: string | null
    address: string
    location: string
    region: string
    logo?: string | null
    about_branch?: string | null
  }

  export type jobOffersCreateManyAgencyInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    branchId?: string | null
  }

  export type BranchUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    jobOffers?: jobOffersUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
    jobOffers?: jobOffersUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    fax?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    about_branch?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersCreateManyBranchInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
  }

  export type jobOffersUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
  }

  export type SavedJobsCreateManyJobOfferInput = {
    id?: string
    candidateId: string
    savedAt?: Date | string
  }

  export type SendCandidatureCreateManyJobOfferInput = {
    id?: string
    candidateId: string
    savedAt?: Date | string
  }

  export type SectorsUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutSectorsNestedInput
  }

  export type SectorsUncheckedUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type SectorsUncheckedUpdateManyWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type jobTagsUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type jobTagsUncheckedUpdateWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type jobTagsUncheckedUpdateManyWithoutJobOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SavedJobsUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatDataUpdateOneRequiredWithoutSavedJobsNestedInput
  }

  export type SavedJobsUncheckedUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobsUncheckedUpdateManyWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatDataUpdateOneRequiredWithoutSendCandidatureNestedInput
  }

  export type SendCandidatureUncheckedUpdateWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SendCandidatureUncheckedUpdateManyWithoutJobOfferInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperienceCreateManyContractTypeJobInput = {
    id?: string
    company: string
    location?: string | null
    currently?: boolean
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    cdId: string
  }

  export type jobOffersCreateManyContractTypeInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type ExperienceUpdateWithoutContractTypeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidatDataUpdateOneRequiredWithoutExperienceNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutContractTypeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUncheckedUpdateManyWithoutContractTypeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    currently?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type jobOffersUpdateWithoutContractTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutContractTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutContractTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersCreateManyExperienceMinimalJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type jobOffersUpdateWithoutExperienceMinimalJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutExperienceMinimalJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutExperienceMinimalJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersCreateManyModeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type jobOffersUpdateWithoutModeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutModeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutModeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersCreateManyWorkingTimeJobInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type jobOffersUpdateWithoutWorkingTimeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutWorkingTimeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutWorkingTimeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationCreateManyLevelEducationInput = {
    id?: string
    school: string
    grade?: string | null
    startdate: Date | string
    enddate: Date | string
    description?: string | null
    cdId: string
  }

  export type jobOffersCreateManyLevelEducationInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    categoryId: string
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type EducationUpdateWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidatDataUpdateOneRequiredWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateManyWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cdId?: StringFieldUpdateOperationsInput | string
  }

  export type jobOffersUpdateWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutLevelEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectorsCreateManyCategoryInput = {
    id?: string
    name: string
    slug: string
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    slug: string
    description: string
    level?: number | null
  }

  export type jobOffersCreateManyCategoriesInput = {
    id?: string
    title: string
    slug: string
    description: string
    region: string
    province: string
    location: string
    reallyUpTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isValidate?: boolean
    views?: number
    contratId?: string | null
    experienceId?: string | null
    modeId?: string | null
    workingTimeId?: string | null
    levelId?: string | null
    agencyId: string
    branchId?: string | null
  }

  export type SectorsUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    jobOffer?: jobOffersUpdateManyWithoutSectorsNestedInput
  }

  export type SectorsUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    jobOffer?: jobOffersUncheckedUpdateManyWithoutSectorsNestedInput
  }

  export type SectorsUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    sectors?: SectorsUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
    sectors?: SectorsUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    jobOffers?: jobOffersUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type jobOffersUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    sectors?: SectorsUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    sectors?: SectorsUncheckedUpdateManyWithoutJobOfferNestedInput
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jobOffersUpdateWithoutSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    agency?: AgencyDataUpdateOneRequiredWithoutJobOffersNestedInput
    branch?: BranchUpdateOneWithoutJobOffersNestedInput
    categories?: CategoryUpdateOneRequiredWithoutJobOffersNestedInput
    contractType?: ContractTypeJobUpdateOneWithoutJobOffersNestedInput
    experienceMinimalJob?: ExperienceMinimalJobUpdateOneWithoutJobOffersNestedInput
    levelEducation?: LevelEducationUpdateOneWithoutJobOffersNestedInput
    modeJob?: ModeJobUpdateOneWithoutJobOffersNestedInput
    workingTimeJob?: WorkingTimeJobUpdateOneWithoutJobOffersNestedInput
    tags?: jobTagsUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateWithoutSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: jobTagsUncheckedUpdateManyWithoutJobOffersNestedInput
    savedBy?: SavedJobsUncheckedUpdateManyWithoutJobOfferNestedInput
    sendCandidature?: SendCandidatureUncheckedUpdateManyWithoutJobOfferNestedInput
  }

  export type jobOffersUncheckedUpdateManyWithoutSectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    reallyUpTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isValidate?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    contratId?: NullableStringFieldUpdateOperationsInput | string | null
    experienceId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    workingTimeId?: NullableStringFieldUpdateOperationsInput | string | null
    levelId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}