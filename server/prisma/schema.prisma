generator client {
  provider = "prisma-client-js"
  output = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole @default(CANDIDAT)

  isVerified Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  authAccounts AuthAccount[]

  agencydata   AgencyData?
  candidatdata CandidatData?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model CandidatData {
  id         String         @id @default(uuid())
  firstname  String
  surname    String
  birthday   String
  phone      String
  resident   String
  about_my   String
  avatar     String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  userId     String         @unique @map("user_id")
  courses    Courses[]
  education  Education[]
  experience Experience[]
  hobbies    Hobbies[]
  languages  Languages[]
  skills     Skills[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("candidat_data")
}

model Education {
  id         String         @id @default(uuid())
  degree      String
  school      String
  grade       String?
  startdate   DateTime @db.Date
  enddate     DateTime @db.Date
  description String?

  candidate   CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cdId        String          @map("candidate_id")
}

model Skills {
  id         String         @id @default(uuid())
  skill     String
  level     SkillsLevel  @default(NONE)
  cdId      String          @map("candidate_id")
  candidate CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Experience {
  id         String         @id @default(uuid())
  company     String
  contract    ContractType
  location    String?
  currently   Boolean      @default(false)
  startDate   DateTime
  endDate     DateTime
  description String?
  cdId        String          @map("candidate_id")
  candidate   CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Languages {
  id         String         @id @default(uuid())
  language  String
  level     LanguageLevel @default(BASIC)
  cdId      String           @map("candidate_id")
  candidate CandidatData  @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Courses {
  id         String         @id @default(uuid())
  course      String
  institution String
  grade       String
  startdate   DateTime
  enddate     DateTime
  cdId        String          @map("candidate_id")
  candidate   CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model Hobbies {
  id         String         @id @default(uuid())
  hobbie    String
  cdId      String          @map("candidate_id")
  candidate CandidatData @relation(fields: [cdId], references: [id], onDelete: Cascade)
}

model AgencyData {
  id         String         @id @default(uuid())
  agency_name String
  slug        String     @unique
  address     String
  phone       String
  p_iva_c_f   String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userId      String        @unique @map("user_id")
  about       String
  logo        String[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch      Branch[]
  jobOffers   jobOffers[]

  @@map("agency_data")
}

model Branch {
  id         String         @id @default(uuid())
  name      String
  email     String
  phone     String
  fax       String?
  location  String
  logo      String?
  adId      String         @map("agency_id")
  agency    AgencyData  @relation(fields: [adId], references: [id])
  jobOffers jobOffers[]

  @@map("branches")
}

model jobOffers {
  id          String                 @id @default(uuid())
  title       String
  slug        String              @unique
  description String
  region      String
  province    String
  location    String
  reallyUpTo  DateTime? @map("really_up_to")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  isValidate   Boolean             @default(false)
  views       Int                 @default(0)
  categories  Category[]
  sectors     Sectors[]
  tags        jobTags[]
  
  agencyId    String                 @map("agency_id")
  agency      AgencyData          @relation(fields: [agencyId], references: [id])
  
  branchId    String?                @map("branch_id")
  branch      Branch?             @relation(fields: [branchId], references: [id])

  @@map("job_offers")
}

model jobTags {
  id String @id @default(uuid())
  name String
  slug      String
  jobOffers jobOffers[]

  @@map("job_tags")
}

model Category {
  id          String                 @id @default(uuid())
  name        String              @unique
  slug        String              @unique
  description String
  level       Int?
  sectors     Sectors[]
  jobOffers   jobOffers[]
  parentId    String?
  parent      Category?           @relation("SubCategory", fields: [parentId], references: [id])
  children    Category[]          @relation("SubCategory")
  
  @@map("categories")
}

model Sectors {
  id String @id @default(uuid())
  name String @unique
  slug String @unique
  jobOffer jobOffers[]
  
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AuthAccount {
  id String @id @default(uuid())

  type String
  provide String

  refreshToken String? @map("refresh_token")
  accessToken String? @map("access_token")
  expiresAt Int @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("auth_account")
}

model Tokens {
  id String @id @default(uuid())

  email String
  token String @unique
  type TokenType
  expiresIn DateTime @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  FACEBOOK
  TWITTER
  TELEGRAMM
  INSTAGRAM
  DISCORD
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  CANDIDAT
  AGENCY
}

enum SkillsLevel {
  NONE
  BEGINNER
  EXPERIENCED
  EXPERT
}

enum ContractType {
  PARTTIME
  SELFEMPLOYED
  FREELANCE
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
}

enum LanguageLevel {
  NATIVESPEAKER
  FLUENT
  VERYGOOD
  BASIC
}